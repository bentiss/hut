// THIS FILE IS GENERATED, DO NOT EDIT

//! A wrapper around the [HID Usage Tables (HUT)](https://usb.org/document-library/hid-usage-tables-15).
//! Note that this module is created through code generation.
//!
//! In this document and unless stated otherwise, a reference to "section a.b.c" refers to the
//! [HID Device Class Definition for HID 1.11](https://www.usb.org/document-library/device-class-definition-hid-111).
//!
//! # Terminology
//!
//! See Section 5.5: a HID Usage is a 32 bit value comprising of a 16-bit Usage
//! Page and a 16-bit Usage ID.
//!
//! In this module:
//! - "Usage Page" refers to the 16-bit value. Where the Usage Page is converted
//!   to or from a 32-bit value the Usage Page is in the upper 16 bits of that value and
//!   the lower 16 bits are ignored or set to zero.
//! - "Usage ID" refers to the 16-bit value. Where the Usage ID is converted to
//!   or from a 32-bit value the Usage is in the lower 16 bits of that value and !   the upper 16 bits are ignored or set to zero.
//! - "Usage" refers to the 32-bit value comprising a Usage Page and a Usage.
//!
//! # Converting between types
//!
//! All defined [Usage]s and [UsagePage] implement [AsUsagePage] and (if applicable) [AsUsage] as
//! well as the [`From<u16>`](From), [`From<u32>`](From) and [`TryFrom<u16>`](TryFrom) conversions so that:
//! ```
//! # use hut::*;
//! let usage_page_value: u16 = 0x01; // Generic Desktop
//! let usage_id_value: u16 = 0x02; // Mouse
//! let usage_value: u32 = (usage_page_value as u32) << 16 | usage_id_value as u32;
//!
//! // Convert to and fro the Usage either via [u32] or the [AsUsage] trait
//! let u = GenericDesktop::Mouse;
//! assert!(matches!(Usage::try_from(usage_value).unwrap(), u));
//! assert_eq!(u32::from(&u), usage_value);
//! assert_eq!(u.usage_value(), usage_value);
//!
//! // Convert to and fro the UsageID either via u16 or the AsUsage trait
//! assert_eq!(usage_id_value, u16::from(&u));
//! assert_eq!(usage_id_value, u.usage_id_value());
//!
//! // Extract the Usage Page from  Usage enum value
//! assert!(matches!(UsagePage::from(&u), UsagePage::GenericDesktop));
//! let up = UsagePage::from(&u);
//!
//! // Get the Usage Page numeric value is via the [AsUsagePage]
//! assert_eq!(usage_page_value, u16::from(&up));
//! assert_eq!(usage_page_value, up.usage_page_value());
//! ```
//!
//! # Generated Usage Pages 
//!
//! The HUT differ between "Defined" and "Generated" Usage Pages. The former define Usage ID values
//! and their meanings, the latter define a Usage ID range, with the actual Usage ID simply 
//! referring to "nth thing in this usage page". One example for this is the Button Usage Page
//! (0x09) where a Usage ID of 3 means "Button 3".
//!
//! Unlike Defined Usage Pages Generated Usage Pages these need to be destructured in `match`
//! statements.
//!
//! The following usage pages are Generated:
//!   - Button (9) - see [Button]
//!   - Ordinal (10) - see [Ordinal]
//!   - Unicode (16) - see [Unicode]
//!   - MonitorEnumerated (129) - see [MonitorEnumerated]
//!
//! A further special case of this is the [Unicode] usage page which is not in the HUT
//! document and was inserted during code generation.
//!
//! # Vendor Defined Usage Pages (0xFF00 to 0xFFFF)
//!
//! [Vendor Defined Usage Pages](VendorDefinedPage) and [Usages](VendorDefinedPage::VendorUsage) are not autogenerated and thus
//! follow a different approach: the Usage inside the Usage Page is a simple
//! numeric usage that needs to be destructured in `match` statements.
//!
//! # Renames
//!
//! For technical reasons, spaces, (` `), dashes (`-`), and slashes (`/`) are
//! stripped out of Usage Page and Usage names. The string representation via
//! the `Display` trait will have the unmodified value.

#![allow(clippy::identity_op, clippy::eq_op, clippy::match_single_binding)]

use std::fmt;
use std::ops::BitOr;
use thiserror::Error;

#[derive(Error, Debug)]
pub enum HutError {
    #[error("Unknown Usage Page {usage_page}")]
    UnknownUsagePage { usage_page: u16 },
    #[error("Invalid Vendor Page {vendor_page}")]
    InvalidVendorPage { vendor_page: u16 },
    #[error("Unknown Usage")]
    UnknownUsage,
}

type Result<T> = std::result::Result<T, HutError>;

/// A trait to return the Usage and Usage ID as numeric value
pub trait AsUsage {
    fn usage_value(&self) -> u32;
    fn usage_id_value(&self) -> u16;
}

/// A trait to return the Usage Page as numeric value
pub trait AsUsagePage {
    /// Returns the 16 bit Usage Page value
    fn usage_page_value(&self) -> u16;
}

/// A HID UsagePage, see section 5.5. This represents the upper 16 bits in the
/// 32-bit
///
/// Note: this enum is generated from the HUT documents.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum UsagePage {
    /// Usage Page `0x1`: "Generic Desktop",
    /// see [GenericDesktop].
    GenericDesktop,
    /// Usage Page `0x2`: "Simulation Controls",
    /// see [SimulationControls].
    SimulationControls,
    /// Usage Page `0x3`: "VR Controls",
    /// see [VRControls].
    VRControls,
    /// Usage Page `0x4`: "Sport Controls",
    /// see [SportControls].
    SportControls,
    /// Usage Page `0x5`: "Game Controls",
    /// see [GameControls].
    GameControls,
    /// Usage Page `0x6`: "Generic Device Controls",
    /// see [GenericDeviceControls].
    GenericDeviceControls,
    /// Usage Page `0x7`: "Keyboard/Keypad",
    /// see [KeyboardKeypad].
    KeyboardKeypad,
    /// Usage Page `0x8`: "LED",
    /// see [LED].
    LED,
    /// Usage Page `0x9`: "Button",
    /// see [Button].
    Button,
    /// Usage Page `0xA`: "Ordinal",
    /// see [Ordinal].
    Ordinal,
    /// Usage Page `0xB`: "Telephony Device",
    /// see [TelephonyDevice].
    TelephonyDevice,
    /// Usage Page `0xC`: "Consumer",
    /// see [Consumer].
    Consumer,
    /// Usage Page `0xD`: "Digitizers",
    /// see [Digitizers].
    Digitizers,
    /// Usage Page `0xE`: "Haptics",
    /// see [Haptics].
    Haptics,
    /// Usage Page `0xF`: "Physical Input Device",
    /// see [PhysicalInputDevice].
    PhysicalInputDevice,
    /// Usage Page `0x10`: "Unicode",
    /// see [Unicode].
    Unicode,
    /// Usage Page `0x11`: "SoC",
    /// see [SoC].
    SoC,
    /// Usage Page `0x12`: "Eye and Head Trackers",
    /// see [EyeandHeadTrackers].
    EyeandHeadTrackers,
    /// Usage Page `0x14`: "Auxiliary Display",
    /// see [AuxiliaryDisplay].
    AuxiliaryDisplay,
    /// Usage Page `0x20`: "Sensors",
    /// see [Sensors].
    Sensors,
    /// Usage Page `0x40`: "Medical Instrument",
    /// see [MedicalInstrument].
    MedicalInstrument,
    /// Usage Page `0x41`: "Braille Display",
    /// see [BrailleDisplay].
    BrailleDisplay,
    /// Usage Page `0x59`: "Lighting And Illumination",
    /// see [LightingAndIllumination].
    LightingAndIllumination,
    /// Usage Page `0x80`: "Monitor",
    /// see [Monitor].
    Monitor,
    /// Usage Page `0x81`: "Monitor Enumerated",
    /// see [MonitorEnumerated].
    MonitorEnumerated,
    /// Usage Page `0x82`: "VESA Virtual Controls",
    /// see [VESAVirtualControls].
    VESAVirtualControls,
    /// Usage Page `0x84`: "Power",
    /// see [Power].
    Power,
    /// Usage Page `0x85`: "Battery System",
    /// see [BatterySystem].
    BatterySystem,
    /// Usage Page `0x8C`: "Barcode Scanner",
    /// see [BarcodeScanner].
    BarcodeScanner,
    /// Usage Page `0x8D`: "Scales",
    /// see [Scales].
    Scales,
    /// Usage Page `0x8E`: "Magnetic Stripe Reader",
    /// see [MagneticStripeReader].
    MagneticStripeReader,
    /// Usage Page `0x90`: "Camera Control",
    /// see [CameraControl].
    CameraControl,
    /// Usage Page `0x91`: "Arcade",
    /// see [Arcade].
    Arcade,
    /// Usage Page `0xF1D0`: "FIDO Alliance",
    /// see [FIDOAlliance].
    FIDOAlliance,
    /// The Vendor Defined Pages, range `0xFF00 - 0xFFFF`. See [VendorDefinedPage].
    VendorDefinedPage { vendor_page: VendorPage },
}

/// Represents a Vendor Defined Page number value of in the range 
/// 0xFF00 to 0xFFFF, inclusive. See [VendorDefinedPage].
#[derive(Debug, Clone, Copy, PartialEq, PartialOrd)]
pub struct VendorPage(u16);

impl From<&VendorPage> for VendorPage {
    fn from(v: &VendorPage) -> VendorPage {
        VendorPage(v.0)
    }
}

impl From<&VendorPage> for u16 {
    fn from(v: &VendorPage) -> u16 {
        v.0
    }
}

impl From<VendorPage> for u16 {
    fn from(v: VendorPage) -> u16 {
        u16::from(&v)
    }
}

impl From<&VendorPage> for u32 {
    fn from(v: &VendorPage) -> u32 {
        (v.0 as u32) << 16
    }
}

impl From<VendorPage> for u32 {
    fn from(v: VendorPage) -> u32 {
        u32::from(&v)
    }
}

impl TryFrom<u16> for VendorPage {
    type Error = HutError;

    fn try_from(v: u16) -> Result<VendorPage> {
        match v {
            p @ 0xff00..=0xffff => Ok(VendorPage(p)),
            n => Err(HutError::InvalidVendorPage { vendor_page: n }),
        }
    }
}

impl TryFrom<u32> for VendorPage {
    type Error = HutError;

    fn try_from(v: u32) -> Result<VendorPage> {
        VendorPage::try_from((v >> 16) as u16)
    }
}

impl UsagePage {
    /// Returns the Usage Page for the given Usage Page value. This is the
    /// 16-bit Usage Page value only, not the full 32-bit Usage.
    ///
    /// The returned value is always the "Undefined" usage of the matching
    /// Usage Page.
    pub fn from_usage_page_value(usage_page: u16) -> Result<UsagePage> {
        UsagePage::try_from(usage_page)
    }

    /// Returns the Usage Page for the given Usage numeric value. The Usage Page
    /// must be in the upper 16 bits of the `usage` value and the lower 16 bits
    /// are ignored.
    pub fn from_usage_value(usage: u32) -> Result<UsagePage> {
        let up: u16 = (usage >> 16) as u16;
        UsagePage::try_from(up)
    }

    /// Returns the 16-bit value for this Usage Page.
    pub fn usage_page(&self) -> u16 {
        u16::from(self)
    }

    /// Returns the 32-bit Usage that is this Usage Page combined with
    /// the 16 bits Usage ID.
    pub fn to_usage_from_value(&self, usage: u16) -> Result<Usage> {
        let up: u32 = (self.usage_page() as u32) << 16;
        let u: u32 = usage as u32;
        Usage::try_from(up | u)
    }

    pub fn to_usage(&self, usage: u16) -> Result<Usage> {
        let up: u32 = (self.usage_page() as u32) << 16;
        let u: u32 = usage as u32;
        Usage::try_from(up | u)
    }
}

impl AsUsagePage for UsagePage {
    /// Returns the 16 bit Usage Page value of this Usage Pagg
    fn usage_page_value(&self) -> u16 {
        u16::from(self)
    }
}

/// *Usage Page `0x1`: "Generic Desktop"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::GenericDesktop { usage: GenericDesktop::Mouse };
/// let u2 = Usage::new_from_page_and_id(0x1, 0x2).unwrap();
/// let u3 = Usage::from(GenericDesktop::Mouse);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x1, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x1 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum GenericDesktop {
    /// Usage ID `0x1`: "Pointer"
    Pointer,
    /// Usage ID `0x2`: "Mouse"
    Mouse,
    /// Usage ID `0x4`: "Joystick"
    Joystick,
    /// Usage ID `0x5`: "Gamepad"
    Gamepad,
    /// Usage ID `0x6`: "Keyboard"
    Keyboard,
    /// Usage ID `0x7`: "Keypad"
    Keypad,
    /// Usage ID `0x8`: "Multi-axis Controller"
    MultiaxisController,
    /// Usage ID `0x9`: "Tablet PC System Controls"
    TabletPCSystemControls,
    /// Usage ID `0xA`: "Water Cooling Device"
    WaterCoolingDevice,
    /// Usage ID `0xB`: "Computer Chassis Device"
    ComputerChassisDevice,
    /// Usage ID `0xC`: "Wireless Radio Controls"
    WirelessRadioControls,
    /// Usage ID `0xD`: "Portable Device Control"
    PortableDeviceControl,
    /// Usage ID `0xE`: "System Multi-Axis Controller"
    SystemMultiAxisController,
    /// Usage ID `0xF`: "Spatial Controller"
    SpatialController,
    /// Usage ID `0x10`: "Assistive Control"
    AssistiveControl,
    /// Usage ID `0x11`: "Device Dock"
    DeviceDock,
    /// Usage ID `0x12`: "Dockable Device"
    DockableDevice,
    /// Usage ID `0x13`: "Call State Management Control"
    CallStateManagementControl,
    /// Usage ID `0x30`: "X"
    X,
    /// Usage ID `0x31`: "Y"
    Y,
    /// Usage ID `0x32`: "Z"
    Z,
    /// Usage ID `0x33`: "Rx"
    Rx,
    /// Usage ID `0x34`: "Ry"
    Ry,
    /// Usage ID `0x35`: "Rz"
    Rz,
    /// Usage ID `0x36`: "Slider"
    Slider,
    /// Usage ID `0x37`: "Dial"
    Dial,
    /// Usage ID `0x38`: "Wheel"
    Wheel,
    /// Usage ID `0x39`: "Hat Switch"
    HatSwitch,
    /// Usage ID `0x3A`: "Counted Buffer"
    CountedBuffer,
    /// Usage ID `0x3B`: "Byte Count"
    ByteCount,
    /// Usage ID `0x3C`: "Motion Wakeup"
    MotionWakeup,
    /// Usage ID `0x3D`: "Start"
    Start,
    /// Usage ID `0x3E`: "Select"
    Select,
    /// Usage ID `0x40`: "Vx"
    Vx,
    /// Usage ID `0x41`: "Vy"
    Vy,
    /// Usage ID `0x42`: "Vz"
    Vz,
    /// Usage ID `0x43`: "Vbrx"
    Vbrx,
    /// Usage ID `0x44`: "Vbry"
    Vbry,
    /// Usage ID `0x45`: "Vbrz"
    Vbrz,
    /// Usage ID `0x46`: "Vno"
    Vno,
    /// Usage ID `0x47`: "Feature Notification"
    FeatureNotification,
    /// Usage ID `0x48`: "Resolution Multiplier"
    ResolutionMultiplier,
    /// Usage ID `0x49`: "Qx"
    Qx,
    /// Usage ID `0x4A`: "Qy"
    Qy,
    /// Usage ID `0x4B`: "Qz"
    Qz,
    /// Usage ID `0x4C`: "Qw"
    Qw,
    /// Usage ID `0x80`: "System Control"
    SystemControl,
    /// Usage ID `0x81`: "System Power Down"
    SystemPowerDown,
    /// Usage ID `0x82`: "System Sleep"
    SystemSleep,
    /// Usage ID `0x83`: "System Wake Up"
    SystemWakeUp,
    /// Usage ID `0x84`: "System Context Menu"
    SystemContextMenu,
    /// Usage ID `0x85`: "System Main Menu"
    SystemMainMenu,
    /// Usage ID `0x86`: "System App Menu"
    SystemAppMenu,
    /// Usage ID `0x87`: "System Menu Help"
    SystemMenuHelp,
    /// Usage ID `0x88`: "System Menu Exit"
    SystemMenuExit,
    /// Usage ID `0x89`: "System Menu Select"
    SystemMenuSelect,
    /// Usage ID `0x8A`: "System Menu Right"
    SystemMenuRight,
    /// Usage ID `0x8B`: "System Menu Left"
    SystemMenuLeft,
    /// Usage ID `0x8C`: "System Menu Up"
    SystemMenuUp,
    /// Usage ID `0x8D`: "System Menu Down"
    SystemMenuDown,
    /// Usage ID `0x8E`: "System Cold Restart"
    SystemColdRestart,
    /// Usage ID `0x8F`: "System Warm Restart"
    SystemWarmRestart,
    /// Usage ID `0x90`: "D-pad Up"
    DpadUp,
    /// Usage ID `0x91`: "D-pad Down"
    DpadDown,
    /// Usage ID `0x92`: "D-pad Right"
    DpadRight,
    /// Usage ID `0x93`: "D-pad Left"
    DpadLeft,
    /// Usage ID `0x94`: "Index Trigger"
    IndexTrigger,
    /// Usage ID `0x95`: "Palm Trigger"
    PalmTrigger,
    /// Usage ID `0x96`: "Thumbstick"
    Thumbstick,
    /// Usage ID `0x97`: "System Function Shift"
    SystemFunctionShift,
    /// Usage ID `0x98`: "System Function Shift Lock"
    SystemFunctionShiftLock,
    /// Usage ID `0x99`: "System Function Shift Lock Indicator"
    SystemFunctionShiftLockIndicator,
    /// Usage ID `0x9A`: "System Dismiss Notification"
    SystemDismissNotification,
    /// Usage ID `0x9B`: "System Do Not Disturb"
    SystemDoNotDisturb,
    /// Usage ID `0xA0`: "System Dock"
    SystemDock,
    /// Usage ID `0xA1`: "System Undock"
    SystemUndock,
    /// Usage ID `0xA2`: "System Setup"
    SystemSetup,
    /// Usage ID `0xA3`: "System Break"
    SystemBreak,
    /// Usage ID `0xA4`: "System Debugger Break"
    SystemDebuggerBreak,
    /// Usage ID `0xA5`: "Application Break"
    ApplicationBreak,
    /// Usage ID `0xA6`: "Application Debugger Break"
    ApplicationDebuggerBreak,
    /// Usage ID `0xA7`: "System Speaker Mute"
    SystemSpeakerMute,
    /// Usage ID `0xA8`: "System Hibernate"
    SystemHibernate,
    /// Usage ID `0xA9`: "System Microphone Mute"
    SystemMicrophoneMute,
    /// Usage ID `0xB0`: "System Display Invert"
    SystemDisplayInvert,
    /// Usage ID `0xB1`: "System Display Internal"
    SystemDisplayInternal,
    /// Usage ID `0xB2`: "System Display External"
    SystemDisplayExternal,
    /// Usage ID `0xB3`: "System Display Both"
    SystemDisplayBoth,
    /// Usage ID `0xB4`: "System Display Dual"
    SystemDisplayDual,
    /// Usage ID `0xB5`: "System Display Toggle Int/Ext Mode"
    SystemDisplayToggleIntExtMode,
    /// Usage ID `0xB6`: "System Display Swap Primary/Secondary"
    SystemDisplaySwapPrimarySecondary,
    /// Usage ID `0xB7`: "System Display Toggle LCD Autoscale"
    SystemDisplayToggleLCDAutoscale,
    /// Usage ID `0xC0`: "Sensor Zone"
    SensorZone,
    /// Usage ID `0xC1`: "RPM"
    RPM,
    /// Usage ID `0xC2`: "Coolant Level"
    CoolantLevel,
    /// Usage ID `0xC3`: "Coolant Critical Level"
    CoolantCriticalLevel,
    /// Usage ID `0xC4`: "Coolant Pump"
    CoolantPump,
    /// Usage ID `0xC5`: "Chassis Enclosure"
    ChassisEnclosure,
    /// Usage ID `0xC6`: "Wireless Radio Button"
    WirelessRadioButton,
    /// Usage ID `0xC7`: "Wireless Radio LED"
    WirelessRadioLED,
    /// Usage ID `0xC8`: "Wireless Radio Slider Switch"
    WirelessRadioSliderSwitch,
    /// Usage ID `0xC9`: "System Display Rotation Lock Button"
    SystemDisplayRotationLockButton,
    /// Usage ID `0xCA`: "System Display Rotation Lock Slider Switch"
    SystemDisplayRotationLockSliderSwitch,
    /// Usage ID `0xCB`: "Control Enable"
    ControlEnable,
    /// Usage ID `0xD0`: "Dockable Device Unique ID"
    DockableDeviceUniqueID,
    /// Usage ID `0xD1`: "Dockable Device Vendor ID"
    DockableDeviceVendorID,
    /// Usage ID `0xD2`: "Dockable Device Primary Usage Page"
    DockableDevicePrimaryUsagePage,
    /// Usage ID `0xD3`: "Dockable Device Primary Usage ID"
    DockableDevicePrimaryUsageID,
    /// Usage ID `0xD4`: "Dockable Device Docking State"
    DockableDeviceDockingState,
    /// Usage ID `0xD5`: "Dockable Device Display Occlusion"
    DockableDeviceDisplayOcclusion,
    /// Usage ID `0xD6`: "Dockable Device Object Type"
    DockableDeviceObjectType,
    /// Usage ID `0xE0`: "Call Active LED"
    CallActiveLED,
    /// Usage ID `0xE1`: "Call Mute Toggle"
    CallMuteToggle,
    /// Usage ID `0xE2`: "Call Mute LED"
    CallMuteLED,
}

impl fmt::Display for GenericDesktop {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            GenericDesktop::Pointer => "Pointer",
            GenericDesktop::Mouse => "Mouse",
            GenericDesktop::Joystick => "Joystick",
            GenericDesktop::Gamepad => "Gamepad",
            GenericDesktop::Keyboard => "Keyboard",
            GenericDesktop::Keypad => "Keypad",
            GenericDesktop::MultiaxisController => "Multi-axis Controller",
            GenericDesktop::TabletPCSystemControls => "Tablet PC System Controls",
            GenericDesktop::WaterCoolingDevice => "Water Cooling Device",
            GenericDesktop::ComputerChassisDevice => "Computer Chassis Device",
            GenericDesktop::WirelessRadioControls => "Wireless Radio Controls",
            GenericDesktop::PortableDeviceControl => "Portable Device Control",
            GenericDesktop::SystemMultiAxisController => "System Multi-Axis Controller",
            GenericDesktop::SpatialController => "Spatial Controller",
            GenericDesktop::AssistiveControl => "Assistive Control",
            GenericDesktop::DeviceDock => "Device Dock",
            GenericDesktop::DockableDevice => "Dockable Device",
            GenericDesktop::CallStateManagementControl => "Call State Management Control",
            GenericDesktop::X => "X",
            GenericDesktop::Y => "Y",
            GenericDesktop::Z => "Z",
            GenericDesktop::Rx => "Rx",
            GenericDesktop::Ry => "Ry",
            GenericDesktop::Rz => "Rz",
            GenericDesktop::Slider => "Slider",
            GenericDesktop::Dial => "Dial",
            GenericDesktop::Wheel => "Wheel",
            GenericDesktop::HatSwitch => "Hat Switch",
            GenericDesktop::CountedBuffer => "Counted Buffer",
            GenericDesktop::ByteCount => "Byte Count",
            GenericDesktop::MotionWakeup => "Motion Wakeup",
            GenericDesktop::Start => "Start",
            GenericDesktop::Select => "Select",
            GenericDesktop::Vx => "Vx",
            GenericDesktop::Vy => "Vy",
            GenericDesktop::Vz => "Vz",
            GenericDesktop::Vbrx => "Vbrx",
            GenericDesktop::Vbry => "Vbry",
            GenericDesktop::Vbrz => "Vbrz",
            GenericDesktop::Vno => "Vno",
            GenericDesktop::FeatureNotification => "Feature Notification",
            GenericDesktop::ResolutionMultiplier => "Resolution Multiplier",
            GenericDesktop::Qx => "Qx",
            GenericDesktop::Qy => "Qy",
            GenericDesktop::Qz => "Qz",
            GenericDesktop::Qw => "Qw",
            GenericDesktop::SystemControl => "System Control",
            GenericDesktop::SystemPowerDown => "System Power Down",
            GenericDesktop::SystemSleep => "System Sleep",
            GenericDesktop::SystemWakeUp => "System Wake Up",
            GenericDesktop::SystemContextMenu => "System Context Menu",
            GenericDesktop::SystemMainMenu => "System Main Menu",
            GenericDesktop::SystemAppMenu => "System App Menu",
            GenericDesktop::SystemMenuHelp => "System Menu Help",
            GenericDesktop::SystemMenuExit => "System Menu Exit",
            GenericDesktop::SystemMenuSelect => "System Menu Select",
            GenericDesktop::SystemMenuRight => "System Menu Right",
            GenericDesktop::SystemMenuLeft => "System Menu Left",
            GenericDesktop::SystemMenuUp => "System Menu Up",
            GenericDesktop::SystemMenuDown => "System Menu Down",
            GenericDesktop::SystemColdRestart => "System Cold Restart",
            GenericDesktop::SystemWarmRestart => "System Warm Restart",
            GenericDesktop::DpadUp => "D-pad Up",
            GenericDesktop::DpadDown => "D-pad Down",
            GenericDesktop::DpadRight => "D-pad Right",
            GenericDesktop::DpadLeft => "D-pad Left",
            GenericDesktop::IndexTrigger => "Index Trigger",
            GenericDesktop::PalmTrigger => "Palm Trigger",
            GenericDesktop::Thumbstick => "Thumbstick",
            GenericDesktop::SystemFunctionShift => "System Function Shift",
            GenericDesktop::SystemFunctionShiftLock => "System Function Shift Lock",
            GenericDesktop::SystemFunctionShiftLockIndicator => "System Function Shift Lock Indicator",
            GenericDesktop::SystemDismissNotification => "System Dismiss Notification",
            GenericDesktop::SystemDoNotDisturb => "System Do Not Disturb",
            GenericDesktop::SystemDock => "System Dock",
            GenericDesktop::SystemUndock => "System Undock",
            GenericDesktop::SystemSetup => "System Setup",
            GenericDesktop::SystemBreak => "System Break",
            GenericDesktop::SystemDebuggerBreak => "System Debugger Break",
            GenericDesktop::ApplicationBreak => "Application Break",
            GenericDesktop::ApplicationDebuggerBreak => "Application Debugger Break",
            GenericDesktop::SystemSpeakerMute => "System Speaker Mute",
            GenericDesktop::SystemHibernate => "System Hibernate",
            GenericDesktop::SystemMicrophoneMute => "System Microphone Mute",
            GenericDesktop::SystemDisplayInvert => "System Display Invert",
            GenericDesktop::SystemDisplayInternal => "System Display Internal",
            GenericDesktop::SystemDisplayExternal => "System Display External",
            GenericDesktop::SystemDisplayBoth => "System Display Both",
            GenericDesktop::SystemDisplayDual => "System Display Dual",
            GenericDesktop::SystemDisplayToggleIntExtMode => "System Display Toggle Int/Ext Mode",
            GenericDesktop::SystemDisplaySwapPrimarySecondary => "System Display Swap Primary/Secondary",
            GenericDesktop::SystemDisplayToggleLCDAutoscale => "System Display Toggle LCD Autoscale",
            GenericDesktop::SensorZone => "Sensor Zone",
            GenericDesktop::RPM => "RPM",
            GenericDesktop::CoolantLevel => "Coolant Level",
            GenericDesktop::CoolantCriticalLevel => "Coolant Critical Level",
            GenericDesktop::CoolantPump => "Coolant Pump",
            GenericDesktop::ChassisEnclosure => "Chassis Enclosure",
            GenericDesktop::WirelessRadioButton => "Wireless Radio Button",
            GenericDesktop::WirelessRadioLED => "Wireless Radio LED",
            GenericDesktop::WirelessRadioSliderSwitch => "Wireless Radio Slider Switch",
            GenericDesktop::SystemDisplayRotationLockButton => "System Display Rotation Lock Button",
            GenericDesktop::SystemDisplayRotationLockSliderSwitch => "System Display Rotation Lock Slider Switch",
            GenericDesktop::ControlEnable => "Control Enable",
            GenericDesktop::DockableDeviceUniqueID => "Dockable Device Unique ID",
            GenericDesktop::DockableDeviceVendorID => "Dockable Device Vendor ID",
            GenericDesktop::DockableDevicePrimaryUsagePage => "Dockable Device Primary Usage Page",
            GenericDesktop::DockableDevicePrimaryUsageID => "Dockable Device Primary Usage ID",
            GenericDesktop::DockableDeviceDockingState => "Dockable Device Docking State",
            GenericDesktop::DockableDeviceDisplayOcclusion => "Dockable Device Display Occlusion",
            GenericDesktop::DockableDeviceObjectType => "Dockable Device Object Type",
            GenericDesktop::CallActiveLED => "Call Active LED",
            GenericDesktop::CallMuteToggle => "Call Mute Toggle",
            GenericDesktop::CallMuteLED => "Call Mute LED",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x2`: "Simulation Controls"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::SimulationControls { usage: SimulationControls::AutomobileSimulationDevice };
/// let u2 = Usage::new_from_page_and_id(0x2, 0x2).unwrap();
/// let u3 = Usage::from(SimulationControls::AutomobileSimulationDevice);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x2, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x2 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum SimulationControls {
    /// Usage ID `0x1`: "Flight Simulation Device"
    FlightSimulationDevice,
    /// Usage ID `0x2`: "Automobile Simulation Device"
    AutomobileSimulationDevice,
    /// Usage ID `0x3`: "Tank Simulation Device"
    TankSimulationDevice,
    /// Usage ID `0x4`: "Spaceship Simulation Device"
    SpaceshipSimulationDevice,
    /// Usage ID `0x5`: "Submarine Simulation Device"
    SubmarineSimulationDevice,
    /// Usage ID `0x6`: "Sailing Simulation Device"
    SailingSimulationDevice,
    /// Usage ID `0x7`: "Motorcycle Simulation Device"
    MotorcycleSimulationDevice,
    /// Usage ID `0x8`: "Sports Simulation Device"
    SportsSimulationDevice,
    /// Usage ID `0x9`: "Airplane Simulation Device"
    AirplaneSimulationDevice,
    /// Usage ID `0xA`: "Helicopter Simulation Device"
    HelicopterSimulationDevice,
    /// Usage ID `0xB`: "Magic Carpet Simulation Device"
    MagicCarpetSimulationDevice,
    /// Usage ID `0xC`: "Bicycle Simulation Device"
    BicycleSimulationDevice,
    /// Usage ID `0x20`: "Flight Control Stick"
    FlightControlStick,
    /// Usage ID `0x21`: "Flight Stick"
    FlightStick,
    /// Usage ID `0x22`: "Cyclic Control"
    CyclicControl,
    /// Usage ID `0x23`: "Cyclic Trim"
    CyclicTrim,
    /// Usage ID `0x24`: "Flight Yoke"
    FlightYoke,
    /// Usage ID `0x25`: "Track Control"
    TrackControl,
    /// Usage ID `0xB0`: "Aileron"
    Aileron,
    /// Usage ID `0xB1`: "Aileron Trim"
    AileronTrim,
    /// Usage ID `0xB2`: "Anti-Torque Control"
    AntiTorqueControl,
    /// Usage ID `0xB3`: "Autopilot Enable"
    AutopilotEnable,
    /// Usage ID `0xB4`: "Chaff Release"
    ChaffRelease,
    /// Usage ID `0xB5`: "Collective Control"
    CollectiveControl,
    /// Usage ID `0xB6`: "Dive Brake"
    DiveBrake,
    /// Usage ID `0xB7`: "Electronic Countermeasures"
    ElectronicCountermeasures,
    /// Usage ID `0xB8`: "Elevator"
    Elevator,
    /// Usage ID `0xB9`: "Elevator Trim"
    ElevatorTrim,
    /// Usage ID `0xBA`: "Rudder"
    Rudder,
    /// Usage ID `0xBB`: "Throttle"
    Throttle,
    /// Usage ID `0xBC`: "Flight Communications"
    FlightCommunications,
    /// Usage ID `0xBD`: "Flare Release"
    FlareRelease,
    /// Usage ID `0xBE`: "Landing Gear"
    LandingGear,
    /// Usage ID `0xBF`: "Toe Brake"
    ToeBrake,
    /// Usage ID `0xC0`: "Trigger"
    Trigger,
    /// Usage ID `0xC1`: "Weapons Arm"
    WeaponsArm,
    /// Usage ID `0xC2`: "Weapons Select"
    WeaponsSelect,
    /// Usage ID `0xC3`: "Wing Flaps"
    WingFlaps,
    /// Usage ID `0xC4`: "Accelerator"
    Accelerator,
    /// Usage ID `0xC5`: "Brake"
    Brake,
    /// Usage ID `0xC6`: "Clutch"
    Clutch,
    /// Usage ID `0xC7`: "Shifter"
    Shifter,
    /// Usage ID `0xC8`: "Steering"
    Steering,
    /// Usage ID `0xC9`: "Turret Direction"
    TurretDirection,
    /// Usage ID `0xCA`: "Barrel Elevation"
    BarrelElevation,
    /// Usage ID `0xCB`: "Dive Plane"
    DivePlane,
    /// Usage ID `0xCC`: "Ballast"
    Ballast,
    /// Usage ID `0xCD`: "Bicycle Crank"
    BicycleCrank,
    /// Usage ID `0xCE`: "Handle Bars"
    HandleBars,
    /// Usage ID `0xCF`: "Front Brake"
    FrontBrake,
    /// Usage ID `0xD0`: "Rear Brake"
    RearBrake,
}

impl fmt::Display for SimulationControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            SimulationControls::FlightSimulationDevice => "Flight Simulation Device",
            SimulationControls::AutomobileSimulationDevice => "Automobile Simulation Device",
            SimulationControls::TankSimulationDevice => "Tank Simulation Device",
            SimulationControls::SpaceshipSimulationDevice => "Spaceship Simulation Device",
            SimulationControls::SubmarineSimulationDevice => "Submarine Simulation Device",
            SimulationControls::SailingSimulationDevice => "Sailing Simulation Device",
            SimulationControls::MotorcycleSimulationDevice => "Motorcycle Simulation Device",
            SimulationControls::SportsSimulationDevice => "Sports Simulation Device",
            SimulationControls::AirplaneSimulationDevice => "Airplane Simulation Device",
            SimulationControls::HelicopterSimulationDevice => "Helicopter Simulation Device",
            SimulationControls::MagicCarpetSimulationDevice => "Magic Carpet Simulation Device",
            SimulationControls::BicycleSimulationDevice => "Bicycle Simulation Device",
            SimulationControls::FlightControlStick => "Flight Control Stick",
            SimulationControls::FlightStick => "Flight Stick",
            SimulationControls::CyclicControl => "Cyclic Control",
            SimulationControls::CyclicTrim => "Cyclic Trim",
            SimulationControls::FlightYoke => "Flight Yoke",
            SimulationControls::TrackControl => "Track Control",
            SimulationControls::Aileron => "Aileron",
            SimulationControls::AileronTrim => "Aileron Trim",
            SimulationControls::AntiTorqueControl => "Anti-Torque Control",
            SimulationControls::AutopilotEnable => "Autopilot Enable",
            SimulationControls::ChaffRelease => "Chaff Release",
            SimulationControls::CollectiveControl => "Collective Control",
            SimulationControls::DiveBrake => "Dive Brake",
            SimulationControls::ElectronicCountermeasures => "Electronic Countermeasures",
            SimulationControls::Elevator => "Elevator",
            SimulationControls::ElevatorTrim => "Elevator Trim",
            SimulationControls::Rudder => "Rudder",
            SimulationControls::Throttle => "Throttle",
            SimulationControls::FlightCommunications => "Flight Communications",
            SimulationControls::FlareRelease => "Flare Release",
            SimulationControls::LandingGear => "Landing Gear",
            SimulationControls::ToeBrake => "Toe Brake",
            SimulationControls::Trigger => "Trigger",
            SimulationControls::WeaponsArm => "Weapons Arm",
            SimulationControls::WeaponsSelect => "Weapons Select",
            SimulationControls::WingFlaps => "Wing Flaps",
            SimulationControls::Accelerator => "Accelerator",
            SimulationControls::Brake => "Brake",
            SimulationControls::Clutch => "Clutch",
            SimulationControls::Shifter => "Shifter",
            SimulationControls::Steering => "Steering",
            SimulationControls::TurretDirection => "Turret Direction",
            SimulationControls::BarrelElevation => "Barrel Elevation",
            SimulationControls::DivePlane => "Dive Plane",
            SimulationControls::Ballast => "Ballast",
            SimulationControls::BicycleCrank => "Bicycle Crank",
            SimulationControls::HandleBars => "Handle Bars",
            SimulationControls::FrontBrake => "Front Brake",
            SimulationControls::RearBrake => "Rear Brake",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x3`: "VR Controls"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::VRControls { usage: VRControls::BodySuit };
/// let u2 = Usage::new_from_page_and_id(0x3, 0x2).unwrap();
/// let u3 = Usage::from(VRControls::BodySuit);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x3, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x3 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum VRControls {
    /// Usage ID `0x1`: "Belt"
    Belt,
    /// Usage ID `0x2`: "Body Suit"
    BodySuit,
    /// Usage ID `0x3`: "Flexor"
    Flexor,
    /// Usage ID `0x4`: "Glove"
    Glove,
    /// Usage ID `0x5`: "Head Tracker"
    HeadTracker,
    /// Usage ID `0x6`: "Head Mounted Display"
    HeadMountedDisplay,
    /// Usage ID `0x7`: "Hand Tracker"
    HandTracker,
    /// Usage ID `0x8`: "Oculometer"
    Oculometer,
    /// Usage ID `0x9`: "Vest"
    Vest,
    /// Usage ID `0xA`: "Animatronic Device"
    AnimatronicDevice,
    /// Usage ID `0x20`: "Stereo Enable"
    StereoEnable,
    /// Usage ID `0x21`: "Display Enable"
    DisplayEnable,
}

impl fmt::Display for VRControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            VRControls::Belt => "Belt",
            VRControls::BodySuit => "Body Suit",
            VRControls::Flexor => "Flexor",
            VRControls::Glove => "Glove",
            VRControls::HeadTracker => "Head Tracker",
            VRControls::HeadMountedDisplay => "Head Mounted Display",
            VRControls::HandTracker => "Hand Tracker",
            VRControls::Oculometer => "Oculometer",
            VRControls::Vest => "Vest",
            VRControls::AnimatronicDevice => "Animatronic Device",
            VRControls::StereoEnable => "Stereo Enable",
            VRControls::DisplayEnable => "Display Enable",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x4`: "Sport Controls"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::SportControls { usage: SportControls::GolfClub };
/// let u2 = Usage::new_from_page_and_id(0x4, 0x2).unwrap();
/// let u3 = Usage::from(SportControls::GolfClub);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x4, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x4 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum SportControls {
    /// Usage ID `0x1`: "Baseball Bat"
    BaseballBat,
    /// Usage ID `0x2`: "Golf Club"
    GolfClub,
    /// Usage ID `0x3`: "Rowing Machine"
    RowingMachine,
    /// Usage ID `0x4`: "Treadmill"
    Treadmill,
    /// Usage ID `0x30`: "Oar"
    Oar,
    /// Usage ID `0x31`: "Slope"
    Slope,
    /// Usage ID `0x32`: "Rate"
    Rate,
    /// Usage ID `0x33`: "Stick Speed"
    StickSpeed,
    /// Usage ID `0x34`: "Stick Face Angle"
    StickFaceAngle,
    /// Usage ID `0x35`: "Stick Heel/Toe"
    StickHeelToe,
    /// Usage ID `0x36`: "Stick Follow Through"
    StickFollowThrough,
    /// Usage ID `0x37`: "Stick Tempo"
    StickTempo,
    /// Usage ID `0x38`: "Stick Type"
    StickType,
    /// Usage ID `0x39`: "Stick Height"
    StickHeight,
    /// Usage ID `0x50`: "Putter"
    Putter,
    /// Usage ID `0x51`: "1 Iron"
    OneIron,
    /// Usage ID `0x52`: "2 Iron"
    TwoIron,
    /// Usage ID `0x53`: "3 Iron"
    ThreeIron,
    /// Usage ID `0x54`: "4 Iron"
    FourIron,
    /// Usage ID `0x55`: "5 Iron"
    FiveIron,
    /// Usage ID `0x56`: "6 Iron"
    SixIron,
    /// Usage ID `0x57`: "7 Iron"
    SevenIron,
    /// Usage ID `0x58`: "8 Iron"
    EightIron,
    /// Usage ID `0x59`: "9 Iron"
    NineIron,
    /// Usage ID `0x5A`: "10 Iron"
    One0Iron,
    /// Usage ID `0x5B`: "11 Iron"
    One1Iron,
    /// Usage ID `0x5C`: "Sand Wedge"
    SandWedge,
    /// Usage ID `0x5D`: "Loft Wedge"
    LoftWedge,
    /// Usage ID `0x5E`: "Power Wedge"
    PowerWedge,
    /// Usage ID `0x5F`: "1 Wood"
    OneWood,
    /// Usage ID `0x60`: "3 Wood"
    ThreeWood,
    /// Usage ID `0x61`: "5 Wood"
    FiveWood,
    /// Usage ID `0x62`: "7 Wood"
    SevenWood,
    /// Usage ID `0x63`: "9 Wood"
    NineWood,
}

impl fmt::Display for SportControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            SportControls::BaseballBat => "Baseball Bat",
            SportControls::GolfClub => "Golf Club",
            SportControls::RowingMachine => "Rowing Machine",
            SportControls::Treadmill => "Treadmill",
            SportControls::Oar => "Oar",
            SportControls::Slope => "Slope",
            SportControls::Rate => "Rate",
            SportControls::StickSpeed => "Stick Speed",
            SportControls::StickFaceAngle => "Stick Face Angle",
            SportControls::StickHeelToe => "Stick Heel/Toe",
            SportControls::StickFollowThrough => "Stick Follow Through",
            SportControls::StickTempo => "Stick Tempo",
            SportControls::StickType => "Stick Type",
            SportControls::StickHeight => "Stick Height",
            SportControls::Putter => "Putter",
            SportControls::OneIron => "1 Iron",
            SportControls::TwoIron => "2 Iron",
            SportControls::ThreeIron => "3 Iron",
            SportControls::FourIron => "4 Iron",
            SportControls::FiveIron => "5 Iron",
            SportControls::SixIron => "6 Iron",
            SportControls::SevenIron => "7 Iron",
            SportControls::EightIron => "8 Iron",
            SportControls::NineIron => "9 Iron",
            SportControls::One0Iron => "10 Iron",
            SportControls::One1Iron => "11 Iron",
            SportControls::SandWedge => "Sand Wedge",
            SportControls::LoftWedge => "Loft Wedge",
            SportControls::PowerWedge => "Power Wedge",
            SportControls::OneWood => "1 Wood",
            SportControls::ThreeWood => "3 Wood",
            SportControls::FiveWood => "5 Wood",
            SportControls::SevenWood => "7 Wood",
            SportControls::NineWood => "9 Wood",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x5`: "Game Controls"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::GameControls { usage: GameControls::PinballDevice };
/// let u2 = Usage::new_from_page_and_id(0x5, 0x2).unwrap();
/// let u3 = Usage::from(GameControls::PinballDevice);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x5, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x5 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum GameControls {
    /// Usage ID `0x1`: "3D Game Controller"
    ThreeDGameController,
    /// Usage ID `0x2`: "Pinball Device"
    PinballDevice,
    /// Usage ID `0x3`: "Gun Device"
    GunDevice,
    /// Usage ID `0x20`: "Point of View"
    PointofView,
    /// Usage ID `0x21`: "Turn Right/Left"
    TurnRightLeft,
    /// Usage ID `0x22`: "Pitch Forward/Backward"
    PitchForwardBackward,
    /// Usage ID `0x23`: "Roll Right/Left"
    RollRightLeft,
    /// Usage ID `0x24`: "Move Right/Left"
    MoveRightLeft,
    /// Usage ID `0x25`: "Move Forward/Backward"
    MoveForwardBackward,
    /// Usage ID `0x26`: "Move Up/Down"
    MoveUpDown,
    /// Usage ID `0x27`: "Lean Right/Left"
    LeanRightLeft,
    /// Usage ID `0x28`: "Lean Forward/Backward"
    LeanForwardBackward,
    /// Usage ID `0x29`: "Height of POV"
    HeightofPOV,
    /// Usage ID `0x2A`: "Flipper"
    Flipper,
    /// Usage ID `0x2B`: "Secondary Flipper"
    SecondaryFlipper,
    /// Usage ID `0x2C`: "Bump"
    Bump,
    /// Usage ID `0x2D`: "New Game"
    NewGame,
    /// Usage ID `0x2E`: "Shoot Ball"
    ShootBall,
    /// Usage ID `0x2F`: "Player"
    Player,
    /// Usage ID `0x30`: "Gun Bolt"
    GunBolt,
    /// Usage ID `0x31`: "Gun Clip"
    GunClip,
    /// Usage ID `0x32`: "Gun Selector"
    GunSelector,
    /// Usage ID `0x33`: "Gun Single Shot"
    GunSingleShot,
    /// Usage ID `0x34`: "Gun Burst"
    GunBurst,
    /// Usage ID `0x35`: "Gun Automatic"
    GunAutomatic,
    /// Usage ID `0x36`: "Gun Safety"
    GunSafety,
    /// Usage ID `0x37`: "Gamepad Fire/Jump"
    GamepadFireJump,
    /// Usage ID `0x39`: "Gamepad Trigger"
    GamepadTrigger,
    /// Usage ID `0x3A`: "Form-fitting Gamepad"
    FormfittingGamepad,
}

impl fmt::Display for GameControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            GameControls::ThreeDGameController => "3D Game Controller",
            GameControls::PinballDevice => "Pinball Device",
            GameControls::GunDevice => "Gun Device",
            GameControls::PointofView => "Point of View",
            GameControls::TurnRightLeft => "Turn Right/Left",
            GameControls::PitchForwardBackward => "Pitch Forward/Backward",
            GameControls::RollRightLeft => "Roll Right/Left",
            GameControls::MoveRightLeft => "Move Right/Left",
            GameControls::MoveForwardBackward => "Move Forward/Backward",
            GameControls::MoveUpDown => "Move Up/Down",
            GameControls::LeanRightLeft => "Lean Right/Left",
            GameControls::LeanForwardBackward => "Lean Forward/Backward",
            GameControls::HeightofPOV => "Height of POV",
            GameControls::Flipper => "Flipper",
            GameControls::SecondaryFlipper => "Secondary Flipper",
            GameControls::Bump => "Bump",
            GameControls::NewGame => "New Game",
            GameControls::ShootBall => "Shoot Ball",
            GameControls::Player => "Player",
            GameControls::GunBolt => "Gun Bolt",
            GameControls::GunClip => "Gun Clip",
            GameControls::GunSelector => "Gun Selector",
            GameControls::GunSingleShot => "Gun Single Shot",
            GameControls::GunBurst => "Gun Burst",
            GameControls::GunAutomatic => "Gun Automatic",
            GameControls::GunSafety => "Gun Safety",
            GameControls::GamepadFireJump => "Gamepad Fire/Jump",
            GameControls::GamepadTrigger => "Gamepad Trigger",
            GameControls::FormfittingGamepad => "Form-fitting Gamepad",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x6`: "Generic Device Controls"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::GenericDeviceControls { usage: GenericDeviceControls::BatteryStrength };
/// let u2 = Usage::new_from_page_and_id(0x6, 0x20).unwrap();
/// let u3 = Usage::from(GenericDeviceControls::BatteryStrength);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x6, u1.usage_page_value());
/// assert_eq!(0x20, u1.usage_id_value());
/// assert_eq!((0x6 << 16) | 0x20, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum GenericDeviceControls {
    /// Usage ID `0x1`: "Background/Nonuser Controls"
    BackgroundNonuserControls,
    /// Usage ID `0x20`: "Battery Strength"
    BatteryStrength,
    /// Usage ID `0x21`: "Wireless Channel"
    WirelessChannel,
    /// Usage ID `0x22`: "Wireless ID"
    WirelessID,
    /// Usage ID `0x23`: "Discover Wireless Control"
    DiscoverWirelessControl,
    /// Usage ID `0x24`: "Security Code Character Entered"
    SecurityCodeCharacterEntered,
    /// Usage ID `0x25`: "Security Code Character Erased"
    SecurityCodeCharacterErased,
    /// Usage ID `0x26`: "Security Code Cleared"
    SecurityCodeCleared,
    /// Usage ID `0x27`: "Sequence ID"
    SequenceID,
    /// Usage ID `0x28`: "Sequence ID Reset"
    SequenceIDReset,
    /// Usage ID `0x29`: "RF Signal Strength"
    RFSignalStrength,
    /// Usage ID `0x2A`: "Software Version"
    SoftwareVersion,
    /// Usage ID `0x2B`: "Protocol Version"
    ProtocolVersion,
    /// Usage ID `0x2C`: "Hardware Version"
    HardwareVersion,
    /// Usage ID `0x2D`: "Major"
    Major,
    /// Usage ID `0x2E`: "Minor"
    Minor,
    /// Usage ID `0x2F`: "Revision"
    Revision,
    /// Usage ID `0x30`: "Handedness"
    Handedness,
    /// Usage ID `0x31`: "Either Hand"
    EitherHand,
    /// Usage ID `0x32`: "Left Hand"
    LeftHand,
    /// Usage ID `0x33`: "Right Hand"
    RightHand,
    /// Usage ID `0x34`: "Both Hands"
    BothHands,
    /// Usage ID `0x40`: "Grip Pose Offset"
    GripPoseOffset,
    /// Usage ID `0x41`: "Pointer Pose Offset"
    PointerPoseOffset,
}

impl fmt::Display for GenericDeviceControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            GenericDeviceControls::BackgroundNonuserControls => "Background/Nonuser Controls",
            GenericDeviceControls::BatteryStrength => "Battery Strength",
            GenericDeviceControls::WirelessChannel => "Wireless Channel",
            GenericDeviceControls::WirelessID => "Wireless ID",
            GenericDeviceControls::DiscoverWirelessControl => "Discover Wireless Control",
            GenericDeviceControls::SecurityCodeCharacterEntered => "Security Code Character Entered",
            GenericDeviceControls::SecurityCodeCharacterErased => "Security Code Character Erased",
            GenericDeviceControls::SecurityCodeCleared => "Security Code Cleared",
            GenericDeviceControls::SequenceID => "Sequence ID",
            GenericDeviceControls::SequenceIDReset => "Sequence ID Reset",
            GenericDeviceControls::RFSignalStrength => "RF Signal Strength",
            GenericDeviceControls::SoftwareVersion => "Software Version",
            GenericDeviceControls::ProtocolVersion => "Protocol Version",
            GenericDeviceControls::HardwareVersion => "Hardware Version",
            GenericDeviceControls::Major => "Major",
            GenericDeviceControls::Minor => "Minor",
            GenericDeviceControls::Revision => "Revision",
            GenericDeviceControls::Handedness => "Handedness",
            GenericDeviceControls::EitherHand => "Either Hand",
            GenericDeviceControls::LeftHand => "Left Hand",
            GenericDeviceControls::RightHand => "Right Hand",
            GenericDeviceControls::BothHands => "Both Hands",
            GenericDeviceControls::GripPoseOffset => "Grip Pose Offset",
            GenericDeviceControls::PointerPoseOffset => "Pointer Pose Offset",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x7`: "Keyboard/Keypad"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::KeyboardKeypad { usage: KeyboardKeypad::POSTFail };
/// let u2 = Usage::new_from_page_and_id(0x7, 0x2).unwrap();
/// let u3 = Usage::from(KeyboardKeypad::POSTFail);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x7, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x7 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum KeyboardKeypad {
    /// Usage ID `0x1`: "ErrorRollOver"
    ErrorRollOver,
    /// Usage ID `0x2`: "POSTFail"
    POSTFail,
    /// Usage ID `0x3`: "ErrorUndefined"
    ErrorUndefined,
    /// Usage ID `0x4`: "Keyboard A"
    KeyboardA,
    /// Usage ID `0x5`: "Keyboard B"
    KeyboardB,
    /// Usage ID `0x6`: "Keyboard C"
    KeyboardC,
    /// Usage ID `0x7`: "Keyboard D"
    KeyboardD,
    /// Usage ID `0x8`: "Keyboard E"
    KeyboardE,
    /// Usage ID `0x9`: "Keyboard F"
    KeyboardF,
    /// Usage ID `0xA`: "Keyboard G"
    KeyboardG,
    /// Usage ID `0xB`: "Keyboard H"
    KeyboardH,
    /// Usage ID `0xC`: "Keyboard I"
    KeyboardI,
    /// Usage ID `0xD`: "Keyboard J"
    KeyboardJ,
    /// Usage ID `0xE`: "Keyboard K"
    KeyboardK,
    /// Usage ID `0xF`: "Keyboard L"
    KeyboardL,
    /// Usage ID `0x10`: "Keyboard M"
    KeyboardM,
    /// Usage ID `0x11`: "Keyboard N"
    KeyboardN,
    /// Usage ID `0x12`: "Keyboard O"
    KeyboardO,
    /// Usage ID `0x13`: "Keyboard P"
    KeyboardP,
    /// Usage ID `0x14`: "Keyboard Q"
    KeyboardQ,
    /// Usage ID `0x15`: "Keyboard R"
    KeyboardR,
    /// Usage ID `0x16`: "Keyboard S"
    KeyboardS,
    /// Usage ID `0x17`: "Keyboard T"
    KeyboardT,
    /// Usage ID `0x18`: "Keyboard U"
    KeyboardU,
    /// Usage ID `0x19`: "Keyboard V"
    KeyboardV,
    /// Usage ID `0x1A`: "Keyboard W"
    KeyboardW,
    /// Usage ID `0x1B`: "Keyboard X"
    KeyboardX,
    /// Usage ID `0x1C`: "Keyboard Y"
    KeyboardY,
    /// Usage ID `0x1D`: "Keyboard Z"
    KeyboardZ,
    /// Usage ID `0x1E`: "Keyboard 1 and Bang"
    Keyboard1andBang,
    /// Usage ID `0x1F`: "Keyboard 2 and At"
    Keyboard2andAt,
    /// Usage ID `0x20`: "Keyboard 3 and Hash"
    Keyboard3andHash,
    /// Usage ID `0x21`: "Keyboard 4 and Dollar"
    Keyboard4andDollar,
    /// Usage ID `0x22`: "Keyboard 5 and Percent"
    Keyboard5andPercent,
    /// Usage ID `0x23`: "Keyboard 6 and Caret"
    Keyboard6andCaret,
    /// Usage ID `0x24`: "Keyboard 7 and Ampersand"
    Keyboard7andAmpersand,
    /// Usage ID `0x25`: "Keyboard 8 and Star"
    Keyboard8andStar,
    /// Usage ID `0x26`: "Keyboard 9 and Left Bracket"
    Keyboard9andLeftBracket,
    /// Usage ID `0x27`: "Keyboard 0 and Right Bracket"
    Keyboard0andRightBracket,
    /// Usage ID `0x28`: "Keyboard Return Enter"
    KeyboardReturnEnter,
    /// Usage ID `0x29`: "Keyboard Escape"
    KeyboardEscape,
    /// Usage ID `0x2A`: "Keyboard Delete"
    KeyboardDelete,
    /// Usage ID `0x2B`: "Keyboard Tab"
    KeyboardTab,
    /// Usage ID `0x2C`: "Keyboard Spacebar"
    KeyboardSpacebar,
    /// Usage ID `0x2D`: "Keyboard Dash and Underscore"
    KeyboardDashandUnderscore,
    /// Usage ID `0x2E`: "Keyboard Equals and Plus"
    KeyboardEqualsandPlus,
    /// Usage ID `0x2F`: "Keyboard Left Brace"
    KeyboardLeftBrace,
    /// Usage ID `0x30`: "Keyboard Right Brace"
    KeyboardRightBrace,
    /// Usage ID `0x31`: "Keyboard Backslash and Pipe"
    KeyboardBackslashandPipe,
    /// Usage ID `0x32`: "Keyboard Non-US Hash and Tilde"
    KeyboardNonUSHashandTilde,
    /// Usage ID `0x33`: "Keyboard SemiColon and Colon"
    KeyboardSemiColonandColon,
    /// Usage ID `0x34`: "Keyboard Left Apos and Double"
    KeyboardLeftAposandDouble,
    /// Usage ID `0x35`: "Keyboard Grave Accent and Tilde"
    KeyboardGraveAccentandTilde,
    /// Usage ID `0x36`: "Keyboard Comma and LessThan"
    KeyboardCommaandLessThan,
    /// Usage ID `0x37`: "Keyboard Period and GreaterThan"
    KeyboardPeriodandGreaterThan,
    /// Usage ID `0x38`: "Keyboard ForwardSlash and QuestionMark"
    KeyboardForwardSlashandQuestionMark,
    /// Usage ID `0x39`: "Keyboard Caps Lock"
    KeyboardCapsLock,
    /// Usage ID `0x3A`: "Keyboard F1"
    KeyboardF1,
    /// Usage ID `0x3B`: "Keyboard F2"
    KeyboardF2,
    /// Usage ID `0x3C`: "Keyboard F3"
    KeyboardF3,
    /// Usage ID `0x3D`: "Keyboard F4"
    KeyboardF4,
    /// Usage ID `0x3E`: "Keyboard F5"
    KeyboardF5,
    /// Usage ID `0x3F`: "Keyboard F6"
    KeyboardF6,
    /// Usage ID `0x40`: "Keyboard F7"
    KeyboardF7,
    /// Usage ID `0x41`: "Keyboard F8"
    KeyboardF8,
    /// Usage ID `0x42`: "Keyboard F9"
    KeyboardF9,
    /// Usage ID `0x43`: "Keyboard F10"
    KeyboardF10,
    /// Usage ID `0x44`: "Keyboard F11"
    KeyboardF11,
    /// Usage ID `0x45`: "Keyboard F12"
    KeyboardF12,
    /// Usage ID `0x46`: "Keyboard PrintScreen"
    KeyboardPrintScreen,
    /// Usage ID `0x47`: "Keyboard Scroll Lock"
    KeyboardScrollLock,
    /// Usage ID `0x48`: "Keyboard Pause"
    KeyboardPause,
    /// Usage ID `0x49`: "Keyboard Insert"
    KeyboardInsert,
    /// Usage ID `0x4A`: "Keyboard Home"
    KeyboardHome,
    /// Usage ID `0x4B`: "Keyboard PageUp"
    KeyboardPageUp,
    /// Usage ID `0x4C`: "Keyboard Delete Forward"
    KeyboardDeleteForward,
    /// Usage ID `0x4D`: "Keyboard End"
    KeyboardEnd,
    /// Usage ID `0x4E`: "Keyboard PageDown"
    KeyboardPageDown,
    /// Usage ID `0x4F`: "Keyboard RightArrow"
    KeyboardRightArrow,
    /// Usage ID `0x50`: "Keyboard LeftArrow"
    KeyboardLeftArrow,
    /// Usage ID `0x51`: "Keyboard DownArrow"
    KeyboardDownArrow,
    /// Usage ID `0x52`: "Keyboard UpArrow"
    KeyboardUpArrow,
    /// Usage ID `0x53`: "Keypad Num Lock and Clear"
    KeypadNumLockandClear,
    /// Usage ID `0x54`: "Keypad ForwardSlash"
    KeypadForwardSlash,
    /// Usage ID `0x55`: "Keypad Star"
    KeypadStar,
    /// Usage ID `0x56`: "Keypad Dash"
    KeypadDash,
    /// Usage ID `0x57`: "Keypad Plus"
    KeypadPlus,
    /// Usage ID `0x58`: "Keypad ENTER"
    KeypadENTER,
    /// Usage ID `0x59`: "Keypad 1 and End"
    Keypad1andEnd,
    /// Usage ID `0x5A`: "Keypad 2 and Down Arrow"
    Keypad2andDownArrow,
    /// Usage ID `0x5B`: "Keypad 3 and PageDn"
    Keypad3andPageDn,
    /// Usage ID `0x5C`: "Keypad 4 and Left Arrow"
    Keypad4andLeftArrow,
    /// Usage ID `0x5D`: "Keypad 5"
    Keypad5,
    /// Usage ID `0x5E`: "Keypad 6 and Right Arrow"
    Keypad6andRightArrow,
    /// Usage ID `0x5F`: "Keypad 7 and Home"
    Keypad7andHome,
    /// Usage ID `0x60`: "Keypad 8 and Up Arrow"
    Keypad8andUpArrow,
    /// Usage ID `0x61`: "Keypad 9 and PageUp"
    Keypad9andPageUp,
    /// Usage ID `0x62`: "Keypad 0 and Insert"
    Keypad0andInsert,
    /// Usage ID `0x63`: "Keypad Period and Delete"
    KeypadPeriodandDelete,
    /// Usage ID `0x64`: "Keyboard Non-US Backslash and Pipe"
    KeyboardNonUSBackslashandPipe,
    /// Usage ID `0x65`: "Keyboard Application"
    KeyboardApplication,
    /// Usage ID `0x66`: "Keyboard Power"
    KeyboardPower,
    /// Usage ID `0x67`: "Keypad Equals"
    KeypadEquals,
    /// Usage ID `0x68`: "Keyboard F13"
    KeyboardF13,
    /// Usage ID `0x69`: "Keyboard F14"
    KeyboardF14,
    /// Usage ID `0x6A`: "Keyboard F15"
    KeyboardF15,
    /// Usage ID `0x6B`: "Keyboard F16"
    KeyboardF16,
    /// Usage ID `0x6C`: "Keyboard F17"
    KeyboardF17,
    /// Usage ID `0x6D`: "Keyboard F18"
    KeyboardF18,
    /// Usage ID `0x6E`: "Keyboard F19"
    KeyboardF19,
    /// Usage ID `0x6F`: "Keyboard F20"
    KeyboardF20,
    /// Usage ID `0x70`: "Keyboard F21"
    KeyboardF21,
    /// Usage ID `0x71`: "Keyboard F22"
    KeyboardF22,
    /// Usage ID `0x72`: "Keyboard F23"
    KeyboardF23,
    /// Usage ID `0x73`: "Keyboard F24"
    KeyboardF24,
    /// Usage ID `0x74`: "Keyboard Execute"
    KeyboardExecute,
    /// Usage ID `0x75`: "Keyboard Help"
    KeyboardHelp,
    /// Usage ID `0x76`: "Keyboard Menu"
    KeyboardMenu,
    /// Usage ID `0x77`: "Keyboard Select"
    KeyboardSelect,
    /// Usage ID `0x78`: "Keyboard Stop"
    KeyboardStop,
    /// Usage ID `0x79`: "Keyboard Again"
    KeyboardAgain,
    /// Usage ID `0x7A`: "Keyboard Undo"
    KeyboardUndo,
    /// Usage ID `0x7B`: "Keyboard Cut"
    KeyboardCut,
    /// Usage ID `0x7C`: "Keyboard Copy"
    KeyboardCopy,
    /// Usage ID `0x7D`: "Keyboard Paste"
    KeyboardPaste,
    /// Usage ID `0x7E`: "Keyboard Find"
    KeyboardFind,
    /// Usage ID `0x7F`: "Keyboard Mute"
    KeyboardMute,
    /// Usage ID `0x80`: "Keyboard Volume Up"
    KeyboardVolumeUp,
    /// Usage ID `0x81`: "Keyboard Volume Down"
    KeyboardVolumeDown,
    /// Usage ID `0x82`: "Keyboard Locking Caps Lock"
    KeyboardLockingCapsLock,
    /// Usage ID `0x83`: "Keyboard Locking Num Lock"
    KeyboardLockingNumLock,
    /// Usage ID `0x84`: "Keyboard Locking Scroll Lock"
    KeyboardLockingScrollLock,
    /// Usage ID `0x85`: "Keypad Comma"
    KeypadComma,
    /// Usage ID `0x86`: "Keypad Equal Sign"
    KeypadEqualSign,
    /// Usage ID `0x87`: "Keyboard International1"
    KeyboardInternational1,
    /// Usage ID `0x88`: "Keyboard International2"
    KeyboardInternational2,
    /// Usage ID `0x89`: "Keyboard International3"
    KeyboardInternational3,
    /// Usage ID `0x8A`: "Keyboard International4"
    KeyboardInternational4,
    /// Usage ID `0x8B`: "Keyboard International5"
    KeyboardInternational5,
    /// Usage ID `0x8C`: "Keyboard International6"
    KeyboardInternational6,
    /// Usage ID `0x8D`: "Keyboard International7"
    KeyboardInternational7,
    /// Usage ID `0x8E`: "Keyboard International8"
    KeyboardInternational8,
    /// Usage ID `0x8F`: "Keyboard International9"
    KeyboardInternational9,
    /// Usage ID `0x90`: "Keyboard LANG1"
    KeyboardLANG1,
    /// Usage ID `0x91`: "Keyboard LANG2"
    KeyboardLANG2,
    /// Usage ID `0x92`: "Keyboard LANG3"
    KeyboardLANG3,
    /// Usage ID `0x93`: "Keyboard LANG4"
    KeyboardLANG4,
    /// Usage ID `0x94`: "Keyboard LANG5"
    KeyboardLANG5,
    /// Usage ID `0x95`: "Keyboard LANG6"
    KeyboardLANG6,
    /// Usage ID `0x96`: "Keyboard LANG7"
    KeyboardLANG7,
    /// Usage ID `0x97`: "Keyboard LANG8"
    KeyboardLANG8,
    /// Usage ID `0x98`: "Keyboard LANG9"
    KeyboardLANG9,
    /// Usage ID `0x99`: "Keyboard Alternate Erase"
    KeyboardAlternateErase,
    /// Usage ID `0x9A`: "Keyboard SysReq Attention"
    KeyboardSysReqAttention,
    /// Usage ID `0x9B`: "Keyboard Cancel"
    KeyboardCancel,
    /// Usage ID `0x9C`: "Keyboard Clear"
    KeyboardClear,
    /// Usage ID `0x9D`: "Keyboard Prior"
    KeyboardPrior,
    /// Usage ID `0x9E`: "Keyboard Return"
    KeyboardReturn,
    /// Usage ID `0x9F`: "Keyboard Separator"
    KeyboardSeparator,
    /// Usage ID `0xA0`: "Keyboard Out"
    KeyboardOut,
    /// Usage ID `0xA1`: "Keyboard Oper"
    KeyboardOper,
    /// Usage ID `0xA2`: "Keyboard Clear Again"
    KeyboardClearAgain,
    /// Usage ID `0xA3`: "Keyboard CrSel Props"
    KeyboardCrSelProps,
    /// Usage ID `0xA4`: "Keyboard ExSel"
    KeyboardExSel,
    /// Usage ID `0xB0`: "Keypad Double 0"
    KeypadDouble0,
    /// Usage ID `0xB1`: "Keypad Triple 0"
    KeypadTriple0,
    /// Usage ID `0xB2`: "Thousands Separator"
    ThousandsSeparator,
    /// Usage ID `0xB3`: "Decimal Separator"
    DecimalSeparator,
    /// Usage ID `0xB4`: "Currency Unit"
    CurrencyUnit,
    /// Usage ID `0xB5`: "Currency Sub-unit"
    CurrencySubunit,
    /// Usage ID `0xB6`: "Keypad Left Bracket"
    KeypadLeftBracket,
    /// Usage ID `0xB7`: "Keypad Right Bracket"
    KeypadRightBracket,
    /// Usage ID `0xB8`: "Keypad Left Brace"
    KeypadLeftBrace,
    /// Usage ID `0xB9`: "Keypad Right Brace"
    KeypadRightBrace,
    /// Usage ID `0xBA`: "Keypad Tab"
    KeypadTab,
    /// Usage ID `0xBB`: "Keypad Backspace"
    KeypadBackspace,
    /// Usage ID `0xBC`: "Keypad A"
    KeypadA,
    /// Usage ID `0xBD`: "Keypad B"
    KeypadB,
    /// Usage ID `0xBE`: "Keypad C"
    KeypadC,
    /// Usage ID `0xBF`: "Keypad D"
    KeypadD,
    /// Usage ID `0xC0`: "Keypad E"
    KeypadE,
    /// Usage ID `0xC1`: "Keypad F"
    KeypadF,
    /// Usage ID `0xC2`: "Keypad XOR"
    KeypadXOR,
    /// Usage ID `0xC3`: "Keypad Caret"
    KeypadCaret,
    /// Usage ID `0xC4`: "Keypad Percentage"
    KeypadPercentage,
    /// Usage ID `0xC5`: "Keypad Less"
    KeypadLess,
    /// Usage ID `0xC6`: "Keypad Greater"
    KeypadGreater,
    /// Usage ID `0xC7`: "Keypad Ampersand"
    KeypadAmpersand,
    /// Usage ID `0xC8`: "Keypad Double Ampersand"
    KeypadDoubleAmpersand,
    /// Usage ID `0xC9`: "Keypad Bar"
    KeypadBar,
    /// Usage ID `0xCA`: "Keypad Double Bar"
    KeypadDoubleBar,
    /// Usage ID `0xCB`: "Keypad Colon"
    KeypadColon,
    /// Usage ID `0xCC`: "Keypad Hash"
    KeypadHash,
    /// Usage ID `0xCD`: "Keypad Space"
    KeypadSpace,
    /// Usage ID `0xCE`: "Keypad At"
    KeypadAt,
    /// Usage ID `0xCF`: "Keypad Bang"
    KeypadBang,
    /// Usage ID `0xD0`: "Keypad Memory Store"
    KeypadMemoryStore,
    /// Usage ID `0xD1`: "Keypad Memory Recall"
    KeypadMemoryRecall,
    /// Usage ID `0xD2`: "Keypad Memory Clear"
    KeypadMemoryClear,
    /// Usage ID `0xD3`: "Keypad Memory Add"
    KeypadMemoryAdd,
    /// Usage ID `0xD4`: "Keypad Memory Subtract"
    KeypadMemorySubtract,
    /// Usage ID `0xD5`: "Keypad Memory Multiply"
    KeypadMemoryMultiply,
    /// Usage ID `0xD6`: "Keypad Memory Divide"
    KeypadMemoryDivide,
    /// Usage ID `0xD7`: "Keypad Plus Minus"
    KeypadPlusMinus,
    /// Usage ID `0xD8`: "Keypad Clear"
    KeypadClear,
    /// Usage ID `0xD9`: "Keypad Clear Entry"
    KeypadClearEntry,
    /// Usage ID `0xDA`: "Keypad Binary"
    KeypadBinary,
    /// Usage ID `0xDB`: "Keypad Octal"
    KeypadOctal,
    /// Usage ID `0xDC`: "Keypad Decimal"
    KeypadDecimal,
    /// Usage ID `0xDD`: "Keypad Hexadecimal"
    KeypadHexadecimal,
    /// Usage ID `0xE0`: "Keyboard LeftControl"
    KeyboardLeftControl,
    /// Usage ID `0xE1`: "Keyboard LeftShift"
    KeyboardLeftShift,
    /// Usage ID `0xE2`: "Keyboard LeftAlt"
    KeyboardLeftAlt,
    /// Usage ID `0xE3`: "Keyboard Left GUI"
    KeyboardLeftGUI,
    /// Usage ID `0xE4`: "Keyboard RightControl"
    KeyboardRightControl,
    /// Usage ID `0xE5`: "Keyboard RightShift"
    KeyboardRightShift,
    /// Usage ID `0xE6`: "Keyboard RightAlt"
    KeyboardRightAlt,
    /// Usage ID `0xE7`: "Keyboard Right GUI"
    KeyboardRightGUI,
}

impl fmt::Display for KeyboardKeypad {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            KeyboardKeypad::ErrorRollOver => "ErrorRollOver",
            KeyboardKeypad::POSTFail => "POSTFail",
            KeyboardKeypad::ErrorUndefined => "ErrorUndefined",
            KeyboardKeypad::KeyboardA => "Keyboard A",
            KeyboardKeypad::KeyboardB => "Keyboard B",
            KeyboardKeypad::KeyboardC => "Keyboard C",
            KeyboardKeypad::KeyboardD => "Keyboard D",
            KeyboardKeypad::KeyboardE => "Keyboard E",
            KeyboardKeypad::KeyboardF => "Keyboard F",
            KeyboardKeypad::KeyboardG => "Keyboard G",
            KeyboardKeypad::KeyboardH => "Keyboard H",
            KeyboardKeypad::KeyboardI => "Keyboard I",
            KeyboardKeypad::KeyboardJ => "Keyboard J",
            KeyboardKeypad::KeyboardK => "Keyboard K",
            KeyboardKeypad::KeyboardL => "Keyboard L",
            KeyboardKeypad::KeyboardM => "Keyboard M",
            KeyboardKeypad::KeyboardN => "Keyboard N",
            KeyboardKeypad::KeyboardO => "Keyboard O",
            KeyboardKeypad::KeyboardP => "Keyboard P",
            KeyboardKeypad::KeyboardQ => "Keyboard Q",
            KeyboardKeypad::KeyboardR => "Keyboard R",
            KeyboardKeypad::KeyboardS => "Keyboard S",
            KeyboardKeypad::KeyboardT => "Keyboard T",
            KeyboardKeypad::KeyboardU => "Keyboard U",
            KeyboardKeypad::KeyboardV => "Keyboard V",
            KeyboardKeypad::KeyboardW => "Keyboard W",
            KeyboardKeypad::KeyboardX => "Keyboard X",
            KeyboardKeypad::KeyboardY => "Keyboard Y",
            KeyboardKeypad::KeyboardZ => "Keyboard Z",
            KeyboardKeypad::Keyboard1andBang => "Keyboard 1 and Bang",
            KeyboardKeypad::Keyboard2andAt => "Keyboard 2 and At",
            KeyboardKeypad::Keyboard3andHash => "Keyboard 3 and Hash",
            KeyboardKeypad::Keyboard4andDollar => "Keyboard 4 and Dollar",
            KeyboardKeypad::Keyboard5andPercent => "Keyboard 5 and Percent",
            KeyboardKeypad::Keyboard6andCaret => "Keyboard 6 and Caret",
            KeyboardKeypad::Keyboard7andAmpersand => "Keyboard 7 and Ampersand",
            KeyboardKeypad::Keyboard8andStar => "Keyboard 8 and Star",
            KeyboardKeypad::Keyboard9andLeftBracket => "Keyboard 9 and Left Bracket",
            KeyboardKeypad::Keyboard0andRightBracket => "Keyboard 0 and Right Bracket",
            KeyboardKeypad::KeyboardReturnEnter => "Keyboard Return Enter",
            KeyboardKeypad::KeyboardEscape => "Keyboard Escape",
            KeyboardKeypad::KeyboardDelete => "Keyboard Delete",
            KeyboardKeypad::KeyboardTab => "Keyboard Tab",
            KeyboardKeypad::KeyboardSpacebar => "Keyboard Spacebar",
            KeyboardKeypad::KeyboardDashandUnderscore => "Keyboard Dash and Underscore",
            KeyboardKeypad::KeyboardEqualsandPlus => "Keyboard Equals and Plus",
            KeyboardKeypad::KeyboardLeftBrace => "Keyboard Left Brace",
            KeyboardKeypad::KeyboardRightBrace => "Keyboard Right Brace",
            KeyboardKeypad::KeyboardBackslashandPipe => "Keyboard Backslash and Pipe",
            KeyboardKeypad::KeyboardNonUSHashandTilde => "Keyboard Non-US Hash and Tilde",
            KeyboardKeypad::KeyboardSemiColonandColon => "Keyboard SemiColon and Colon",
            KeyboardKeypad::KeyboardLeftAposandDouble => "Keyboard Left Apos and Double",
            KeyboardKeypad::KeyboardGraveAccentandTilde => "Keyboard Grave Accent and Tilde",
            KeyboardKeypad::KeyboardCommaandLessThan => "Keyboard Comma and LessThan",
            KeyboardKeypad::KeyboardPeriodandGreaterThan => "Keyboard Period and GreaterThan",
            KeyboardKeypad::KeyboardForwardSlashandQuestionMark => "Keyboard ForwardSlash and QuestionMark",
            KeyboardKeypad::KeyboardCapsLock => "Keyboard Caps Lock",
            KeyboardKeypad::KeyboardF1 => "Keyboard F1",
            KeyboardKeypad::KeyboardF2 => "Keyboard F2",
            KeyboardKeypad::KeyboardF3 => "Keyboard F3",
            KeyboardKeypad::KeyboardF4 => "Keyboard F4",
            KeyboardKeypad::KeyboardF5 => "Keyboard F5",
            KeyboardKeypad::KeyboardF6 => "Keyboard F6",
            KeyboardKeypad::KeyboardF7 => "Keyboard F7",
            KeyboardKeypad::KeyboardF8 => "Keyboard F8",
            KeyboardKeypad::KeyboardF9 => "Keyboard F9",
            KeyboardKeypad::KeyboardF10 => "Keyboard F10",
            KeyboardKeypad::KeyboardF11 => "Keyboard F11",
            KeyboardKeypad::KeyboardF12 => "Keyboard F12",
            KeyboardKeypad::KeyboardPrintScreen => "Keyboard PrintScreen",
            KeyboardKeypad::KeyboardScrollLock => "Keyboard Scroll Lock",
            KeyboardKeypad::KeyboardPause => "Keyboard Pause",
            KeyboardKeypad::KeyboardInsert => "Keyboard Insert",
            KeyboardKeypad::KeyboardHome => "Keyboard Home",
            KeyboardKeypad::KeyboardPageUp => "Keyboard PageUp",
            KeyboardKeypad::KeyboardDeleteForward => "Keyboard Delete Forward",
            KeyboardKeypad::KeyboardEnd => "Keyboard End",
            KeyboardKeypad::KeyboardPageDown => "Keyboard PageDown",
            KeyboardKeypad::KeyboardRightArrow => "Keyboard RightArrow",
            KeyboardKeypad::KeyboardLeftArrow => "Keyboard LeftArrow",
            KeyboardKeypad::KeyboardDownArrow => "Keyboard DownArrow",
            KeyboardKeypad::KeyboardUpArrow => "Keyboard UpArrow",
            KeyboardKeypad::KeypadNumLockandClear => "Keypad Num Lock and Clear",
            KeyboardKeypad::KeypadForwardSlash => "Keypad ForwardSlash",
            KeyboardKeypad::KeypadStar => "Keypad Star",
            KeyboardKeypad::KeypadDash => "Keypad Dash",
            KeyboardKeypad::KeypadPlus => "Keypad Plus",
            KeyboardKeypad::KeypadENTER => "Keypad ENTER",
            KeyboardKeypad::Keypad1andEnd => "Keypad 1 and End",
            KeyboardKeypad::Keypad2andDownArrow => "Keypad 2 and Down Arrow",
            KeyboardKeypad::Keypad3andPageDn => "Keypad 3 and PageDn",
            KeyboardKeypad::Keypad4andLeftArrow => "Keypad 4 and Left Arrow",
            KeyboardKeypad::Keypad5 => "Keypad 5",
            KeyboardKeypad::Keypad6andRightArrow => "Keypad 6 and Right Arrow",
            KeyboardKeypad::Keypad7andHome => "Keypad 7 and Home",
            KeyboardKeypad::Keypad8andUpArrow => "Keypad 8 and Up Arrow",
            KeyboardKeypad::Keypad9andPageUp => "Keypad 9 and PageUp",
            KeyboardKeypad::Keypad0andInsert => "Keypad 0 and Insert",
            KeyboardKeypad::KeypadPeriodandDelete => "Keypad Period and Delete",
            KeyboardKeypad::KeyboardNonUSBackslashandPipe => "Keyboard Non-US Backslash and Pipe",
            KeyboardKeypad::KeyboardApplication => "Keyboard Application",
            KeyboardKeypad::KeyboardPower => "Keyboard Power",
            KeyboardKeypad::KeypadEquals => "Keypad Equals",
            KeyboardKeypad::KeyboardF13 => "Keyboard F13",
            KeyboardKeypad::KeyboardF14 => "Keyboard F14",
            KeyboardKeypad::KeyboardF15 => "Keyboard F15",
            KeyboardKeypad::KeyboardF16 => "Keyboard F16",
            KeyboardKeypad::KeyboardF17 => "Keyboard F17",
            KeyboardKeypad::KeyboardF18 => "Keyboard F18",
            KeyboardKeypad::KeyboardF19 => "Keyboard F19",
            KeyboardKeypad::KeyboardF20 => "Keyboard F20",
            KeyboardKeypad::KeyboardF21 => "Keyboard F21",
            KeyboardKeypad::KeyboardF22 => "Keyboard F22",
            KeyboardKeypad::KeyboardF23 => "Keyboard F23",
            KeyboardKeypad::KeyboardF24 => "Keyboard F24",
            KeyboardKeypad::KeyboardExecute => "Keyboard Execute",
            KeyboardKeypad::KeyboardHelp => "Keyboard Help",
            KeyboardKeypad::KeyboardMenu => "Keyboard Menu",
            KeyboardKeypad::KeyboardSelect => "Keyboard Select",
            KeyboardKeypad::KeyboardStop => "Keyboard Stop",
            KeyboardKeypad::KeyboardAgain => "Keyboard Again",
            KeyboardKeypad::KeyboardUndo => "Keyboard Undo",
            KeyboardKeypad::KeyboardCut => "Keyboard Cut",
            KeyboardKeypad::KeyboardCopy => "Keyboard Copy",
            KeyboardKeypad::KeyboardPaste => "Keyboard Paste",
            KeyboardKeypad::KeyboardFind => "Keyboard Find",
            KeyboardKeypad::KeyboardMute => "Keyboard Mute",
            KeyboardKeypad::KeyboardVolumeUp => "Keyboard Volume Up",
            KeyboardKeypad::KeyboardVolumeDown => "Keyboard Volume Down",
            KeyboardKeypad::KeyboardLockingCapsLock => "Keyboard Locking Caps Lock",
            KeyboardKeypad::KeyboardLockingNumLock => "Keyboard Locking Num Lock",
            KeyboardKeypad::KeyboardLockingScrollLock => "Keyboard Locking Scroll Lock",
            KeyboardKeypad::KeypadComma => "Keypad Comma",
            KeyboardKeypad::KeypadEqualSign => "Keypad Equal Sign",
            KeyboardKeypad::KeyboardInternational1 => "Keyboard International1",
            KeyboardKeypad::KeyboardInternational2 => "Keyboard International2",
            KeyboardKeypad::KeyboardInternational3 => "Keyboard International3",
            KeyboardKeypad::KeyboardInternational4 => "Keyboard International4",
            KeyboardKeypad::KeyboardInternational5 => "Keyboard International5",
            KeyboardKeypad::KeyboardInternational6 => "Keyboard International6",
            KeyboardKeypad::KeyboardInternational7 => "Keyboard International7",
            KeyboardKeypad::KeyboardInternational8 => "Keyboard International8",
            KeyboardKeypad::KeyboardInternational9 => "Keyboard International9",
            KeyboardKeypad::KeyboardLANG1 => "Keyboard LANG1",
            KeyboardKeypad::KeyboardLANG2 => "Keyboard LANG2",
            KeyboardKeypad::KeyboardLANG3 => "Keyboard LANG3",
            KeyboardKeypad::KeyboardLANG4 => "Keyboard LANG4",
            KeyboardKeypad::KeyboardLANG5 => "Keyboard LANG5",
            KeyboardKeypad::KeyboardLANG6 => "Keyboard LANG6",
            KeyboardKeypad::KeyboardLANG7 => "Keyboard LANG7",
            KeyboardKeypad::KeyboardLANG8 => "Keyboard LANG8",
            KeyboardKeypad::KeyboardLANG9 => "Keyboard LANG9",
            KeyboardKeypad::KeyboardAlternateErase => "Keyboard Alternate Erase",
            KeyboardKeypad::KeyboardSysReqAttention => "Keyboard SysReq Attention",
            KeyboardKeypad::KeyboardCancel => "Keyboard Cancel",
            KeyboardKeypad::KeyboardClear => "Keyboard Clear",
            KeyboardKeypad::KeyboardPrior => "Keyboard Prior",
            KeyboardKeypad::KeyboardReturn => "Keyboard Return",
            KeyboardKeypad::KeyboardSeparator => "Keyboard Separator",
            KeyboardKeypad::KeyboardOut => "Keyboard Out",
            KeyboardKeypad::KeyboardOper => "Keyboard Oper",
            KeyboardKeypad::KeyboardClearAgain => "Keyboard Clear Again",
            KeyboardKeypad::KeyboardCrSelProps => "Keyboard CrSel Props",
            KeyboardKeypad::KeyboardExSel => "Keyboard ExSel",
            KeyboardKeypad::KeypadDouble0 => "Keypad Double 0",
            KeyboardKeypad::KeypadTriple0 => "Keypad Triple 0",
            KeyboardKeypad::ThousandsSeparator => "Thousands Separator",
            KeyboardKeypad::DecimalSeparator => "Decimal Separator",
            KeyboardKeypad::CurrencyUnit => "Currency Unit",
            KeyboardKeypad::CurrencySubunit => "Currency Sub-unit",
            KeyboardKeypad::KeypadLeftBracket => "Keypad Left Bracket",
            KeyboardKeypad::KeypadRightBracket => "Keypad Right Bracket",
            KeyboardKeypad::KeypadLeftBrace => "Keypad Left Brace",
            KeyboardKeypad::KeypadRightBrace => "Keypad Right Brace",
            KeyboardKeypad::KeypadTab => "Keypad Tab",
            KeyboardKeypad::KeypadBackspace => "Keypad Backspace",
            KeyboardKeypad::KeypadA => "Keypad A",
            KeyboardKeypad::KeypadB => "Keypad B",
            KeyboardKeypad::KeypadC => "Keypad C",
            KeyboardKeypad::KeypadD => "Keypad D",
            KeyboardKeypad::KeypadE => "Keypad E",
            KeyboardKeypad::KeypadF => "Keypad F",
            KeyboardKeypad::KeypadXOR => "Keypad XOR",
            KeyboardKeypad::KeypadCaret => "Keypad Caret",
            KeyboardKeypad::KeypadPercentage => "Keypad Percentage",
            KeyboardKeypad::KeypadLess => "Keypad Less",
            KeyboardKeypad::KeypadGreater => "Keypad Greater",
            KeyboardKeypad::KeypadAmpersand => "Keypad Ampersand",
            KeyboardKeypad::KeypadDoubleAmpersand => "Keypad Double Ampersand",
            KeyboardKeypad::KeypadBar => "Keypad Bar",
            KeyboardKeypad::KeypadDoubleBar => "Keypad Double Bar",
            KeyboardKeypad::KeypadColon => "Keypad Colon",
            KeyboardKeypad::KeypadHash => "Keypad Hash",
            KeyboardKeypad::KeypadSpace => "Keypad Space",
            KeyboardKeypad::KeypadAt => "Keypad At",
            KeyboardKeypad::KeypadBang => "Keypad Bang",
            KeyboardKeypad::KeypadMemoryStore => "Keypad Memory Store",
            KeyboardKeypad::KeypadMemoryRecall => "Keypad Memory Recall",
            KeyboardKeypad::KeypadMemoryClear => "Keypad Memory Clear",
            KeyboardKeypad::KeypadMemoryAdd => "Keypad Memory Add",
            KeyboardKeypad::KeypadMemorySubtract => "Keypad Memory Subtract",
            KeyboardKeypad::KeypadMemoryMultiply => "Keypad Memory Multiply",
            KeyboardKeypad::KeypadMemoryDivide => "Keypad Memory Divide",
            KeyboardKeypad::KeypadPlusMinus => "Keypad Plus Minus",
            KeyboardKeypad::KeypadClear => "Keypad Clear",
            KeyboardKeypad::KeypadClearEntry => "Keypad Clear Entry",
            KeyboardKeypad::KeypadBinary => "Keypad Binary",
            KeyboardKeypad::KeypadOctal => "Keypad Octal",
            KeyboardKeypad::KeypadDecimal => "Keypad Decimal",
            KeyboardKeypad::KeypadHexadecimal => "Keypad Hexadecimal",
            KeyboardKeypad::KeyboardLeftControl => "Keyboard LeftControl",
            KeyboardKeypad::KeyboardLeftShift => "Keyboard LeftShift",
            KeyboardKeypad::KeyboardLeftAlt => "Keyboard LeftAlt",
            KeyboardKeypad::KeyboardLeftGUI => "Keyboard Left GUI",
            KeyboardKeypad::KeyboardRightControl => "Keyboard RightControl",
            KeyboardKeypad::KeyboardRightShift => "Keyboard RightShift",
            KeyboardKeypad::KeyboardRightAlt => "Keyboard RightAlt",
            KeyboardKeypad::KeyboardRightGUI => "Keyboard Right GUI",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x8`: "LED"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::LED { usage: LED::CapsLock };
/// let u2 = Usage::new_from_page_and_id(0x8, 0x2).unwrap();
/// let u3 = Usage::from(LED::CapsLock);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x8, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x8 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum LED {
    /// Usage ID `0x1`: "Num Lock"
    NumLock,
    /// Usage ID `0x2`: "Caps Lock"
    CapsLock,
    /// Usage ID `0x3`: "Scroll Lock"
    ScrollLock,
    /// Usage ID `0x4`: "Compose"
    Compose,
    /// Usage ID `0x5`: "Kana"
    Kana,
    /// Usage ID `0x6`: "Power"
    Power,
    /// Usage ID `0x7`: "Shift"
    Shift,
    /// Usage ID `0x8`: "Do Not Disturb"
    DoNotDisturb,
    /// Usage ID `0x9`: "Mute"
    Mute,
    /// Usage ID `0xA`: "Tone Enable"
    ToneEnable,
    /// Usage ID `0xB`: "High Cut Filter"
    HighCutFilter,
    /// Usage ID `0xC`: "Low Cut Filter"
    LowCutFilter,
    /// Usage ID `0xD`: "Equalizer Enable"
    EqualizerEnable,
    /// Usage ID `0xE`: "Sound Field On"
    SoundFieldOn,
    /// Usage ID `0xF`: "Surround On"
    SurroundOn,
    /// Usage ID `0x10`: "Repeat"
    Repeat,
    /// Usage ID `0x11`: "Stereo"
    Stereo,
    /// Usage ID `0x12`: "Sampling Rate Detect"
    SamplingRateDetect,
    /// Usage ID `0x13`: "Spinning"
    Spinning,
    /// Usage ID `0x14`: "CAV"
    CAV,
    /// Usage ID `0x15`: "CLV"
    CLV,
    /// Usage ID `0x16`: "Recording Format Detect"
    RecordingFormatDetect,
    /// Usage ID `0x17`: "Off-Hook"
    OffHook,
    /// Usage ID `0x18`: "Ring"
    Ring,
    /// Usage ID `0x19`: "Message Waiting"
    MessageWaiting,
    /// Usage ID `0x1A`: "Data Mode"
    DataMode,
    /// Usage ID `0x1B`: "Battery Operation"
    BatteryOperation,
    /// Usage ID `0x1C`: "Battery OK"
    BatteryOK,
    /// Usage ID `0x1D`: "Battery Low"
    BatteryLow,
    /// Usage ID `0x1E`: "Speaker"
    Speaker,
    /// Usage ID `0x1F`: "Headset"
    Headset,
    /// Usage ID `0x20`: "Hold"
    Hold,
    /// Usage ID `0x21`: "Microphone"
    Microphone,
    /// Usage ID `0x22`: "Coverage"
    Coverage,
    /// Usage ID `0x23`: "Night Mode"
    NightMode,
    /// Usage ID `0x24`: "Send Calls"
    SendCalls,
    /// Usage ID `0x25`: "Call Pickup"
    CallPickup,
    /// Usage ID `0x26`: "Conference"
    Conference,
    /// Usage ID `0x27`: "Stand-by"
    Standby,
    /// Usage ID `0x28`: "Camera On"
    CameraOn,
    /// Usage ID `0x29`: "Camera Off"
    CameraOff,
    /// Usage ID `0x2A`: "On-Line"
    OnLine,
    /// Usage ID `0x2B`: "Off-Line"
    OffLine,
    /// Usage ID `0x2C`: "Busy"
    Busy,
    /// Usage ID `0x2D`: "Ready"
    Ready,
    /// Usage ID `0x2E`: "Paper-Out"
    PaperOut,
    /// Usage ID `0x2F`: "Paper-Jam"
    PaperJam,
    /// Usage ID `0x30`: "Remote"
    Remote,
    /// Usage ID `0x31`: "Forward"
    Forward,
    /// Usage ID `0x32`: "Reverse"
    Reverse,
    /// Usage ID `0x33`: "Stop"
    Stop,
    /// Usage ID `0x34`: "Rewind"
    Rewind,
    /// Usage ID `0x35`: "Fast Forward"
    FastForward,
    /// Usage ID `0x36`: "Play"
    Play,
    /// Usage ID `0x37`: "Pause"
    Pause,
    /// Usage ID `0x38`: "Record"
    Record,
    /// Usage ID `0x39`: "Error"
    Error,
    /// Usage ID `0x3A`: "Usage Selected Indicator"
    UsageSelectedIndicator,
    /// Usage ID `0x3B`: "Usage In Use Indicator"
    UsageInUseIndicator,
    /// Usage ID `0x3C`: "Usage Multi Mode Indicator"
    UsageMultiModeIndicator,
    /// Usage ID `0x3D`: "Indicator On"
    IndicatorOn,
    /// Usage ID `0x3E`: "Indicator Flash"
    IndicatorFlash,
    /// Usage ID `0x3F`: "Indicator Slow Blink"
    IndicatorSlowBlink,
    /// Usage ID `0x40`: "Indicator Fast Blink"
    IndicatorFastBlink,
    /// Usage ID `0x41`: "Indicator Off"
    IndicatorOff,
    /// Usage ID `0x42`: "Flash On Time"
    FlashOnTime,
    /// Usage ID `0x43`: "Slow Blink On Time"
    SlowBlinkOnTime,
    /// Usage ID `0x44`: "Slow Blink Off Time"
    SlowBlinkOffTime,
    /// Usage ID `0x45`: "Fast Blink On Time"
    FastBlinkOnTime,
    /// Usage ID `0x46`: "Fast Blink Off Time"
    FastBlinkOffTime,
    /// Usage ID `0x47`: "Usage Indicator Color"
    UsageIndicatorColor,
    /// Usage ID `0x48`: "Indicator Red"
    IndicatorRed,
    /// Usage ID `0x49`: "Indicator Green"
    IndicatorGreen,
    /// Usage ID `0x4A`: "Indicator Amber"
    IndicatorAmber,
    /// Usage ID `0x4B`: "Generic Indicator"
    GenericIndicator,
    /// Usage ID `0x4C`: "System Suspend"
    SystemSuspend,
    /// Usage ID `0x4D`: "External Power Connected"
    ExternalPowerConnected,
    /// Usage ID `0x4E`: "Indicator Blue"
    IndicatorBlue,
    /// Usage ID `0x4F`: "Indicator Orange"
    IndicatorOrange,
    /// Usage ID `0x50`: "Good Status"
    GoodStatus,
    /// Usage ID `0x51`: "Warning Status"
    WarningStatus,
    /// Usage ID `0x52`: "RGB LED"
    RGBLED,
    /// Usage ID `0x53`: "Red LED Channel"
    RedLEDChannel,
    /// Usage ID `0x54`: "Blue LED Channel"
    BlueLEDChannel,
    /// Usage ID `0x55`: "Green LED Channel"
    GreenLEDChannel,
    /// Usage ID `0x56`: "LED Intensity"
    LEDIntensity,
    /// Usage ID `0x57`: "System Microphone Mute"
    SystemMicrophoneMute,
    /// Usage ID `0x60`: "Player Indicator"
    PlayerIndicator,
    /// Usage ID `0x61`: "Player 1"
    Player1,
    /// Usage ID `0x62`: "Player 2"
    Player2,
    /// Usage ID `0x63`: "Player 3"
    Player3,
    /// Usage ID `0x64`: "Player 4"
    Player4,
    /// Usage ID `0x65`: "Player 5"
    Player5,
    /// Usage ID `0x66`: "Player 6"
    Player6,
    /// Usage ID `0x67`: "Player 7"
    Player7,
    /// Usage ID `0x68`: "Player 8"
    Player8,
}

impl fmt::Display for LED {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            LED::NumLock => "Num Lock",
            LED::CapsLock => "Caps Lock",
            LED::ScrollLock => "Scroll Lock",
            LED::Compose => "Compose",
            LED::Kana => "Kana",
            LED::Power => "Power",
            LED::Shift => "Shift",
            LED::DoNotDisturb => "Do Not Disturb",
            LED::Mute => "Mute",
            LED::ToneEnable => "Tone Enable",
            LED::HighCutFilter => "High Cut Filter",
            LED::LowCutFilter => "Low Cut Filter",
            LED::EqualizerEnable => "Equalizer Enable",
            LED::SoundFieldOn => "Sound Field On",
            LED::SurroundOn => "Surround On",
            LED::Repeat => "Repeat",
            LED::Stereo => "Stereo",
            LED::SamplingRateDetect => "Sampling Rate Detect",
            LED::Spinning => "Spinning",
            LED::CAV => "CAV",
            LED::CLV => "CLV",
            LED::RecordingFormatDetect => "Recording Format Detect",
            LED::OffHook => "Off-Hook",
            LED::Ring => "Ring",
            LED::MessageWaiting => "Message Waiting",
            LED::DataMode => "Data Mode",
            LED::BatteryOperation => "Battery Operation",
            LED::BatteryOK => "Battery OK",
            LED::BatteryLow => "Battery Low",
            LED::Speaker => "Speaker",
            LED::Headset => "Headset",
            LED::Hold => "Hold",
            LED::Microphone => "Microphone",
            LED::Coverage => "Coverage",
            LED::NightMode => "Night Mode",
            LED::SendCalls => "Send Calls",
            LED::CallPickup => "Call Pickup",
            LED::Conference => "Conference",
            LED::Standby => "Stand-by",
            LED::CameraOn => "Camera On",
            LED::CameraOff => "Camera Off",
            LED::OnLine => "On-Line",
            LED::OffLine => "Off-Line",
            LED::Busy => "Busy",
            LED::Ready => "Ready",
            LED::PaperOut => "Paper-Out",
            LED::PaperJam => "Paper-Jam",
            LED::Remote => "Remote",
            LED::Forward => "Forward",
            LED::Reverse => "Reverse",
            LED::Stop => "Stop",
            LED::Rewind => "Rewind",
            LED::FastForward => "Fast Forward",
            LED::Play => "Play",
            LED::Pause => "Pause",
            LED::Record => "Record",
            LED::Error => "Error",
            LED::UsageSelectedIndicator => "Usage Selected Indicator",
            LED::UsageInUseIndicator => "Usage In Use Indicator",
            LED::UsageMultiModeIndicator => "Usage Multi Mode Indicator",
            LED::IndicatorOn => "Indicator On",
            LED::IndicatorFlash => "Indicator Flash",
            LED::IndicatorSlowBlink => "Indicator Slow Blink",
            LED::IndicatorFastBlink => "Indicator Fast Blink",
            LED::IndicatorOff => "Indicator Off",
            LED::FlashOnTime => "Flash On Time",
            LED::SlowBlinkOnTime => "Slow Blink On Time",
            LED::SlowBlinkOffTime => "Slow Blink Off Time",
            LED::FastBlinkOnTime => "Fast Blink On Time",
            LED::FastBlinkOffTime => "Fast Blink Off Time",
            LED::UsageIndicatorColor => "Usage Indicator Color",
            LED::IndicatorRed => "Indicator Red",
            LED::IndicatorGreen => "Indicator Green",
            LED::IndicatorAmber => "Indicator Amber",
            LED::GenericIndicator => "Generic Indicator",
            LED::SystemSuspend => "System Suspend",
            LED::ExternalPowerConnected => "External Power Connected",
            LED::IndicatorBlue => "Indicator Blue",
            LED::IndicatorOrange => "Indicator Orange",
            LED::GoodStatus => "Good Status",
            LED::WarningStatus => "Warning Status",
            LED::RGBLED => "RGB LED",
            LED::RedLEDChannel => "Red LED Channel",
            LED::BlueLEDChannel => "Blue LED Channel",
            LED::GreenLEDChannel => "Green LED Channel",
            LED::LEDIntensity => "LED Intensity",
            LED::SystemMicrophoneMute => "System Microphone Mute",
            LED::PlayerIndicator => "Player Indicator",
            LED::Player1 => "Player 1",
            LED::Player2 => "Player 2",
            LED::Player3 => "Player 3",
            LED::Player4 => "Player 4",
            LED::Player5 => "Player 5",
            LED::Player6 => "Player 6",
            LED::Player7 => "Player 7",
            LED::Player8 => "Player 8",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x9`: "Button"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
///
/// This Usage Page is generated, not defined, any Usage IDs in this Usage
/// Page are simply the button number.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Button {
    Button {
        button: u16,
    }
}

impl fmt::Display for Button {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Button::Button { button } => format!("Button {button}"),
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0xA`: "Ordinal"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
///
/// This Usage Page is generated, not defined, any Usage IDs in this Usage
/// Page are simply the instance number.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Ordinal {
    Ordinal {
        instance: u16,
    }
}

impl fmt::Display for Ordinal {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Ordinal::Ordinal { instance } => format!("Instance {instance}"),
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0xB`: "Telephony Device"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::TelephonyDevice { usage: TelephonyDevice::AnsweringMachine };
/// let u2 = Usage::new_from_page_and_id(0xB, 0x2).unwrap();
/// let u3 = Usage::from(TelephonyDevice::AnsweringMachine);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0xB, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0xB << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum TelephonyDevice {
    /// Usage ID `0x1`: "Phone"
    Phone,
    /// Usage ID `0x2`: "Answering Machine"
    AnsweringMachine,
    /// Usage ID `0x3`: "Message Controls"
    MessageControls,
    /// Usage ID `0x4`: "Handset"
    Handset,
    /// Usage ID `0x5`: "Headset"
    Headset,
    /// Usage ID `0x6`: "Telephony Key Pad"
    TelephonyKeyPad,
    /// Usage ID `0x7`: "Programmable Button"
    ProgrammableButton,
    /// Usage ID `0x20`: "Hook Switch"
    HookSwitch,
    /// Usage ID `0x21`: "Flash"
    Flash,
    /// Usage ID `0x22`: "Feature"
    Feature,
    /// Usage ID `0x23`: "Hold"
    Hold,
    /// Usage ID `0x24`: "Redial"
    Redial,
    /// Usage ID `0x25`: "Transfer"
    Transfer,
    /// Usage ID `0x26`: "Drop"
    Drop,
    /// Usage ID `0x27`: "Park"
    Park,
    /// Usage ID `0x28`: "Forward Calls"
    ForwardCalls,
    /// Usage ID `0x29`: "Alternate Function"
    AlternateFunction,
    /// Usage ID `0x2A`: "Line"
    Line,
    /// Usage ID `0x2B`: "Speaker Phone"
    SpeakerPhone,
    /// Usage ID `0x2C`: "Conference"
    Conference,
    /// Usage ID `0x2D`: "Ring Enable"
    RingEnable,
    /// Usage ID `0x2E`: "Ring Select"
    RingSelect,
    /// Usage ID `0x2F`: "Phone Mute"
    PhoneMute,
    /// Usage ID `0x30`: "Caller ID"
    CallerID,
    /// Usage ID `0x31`: "Send"
    Send,
    /// Usage ID `0x50`: "Speed Dial"
    SpeedDial,
    /// Usage ID `0x51`: "Store Number"
    StoreNumber,
    /// Usage ID `0x52`: "Recall Number"
    RecallNumber,
    /// Usage ID `0x53`: "Phone Directory"
    PhoneDirectory,
    /// Usage ID `0x70`: "Voice Mail"
    VoiceMail,
    /// Usage ID `0x71`: "Screen Calls"
    ScreenCalls,
    /// Usage ID `0x72`: "Do Not Disturb"
    DoNotDisturb,
    /// Usage ID `0x73`: "Message"
    Message,
    /// Usage ID `0x74`: "Answer On/Off"
    AnswerOnOff,
    /// Usage ID `0x90`: "Inside Dial Tone"
    InsideDialTone,
    /// Usage ID `0x91`: "Outside Dial Tone"
    OutsideDialTone,
    /// Usage ID `0x92`: "Inside Ring Tone"
    InsideRingTone,
    /// Usage ID `0x93`: "Outside Ring Tone"
    OutsideRingTone,
    /// Usage ID `0x94`: "Priority Ring Tone"
    PriorityRingTone,
    /// Usage ID `0x95`: "Inside Ringback"
    InsideRingback,
    /// Usage ID `0x96`: "Priority Ringback"
    PriorityRingback,
    /// Usage ID `0x97`: "Line Busy Tone"
    LineBusyTone,
    /// Usage ID `0x98`: "Reorder Tone"
    ReorderTone,
    /// Usage ID `0x99`: "Call Waiting Tone"
    CallWaitingTone,
    /// Usage ID `0x9A`: "Confirmation Tone 1"
    ConfirmationTone1,
    /// Usage ID `0x9B`: "Confirmation Tone 2"
    ConfirmationTone2,
    /// Usage ID `0x9C`: "Tones Off"
    TonesOff,
    /// Usage ID `0x9D`: "Outside Ringback"
    OutsideRingback,
    /// Usage ID `0x9E`: "Ringer"
    Ringer,
    /// Usage ID `0xB0`: "Phone Key 0"
    PhoneKey0,
    /// Usage ID `0xB1`: "Phone Key 1"
    PhoneKey1,
    /// Usage ID `0xB2`: "Phone Key 2"
    PhoneKey2,
    /// Usage ID `0xB3`: "Phone Key 3"
    PhoneKey3,
    /// Usage ID `0xB4`: "Phone Key 4"
    PhoneKey4,
    /// Usage ID `0xB5`: "Phone Key 5"
    PhoneKey5,
    /// Usage ID `0xB6`: "Phone Key 6"
    PhoneKey6,
    /// Usage ID `0xB7`: "Phone Key 7"
    PhoneKey7,
    /// Usage ID `0xB8`: "Phone Key 8"
    PhoneKey8,
    /// Usage ID `0xB9`: "Phone Key 9"
    PhoneKey9,
    /// Usage ID `0xBA`: "Phone Key Star"
    PhoneKeyStar,
    /// Usage ID `0xBB`: "Phone Key Pound"
    PhoneKeyPound,
    /// Usage ID `0xBC`: "Phone Key A"
    PhoneKeyA,
    /// Usage ID `0xBD`: "Phone Key B"
    PhoneKeyB,
    /// Usage ID `0xBE`: "Phone Key C"
    PhoneKeyC,
    /// Usage ID `0xBF`: "Phone Key D"
    PhoneKeyD,
    /// Usage ID `0xC0`: "Phone Call History Key"
    PhoneCallHistoryKey,
    /// Usage ID `0xC1`: "Phone Caller ID Key"
    PhoneCallerIDKey,
    /// Usage ID `0xC2`: "Phone Settings Key"
    PhoneSettingsKey,
    /// Usage ID `0xF0`: "Host Control"
    HostControl,
    /// Usage ID `0xF1`: "Host Available"
    HostAvailable,
    /// Usage ID `0xF2`: "Host Call Active"
    HostCallActive,
    /// Usage ID `0xF3`: "Activate Handset Audio"
    ActivateHandsetAudio,
    /// Usage ID `0xF4`: "Ring Type"
    RingType,
    /// Usage ID `0xF5`: "Re-dialable Phone Number"
    RedialablePhoneNumber,
    /// Usage ID `0xF8`: "Stop Ring Tone"
    StopRingTone,
    /// Usage ID `0xF9`: "PSTN Ring Tone"
    PSTNRingTone,
    /// Usage ID `0xFA`: "Host Ring Tone"
    HostRingTone,
    /// Usage ID `0xFB`: "Alert Sound Error"
    AlertSoundError,
    /// Usage ID `0xFC`: "Alert Sound Confirm"
    AlertSoundConfirm,
    /// Usage ID `0xFD`: "Alert Sound Notification"
    AlertSoundNotification,
    /// Usage ID `0xFE`: "Silent Ring"
    SilentRing,
    /// Usage ID `0x108`: "Email Message Waiting"
    EmailMessageWaiting,
    /// Usage ID `0x109`: "Voicemail Message Waiting"
    VoicemailMessageWaiting,
    /// Usage ID `0x10A`: "Host Hold"
    HostHold,
    /// Usage ID `0x110`: "Incoming Call History Count"
    IncomingCallHistoryCount,
    /// Usage ID `0x111`: "Outgoing Call History Count"
    OutgoingCallHistoryCount,
    /// Usage ID `0x112`: "Incoming Call History"
    IncomingCallHistory,
    /// Usage ID `0x113`: "Outgoing Call History"
    OutgoingCallHistory,
    /// Usage ID `0x114`: "Phone Locale"
    PhoneLocale,
    /// Usage ID `0x140`: "Phone Time Second"
    PhoneTimeSecond,
    /// Usage ID `0x141`: "Phone Time Minute"
    PhoneTimeMinute,
    /// Usage ID `0x142`: "Phone Time Hour"
    PhoneTimeHour,
    /// Usage ID `0x143`: "Phone Date Day"
    PhoneDateDay,
    /// Usage ID `0x144`: "Phone Date Month"
    PhoneDateMonth,
    /// Usage ID `0x145`: "Phone Date Year"
    PhoneDateYear,
    /// Usage ID `0x146`: "Handset Nickname"
    HandsetNickname,
    /// Usage ID `0x147`: "Address Book ID"
    AddressBookID,
    /// Usage ID `0x14A`: "Call Duration"
    CallDuration,
    /// Usage ID `0x14B`: "Dual Mode Phone"
    DualModePhone,
}

impl fmt::Display for TelephonyDevice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            TelephonyDevice::Phone => "Phone",
            TelephonyDevice::AnsweringMachine => "Answering Machine",
            TelephonyDevice::MessageControls => "Message Controls",
            TelephonyDevice::Handset => "Handset",
            TelephonyDevice::Headset => "Headset",
            TelephonyDevice::TelephonyKeyPad => "Telephony Key Pad",
            TelephonyDevice::ProgrammableButton => "Programmable Button",
            TelephonyDevice::HookSwitch => "Hook Switch",
            TelephonyDevice::Flash => "Flash",
            TelephonyDevice::Feature => "Feature",
            TelephonyDevice::Hold => "Hold",
            TelephonyDevice::Redial => "Redial",
            TelephonyDevice::Transfer => "Transfer",
            TelephonyDevice::Drop => "Drop",
            TelephonyDevice::Park => "Park",
            TelephonyDevice::ForwardCalls => "Forward Calls",
            TelephonyDevice::AlternateFunction => "Alternate Function",
            TelephonyDevice::Line => "Line",
            TelephonyDevice::SpeakerPhone => "Speaker Phone",
            TelephonyDevice::Conference => "Conference",
            TelephonyDevice::RingEnable => "Ring Enable",
            TelephonyDevice::RingSelect => "Ring Select",
            TelephonyDevice::PhoneMute => "Phone Mute",
            TelephonyDevice::CallerID => "Caller ID",
            TelephonyDevice::Send => "Send",
            TelephonyDevice::SpeedDial => "Speed Dial",
            TelephonyDevice::StoreNumber => "Store Number",
            TelephonyDevice::RecallNumber => "Recall Number",
            TelephonyDevice::PhoneDirectory => "Phone Directory",
            TelephonyDevice::VoiceMail => "Voice Mail",
            TelephonyDevice::ScreenCalls => "Screen Calls",
            TelephonyDevice::DoNotDisturb => "Do Not Disturb",
            TelephonyDevice::Message => "Message",
            TelephonyDevice::AnswerOnOff => "Answer On/Off",
            TelephonyDevice::InsideDialTone => "Inside Dial Tone",
            TelephonyDevice::OutsideDialTone => "Outside Dial Tone",
            TelephonyDevice::InsideRingTone => "Inside Ring Tone",
            TelephonyDevice::OutsideRingTone => "Outside Ring Tone",
            TelephonyDevice::PriorityRingTone => "Priority Ring Tone",
            TelephonyDevice::InsideRingback => "Inside Ringback",
            TelephonyDevice::PriorityRingback => "Priority Ringback",
            TelephonyDevice::LineBusyTone => "Line Busy Tone",
            TelephonyDevice::ReorderTone => "Reorder Tone",
            TelephonyDevice::CallWaitingTone => "Call Waiting Tone",
            TelephonyDevice::ConfirmationTone1 => "Confirmation Tone 1",
            TelephonyDevice::ConfirmationTone2 => "Confirmation Tone 2",
            TelephonyDevice::TonesOff => "Tones Off",
            TelephonyDevice::OutsideRingback => "Outside Ringback",
            TelephonyDevice::Ringer => "Ringer",
            TelephonyDevice::PhoneKey0 => "Phone Key 0",
            TelephonyDevice::PhoneKey1 => "Phone Key 1",
            TelephonyDevice::PhoneKey2 => "Phone Key 2",
            TelephonyDevice::PhoneKey3 => "Phone Key 3",
            TelephonyDevice::PhoneKey4 => "Phone Key 4",
            TelephonyDevice::PhoneKey5 => "Phone Key 5",
            TelephonyDevice::PhoneKey6 => "Phone Key 6",
            TelephonyDevice::PhoneKey7 => "Phone Key 7",
            TelephonyDevice::PhoneKey8 => "Phone Key 8",
            TelephonyDevice::PhoneKey9 => "Phone Key 9",
            TelephonyDevice::PhoneKeyStar => "Phone Key Star",
            TelephonyDevice::PhoneKeyPound => "Phone Key Pound",
            TelephonyDevice::PhoneKeyA => "Phone Key A",
            TelephonyDevice::PhoneKeyB => "Phone Key B",
            TelephonyDevice::PhoneKeyC => "Phone Key C",
            TelephonyDevice::PhoneKeyD => "Phone Key D",
            TelephonyDevice::PhoneCallHistoryKey => "Phone Call History Key",
            TelephonyDevice::PhoneCallerIDKey => "Phone Caller ID Key",
            TelephonyDevice::PhoneSettingsKey => "Phone Settings Key",
            TelephonyDevice::HostControl => "Host Control",
            TelephonyDevice::HostAvailable => "Host Available",
            TelephonyDevice::HostCallActive => "Host Call Active",
            TelephonyDevice::ActivateHandsetAudio => "Activate Handset Audio",
            TelephonyDevice::RingType => "Ring Type",
            TelephonyDevice::RedialablePhoneNumber => "Re-dialable Phone Number",
            TelephonyDevice::StopRingTone => "Stop Ring Tone",
            TelephonyDevice::PSTNRingTone => "PSTN Ring Tone",
            TelephonyDevice::HostRingTone => "Host Ring Tone",
            TelephonyDevice::AlertSoundError => "Alert Sound Error",
            TelephonyDevice::AlertSoundConfirm => "Alert Sound Confirm",
            TelephonyDevice::AlertSoundNotification => "Alert Sound Notification",
            TelephonyDevice::SilentRing => "Silent Ring",
            TelephonyDevice::EmailMessageWaiting => "Email Message Waiting",
            TelephonyDevice::VoicemailMessageWaiting => "Voicemail Message Waiting",
            TelephonyDevice::HostHold => "Host Hold",
            TelephonyDevice::IncomingCallHistoryCount => "Incoming Call History Count",
            TelephonyDevice::OutgoingCallHistoryCount => "Outgoing Call History Count",
            TelephonyDevice::IncomingCallHistory => "Incoming Call History",
            TelephonyDevice::OutgoingCallHistory => "Outgoing Call History",
            TelephonyDevice::PhoneLocale => "Phone Locale",
            TelephonyDevice::PhoneTimeSecond => "Phone Time Second",
            TelephonyDevice::PhoneTimeMinute => "Phone Time Minute",
            TelephonyDevice::PhoneTimeHour => "Phone Time Hour",
            TelephonyDevice::PhoneDateDay => "Phone Date Day",
            TelephonyDevice::PhoneDateMonth => "Phone Date Month",
            TelephonyDevice::PhoneDateYear => "Phone Date Year",
            TelephonyDevice::HandsetNickname => "Handset Nickname",
            TelephonyDevice::AddressBookID => "Address Book ID",
            TelephonyDevice::CallDuration => "Call Duration",
            TelephonyDevice::DualModePhone => "Dual Mode Phone",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0xC`: "Consumer"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::Consumer { usage: Consumer::NumericKeyPad };
/// let u2 = Usage::new_from_page_and_id(0xC, 0x2).unwrap();
/// let u3 = Usage::from(Consumer::NumericKeyPad);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0xC, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0xC << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Consumer {
    /// Usage ID `0x1`: "Consumer Control"
    ConsumerControl,
    /// Usage ID `0x2`: "Numeric Key Pad"
    NumericKeyPad,
    /// Usage ID `0x3`: "Programmable Buttons"
    ProgrammableButtons,
    /// Usage ID `0x4`: "Microphone"
    Microphone,
    /// Usage ID `0x5`: "Headphone"
    Headphone,
    /// Usage ID `0x6`: "Graphic Equalizer"
    GraphicEqualizer,
    /// Usage ID `0x20`: "+10"
    Plus10,
    /// Usage ID `0x21`: "+100"
    Plus100,
    /// Usage ID `0x22`: "AM/PM"
    AMPM,
    /// Usage ID `0x30`: "Power"
    Power,
    /// Usage ID `0x31`: "Reset"
    Reset,
    /// Usage ID `0x32`: "Sleep"
    Sleep,
    /// Usage ID `0x33`: "Sleep After"
    SleepAfter,
    /// Usage ID `0x34`: "Sleep Mode"
    SleepMode,
    /// Usage ID `0x35`: "Illumination"
    Illumination,
    /// Usage ID `0x36`: "Function Buttons"
    FunctionButtons,
    /// Usage ID `0x40`: "Menu"
    Menu,
    /// Usage ID `0x41`: "Menu Pick"
    MenuPick,
    /// Usage ID `0x42`: "Menu Up"
    MenuUp,
    /// Usage ID `0x43`: "Menu Down"
    MenuDown,
    /// Usage ID `0x44`: "Menu Left"
    MenuLeft,
    /// Usage ID `0x45`: "Menu Right"
    MenuRight,
    /// Usage ID `0x46`: "Menu Escape"
    MenuEscape,
    /// Usage ID `0x47`: "Menu Value Increase"
    MenuValueIncrease,
    /// Usage ID `0x48`: "Menu Value Decrease"
    MenuValueDecrease,
    /// Usage ID `0x60`: "Data On Screen"
    DataOnScreen,
    /// Usage ID `0x61`: "Closed Caption"
    ClosedCaption,
    /// Usage ID `0x62`: "Closed Caption Select"
    ClosedCaptionSelect,
    /// Usage ID `0x63`: "VCR/TV"
    VCRTV,
    /// Usage ID `0x64`: "Broadcast Mode"
    BroadcastMode,
    /// Usage ID `0x65`: "Snapshot"
    Snapshot,
    /// Usage ID `0x66`: "Still"
    Still,
    /// Usage ID `0x67`: "Picture-in-Picture Toggle"
    PictureinPictureToggle,
    /// Usage ID `0x68`: "Picture-in-Picture Swap"
    PictureinPictureSwap,
    /// Usage ID `0x69`: "Red Menu Button"
    RedMenuButton,
    /// Usage ID `0x6A`: "Green Menu Button"
    GreenMenuButton,
    /// Usage ID `0x6B`: "Blue Menu Button"
    BlueMenuButton,
    /// Usage ID `0x6C`: "Yellow Menu Button"
    YellowMenuButton,
    /// Usage ID `0x6D`: "Aspect"
    Aspect,
    /// Usage ID `0x6E`: "3D Mode Select"
    ThreeDModeSelect,
    /// Usage ID `0x6F`: "Display Brightness Increment"
    DisplayBrightnessIncrement,
    /// Usage ID `0x70`: "Display Brightness Decrement"
    DisplayBrightnessDecrement,
    /// Usage ID `0x71`: "Display Brightness"
    DisplayBrightness,
    /// Usage ID `0x72`: "Display Backlight Toggle"
    DisplayBacklightToggle,
    /// Usage ID `0x73`: "Display Set Brightness to Minimum"
    DisplaySetBrightnesstoMinimum,
    /// Usage ID `0x74`: "Display Set Brightness to Maximum"
    DisplaySetBrightnesstoMaximum,
    /// Usage ID `0x75`: "Display Set Auto Brightness"
    DisplaySetAutoBrightness,
    /// Usage ID `0x76`: "Camera Access Enabled"
    CameraAccessEnabled,
    /// Usage ID `0x77`: "Camera Access Disabled"
    CameraAccessDisabled,
    /// Usage ID `0x78`: "Camera Access Toggle"
    CameraAccessToggle,
    /// Usage ID `0x79`: "Keyboard Brightness Increment"
    KeyboardBrightnessIncrement,
    /// Usage ID `0x7A`: "Keyboard Brightness Decrement"
    KeyboardBrightnessDecrement,
    /// Usage ID `0x7B`: "Keyboard Backlight Set Level"
    KeyboardBacklightSetLevel,
    /// Usage ID `0x7C`: "Keyboard Backlight OOC"
    KeyboardBacklightOOC,
    /// Usage ID `0x7D`: "Keyboard Backlight Set Minimum"
    KeyboardBacklightSetMinimum,
    /// Usage ID `0x7E`: "Keyboard Backlight Set Maximum"
    KeyboardBacklightSetMaximum,
    /// Usage ID `0x7F`: "Keyboard Backlight Auto"
    KeyboardBacklightAuto,
    /// Usage ID `0x80`: "Selection"
    Selection,
    /// Usage ID `0x81`: "Assign Selection"
    AssignSelection,
    /// Usage ID `0x82`: "Mode Step"
    ModeStep,
    /// Usage ID `0x83`: "Recall Last"
    RecallLast,
    /// Usage ID `0x84`: "Enter Channel"
    EnterChannel,
    /// Usage ID `0x85`: "Order Movie"
    OrderMovie,
    /// Usage ID `0x86`: "Channel"
    Channel,
    /// Usage ID `0x87`: "Media Selection"
    MediaSelection,
    /// Usage ID `0x88`: "Media Select Computer"
    MediaSelectComputer,
    /// Usage ID `0x89`: "Media Select TV"
    MediaSelectTV,
    /// Usage ID `0x8A`: "Media Select WWW"
    MediaSelectWWW,
    /// Usage ID `0x8B`: "Media Select DVD"
    MediaSelectDVD,
    /// Usage ID `0x8C`: "Media Select Telephone"
    MediaSelectTelephone,
    /// Usage ID `0x8D`: "Media Select Program Guide"
    MediaSelectProgramGuide,
    /// Usage ID `0x8E`: "Media Select Video Phone"
    MediaSelectVideoPhone,
    /// Usage ID `0x8F`: "Media Select Games"
    MediaSelectGames,
    /// Usage ID `0x90`: "Media Select Messages"
    MediaSelectMessages,
    /// Usage ID `0x91`: "Media Select CD"
    MediaSelectCD,
    /// Usage ID `0x92`: "Media Select VCR"
    MediaSelectVCR,
    /// Usage ID `0x93`: "Media Select Tuner"
    MediaSelectTuner,
    /// Usage ID `0x94`: "Quit"
    Quit,
    /// Usage ID `0x95`: "Help"
    Help,
    /// Usage ID `0x96`: "Media Select Tape"
    MediaSelectTape,
    /// Usage ID `0x97`: "Media Select Cable"
    MediaSelectCable,
    /// Usage ID `0x98`: "Media Select Satellite"
    MediaSelectSatellite,
    /// Usage ID `0x99`: "Media Select Security"
    MediaSelectSecurity,
    /// Usage ID `0x9A`: "Media Select Home"
    MediaSelectHome,
    /// Usage ID `0x9B`: "Media Select Call"
    MediaSelectCall,
    /// Usage ID `0x9C`: "Channel Increment"
    ChannelIncrement,
    /// Usage ID `0x9D`: "Channel Decrement"
    ChannelDecrement,
    /// Usage ID `0x9E`: "Media Select SAP"
    MediaSelectSAP,
    /// Usage ID `0xA0`: "VCR Plus"
    VCRPlus,
    /// Usage ID `0xA1`: "Once"
    Once,
    /// Usage ID `0xA2`: "Daily"
    Daily,
    /// Usage ID `0xA3`: "Weekly"
    Weekly,
    /// Usage ID `0xA4`: "Monthly"
    Monthly,
    /// Usage ID `0xB0`: "Play"
    Play,
    /// Usage ID `0xB1`: "Pause"
    Pause,
    /// Usage ID `0xB2`: "Record"
    Record,
    /// Usage ID `0xB3`: "Fast Forward"
    FastForward,
    /// Usage ID `0xB4`: "Rewind"
    Rewind,
    /// Usage ID `0xB5`: "Scan Next Track"
    ScanNextTrack,
    /// Usage ID `0xB6`: "Scan Previous Track"
    ScanPreviousTrack,
    /// Usage ID `0xB7`: "Stop"
    Stop,
    /// Usage ID `0xB8`: "Eject"
    Eject,
    /// Usage ID `0xB9`: "Random Play"
    RandomPlay,
    /// Usage ID `0xBA`: "Select Disc"
    SelectDisc,
    /// Usage ID `0xBB`: "Enter Disc"
    EnterDisc,
    /// Usage ID `0xBC`: "Repeat"
    Repeat,
    /// Usage ID `0xBD`: "Tracking"
    Tracking,
    /// Usage ID `0xBE`: "Track Normal"
    TrackNormal,
    /// Usage ID `0xBF`: "Slow Tracking"
    SlowTracking,
    /// Usage ID `0xC0`: "Frame Forward"
    FrameForward,
    /// Usage ID `0xC1`: "Frame Back"
    FrameBack,
    /// Usage ID `0xC2`: "Mark"
    Mark,
    /// Usage ID `0xC3`: "Clear Mark"
    ClearMark,
    /// Usage ID `0xC4`: "Repeat From Mark"
    RepeatFromMark,
    /// Usage ID `0xC5`: "Return To Mark"
    ReturnToMark,
    /// Usage ID `0xC6`: "Search Mark Forward"
    SearchMarkForward,
    /// Usage ID `0xC7`: "Search Mark Backwards"
    SearchMarkBackwards,
    /// Usage ID `0xC8`: "Counter Reset"
    CounterReset,
    /// Usage ID `0xC9`: "Show Counter"
    ShowCounter,
    /// Usage ID `0xCA`: "Tracking Increment"
    TrackingIncrement,
    /// Usage ID `0xCB`: "Tracking Decrement"
    TrackingDecrement,
    /// Usage ID `0xCC`: "Stop/Eject"
    StopEject,
    /// Usage ID `0xCD`: "Play/Pause"
    PlayPause,
    /// Usage ID `0xCE`: "Play/Skip"
    PlaySkip,
    /// Usage ID `0xCF`: "Voice Command"
    VoiceCommand,
    /// Usage ID `0xD0`: "Invoke Capture Interface"
    InvokeCaptureInterface,
    /// Usage ID `0xD1`: "Start or Stop Game Recording"
    StartorStopGameRecording,
    /// Usage ID `0xD2`: "Historical Game Capture"
    HistoricalGameCapture,
    /// Usage ID `0xD3`: "Capture Game Screenshot"
    CaptureGameScreenshot,
    /// Usage ID `0xD4`: "Show or Hide Recording Indicator"
    ShoworHideRecordingIndicator,
    /// Usage ID `0xD5`: "Start or Stop Microphone Capture"
    StartorStopMicrophoneCapture,
    /// Usage ID `0xD6`: "Start or Stop Camera Capture"
    StartorStopCameraCapture,
    /// Usage ID `0xD7`: "Start or Stop Game Broadcast"
    StartorStopGameBroadcast,
    /// Usage ID `0xD8`: "Start or Stop Voice Dictation Session"
    StartorStopVoiceDictationSession,
    /// Usage ID `0xD9`: "Invoke/Dismiss Emoji Picker"
    InvokeDismissEmojiPicker,
    /// Usage ID `0xE0`: "Volume"
    Volume,
    /// Usage ID `0xE1`: "Balance"
    Balance,
    /// Usage ID `0xE2`: "Mute"
    Mute,
    /// Usage ID `0xE3`: "Bass"
    Bass,
    /// Usage ID `0xE4`: "Treble"
    Treble,
    /// Usage ID `0xE5`: "Bass Boost"
    BassBoost,
    /// Usage ID `0xE6`: "Surround Mode"
    SurroundMode,
    /// Usage ID `0xE7`: "Loudness"
    Loudness,
    /// Usage ID `0xE8`: "MPX"
    MPX,
    /// Usage ID `0xE9`: "Volume Increment"
    VolumeIncrement,
    /// Usage ID `0xEA`: "Volume Decrement"
    VolumeDecrement,
    /// Usage ID `0xF0`: "Speed Select"
    SpeedSelect,
    /// Usage ID `0xF1`: "Playback Speed"
    PlaybackSpeed,
    /// Usage ID `0xF2`: "Standard Play"
    StandardPlay,
    /// Usage ID `0xF3`: "Long Play"
    LongPlay,
    /// Usage ID `0xF4`: "Extended Play"
    ExtendedPlay,
    /// Usage ID `0xF5`: "Slow"
    Slow,
    /// Usage ID `0x100`: "Fan Enable"
    FanEnable,
    /// Usage ID `0x101`: "Fan Speed"
    FanSpeed,
    /// Usage ID `0x102`: "Light Enable"
    LightEnable,
    /// Usage ID `0x103`: "Light Illumination Level"
    LightIlluminationLevel,
    /// Usage ID `0x104`: "Climate Control Enable"
    ClimateControlEnable,
    /// Usage ID `0x105`: "Room Temperature"
    RoomTemperature,
    /// Usage ID `0x106`: "Security Enable"
    SecurityEnable,
    /// Usage ID `0x107`: "Fire Alarm"
    FireAlarm,
    /// Usage ID `0x108`: "Police Alarm"
    PoliceAlarm,
    /// Usage ID `0x109`: "Proximity"
    Proximity,
    /// Usage ID `0x10A`: "Motion"
    Motion,
    /// Usage ID `0x10B`: "Duress Alarm"
    DuressAlarm,
    /// Usage ID `0x10C`: "Holdup Alarm"
    HoldupAlarm,
    /// Usage ID `0x10D`: "Medical Alarm"
    MedicalAlarm,
    /// Usage ID `0x150`: "Balance Right"
    BalanceRight,
    /// Usage ID `0x151`: "Balance Left"
    BalanceLeft,
    /// Usage ID `0x152`: "Bass Increment"
    BassIncrement,
    /// Usage ID `0x153`: "Bass Decrement"
    BassDecrement,
    /// Usage ID `0x154`: "Treble Increment"
    TrebleIncrement,
    /// Usage ID `0x155`: "Treble Decrement"
    TrebleDecrement,
    /// Usage ID `0x160`: "Speaker System"
    SpeakerSystem,
    /// Usage ID `0x161`: "Channel Left"
    ChannelLeft,
    /// Usage ID `0x162`: "Channel Right"
    ChannelRight,
    /// Usage ID `0x163`: "Channel Center"
    ChannelCenter,
    /// Usage ID `0x164`: "Channel Front"
    ChannelFront,
    /// Usage ID `0x165`: "Channel Center Front"
    ChannelCenterFront,
    /// Usage ID `0x166`: "Channel Side"
    ChannelSide,
    /// Usage ID `0x167`: "Channel Surround"
    ChannelSurround,
    /// Usage ID `0x168`: "Channel Low Frequency Enhancement"
    ChannelLowFrequencyEnhancement,
    /// Usage ID `0x169`: "Channel Top"
    ChannelTop,
    /// Usage ID `0x16A`: "Channel Unknown"
    ChannelUnknown,
    /// Usage ID `0x170`: "Sub-channel"
    Subchannel,
    /// Usage ID `0x171`: "Sub-channel Increment"
    SubchannelIncrement,
    /// Usage ID `0x172`: "Sub-channel Decrement"
    SubchannelDecrement,
    /// Usage ID `0x173`: "Alternate Audio Increment"
    AlternateAudioIncrement,
    /// Usage ID `0x174`: "Alternate Audio Decrement"
    AlternateAudioDecrement,
    /// Usage ID `0x180`: "Application Launch Buttons"
    ApplicationLaunchButtons,
    /// Usage ID `0x181`: "AL Launch Button Configuration Tool"
    ALLaunchButtonConfigurationTool,
    /// Usage ID `0x182`: "AL Programmable Button Configuration"
    ALProgrammableButtonConfiguration,
    /// Usage ID `0x183`: "AL Consumer Control Configuration"
    ALConsumerControlConfiguration,
    /// Usage ID `0x184`: "AL Word Processor"
    ALWordProcessor,
    /// Usage ID `0x185`: "AL Text Editor"
    ALTextEditor,
    /// Usage ID `0x186`: "AL Spreadsheet"
    ALSpreadsheet,
    /// Usage ID `0x187`: "AL Graphics Editor"
    ALGraphicsEditor,
    /// Usage ID `0x188`: "AL Presentation App"
    ALPresentationApp,
    /// Usage ID `0x189`: "AL Database App"
    ALDatabaseApp,
    /// Usage ID `0x18A`: "AL Email Reader"
    ALEmailReader,
    /// Usage ID `0x18B`: "AL Newsreader"
    ALNewsreader,
    /// Usage ID `0x18C`: "AL Voicemail"
    ALVoicemail,
    /// Usage ID `0x18D`: "AL Contacts/Address Book"
    ALContactsAddressBook,
    /// Usage ID `0x18E`: "AL Calendar/Schedule"
    ALCalendarSchedule,
    /// Usage ID `0x18F`: "AL Task/Project Manager"
    ALTaskProjectManager,
    /// Usage ID `0x190`: "AL Log/Journal/Timecard"
    ALLogJournalTimecard,
    /// Usage ID `0x191`: "AL Checkbook/Finance"
    ALCheckbookFinance,
    /// Usage ID `0x192`: "AL Calculator"
    ALCalculator,
    /// Usage ID `0x193`: "AL A/V Capture/Playback"
    ALAVCapturePlayback,
    /// Usage ID `0x194`: "AL Local Machine Browser"
    ALLocalMachineBrowser,
    /// Usage ID `0x195`: "AL LAN/WAN Browser"
    ALLANWANBrowser,
    /// Usage ID `0x196`: "AL Internet Browser"
    ALInternetBrowser,
    /// Usage ID `0x197`: "AL Remote Networking/ISP Connect"
    ALRemoteNetworkingISPConnect,
    /// Usage ID `0x198`: "AL Network Conference"
    ALNetworkConference,
    /// Usage ID `0x199`: "AL Network Chat"
    ALNetworkChat,
    /// Usage ID `0x19A`: "AL Telephony/Dialer"
    ALTelephonyDialer,
    /// Usage ID `0x19B`: "AL Logon"
    ALLogon,
    /// Usage ID `0x19C`: "AL Logoff"
    ALLogoff,
    /// Usage ID `0x19D`: "AL Logon/Logoff"
    ALLogonLogoff,
    /// Usage ID `0x19E`: "AL Terminal Lock/Screensaver"
    ALTerminalLockScreensaver,
    /// Usage ID `0x19F`: "AL Control Panel"
    ALControlPanel,
    /// Usage ID `0x1A0`: "AL Command Line Processor/Run"
    ALCommandLineProcessorRun,
    /// Usage ID `0x1A1`: "AL Process/Task Manager"
    ALProcessTaskManager,
    /// Usage ID `0x1A2`: "AL Select Task/Application"
    ALSelectTaskApplication,
    /// Usage ID `0x1A3`: "AL Next Task/Application"
    ALNextTaskApplication,
    /// Usage ID `0x1A4`: "AL Previous Task/Application"
    ALPreviousTaskApplication,
    /// Usage ID `0x1A5`: "AL Preemptive Halt Task/Application"
    ALPreemptiveHaltTaskApplication,
    /// Usage ID `0x1A6`: "AL Integrated Help Center"
    ALIntegratedHelpCenter,
    /// Usage ID `0x1A7`: "AL Documents"
    ALDocuments,
    /// Usage ID `0x1A8`: "AL Thesaurus"
    ALThesaurus,
    /// Usage ID `0x1A9`: "AL Dictionary"
    ALDictionary,
    /// Usage ID `0x1AA`: "AL Desktop"
    ALDesktop,
    /// Usage ID `0x1AB`: "AL Spell Check"
    ALSpellCheck,
    /// Usage ID `0x1AC`: "AL Grammar Check"
    ALGrammarCheck,
    /// Usage ID `0x1AD`: "AL Wireless Status"
    ALWirelessStatus,
    /// Usage ID `0x1AE`: "AL Keyboard Layout"
    ALKeyboardLayout,
    /// Usage ID `0x1AF`: "AL Virus Protection"
    ALVirusProtection,
    /// Usage ID `0x1B0`: "AL Encryption"
    ALEncryption,
    /// Usage ID `0x1B1`: "AL Screen Saver"
    ALScreenSaver,
    /// Usage ID `0x1B2`: "AL Alarms"
    ALAlarms,
    /// Usage ID `0x1B3`: "AL Clock"
    ALClock,
    /// Usage ID `0x1B4`: "AL File Browser"
    ALFileBrowser,
    /// Usage ID `0x1B5`: "AL Power Status"
    ALPowerStatus,
    /// Usage ID `0x1B6`: "AL Image Browser"
    ALImageBrowser,
    /// Usage ID `0x1B7`: "AL Audio Browser"
    ALAudioBrowser,
    /// Usage ID `0x1B8`: "AL Movie Browser"
    ALMovieBrowser,
    /// Usage ID `0x1B9`: "AL Digital Rights Manager"
    ALDigitalRightsManager,
    /// Usage ID `0x1BA`: "AL Digital Wallet"
    ALDigitalWallet,
    /// Usage ID `0x1BC`: "AL Instant Messaging"
    ALInstantMessaging,
    /// Usage ID `0x1BD`: "AL OEM Features/ Tips/Tutorial Browser"
    ALOEMFeaturesTipsTutorialBrowser,
    /// Usage ID `0x1BE`: "AL OEM Help"
    ALOEMHelp,
    /// Usage ID `0x1BF`: "AL Online Community"
    ALOnlineCommunity,
    /// Usage ID `0x1C0`: "AL Entertainment Content Browser"
    ALEntertainmentContentBrowser,
    /// Usage ID `0x1C1`: "AL Online Shopping Browser"
    ALOnlineShoppingBrowser,
    /// Usage ID `0x1C2`: "AL SmartCard Information/Help"
    ALSmartCardInformationHelp,
    /// Usage ID `0x1C3`: "AL Market Monitor/Finance Browser"
    ALMarketMonitorFinanceBrowser,
    /// Usage ID `0x1C4`: "AL Customized Corporate News Browser"
    ALCustomizedCorporateNewsBrowser,
    /// Usage ID `0x1C5`: "AL Online Activity Browser"
    ALOnlineActivityBrowser,
    /// Usage ID `0x1C6`: "AL Research/Search Browser"
    ALResearchSearchBrowser,
    /// Usage ID `0x1C7`: "AL Audio Player"
    ALAudioPlayer,
    /// Usage ID `0x1C8`: "AL Message Status"
    ALMessageStatus,
    /// Usage ID `0x1C9`: "AL Contact Sync"
    ALContactSync,
    /// Usage ID `0x1CA`: "AL Navigation"
    ALNavigation,
    /// Usage ID `0x1CB`: "AL Context‐aware Desktop Assistant"
    ALContextawareDesktopAssistant,
    /// Usage ID `0x200`: "Generic GUI Application Controls"
    GenericGUIApplicationControls,
    /// Usage ID `0x201`: "AC New"
    ACNew,
    /// Usage ID `0x202`: "AC Open"
    ACOpen,
    /// Usage ID `0x203`: "AC Close"
    ACClose,
    /// Usage ID `0x204`: "AC Exit"
    ACExit,
    /// Usage ID `0x205`: "AC Maximize"
    ACMaximize,
    /// Usage ID `0x206`: "AC Minimize"
    ACMinimize,
    /// Usage ID `0x207`: "AC Save"
    ACSave,
    /// Usage ID `0x208`: "AC Print"
    ACPrint,
    /// Usage ID `0x209`: "AC Properties"
    ACProperties,
    /// Usage ID `0x21A`: "AC Undo"
    ACUndo,
    /// Usage ID `0x21B`: "AC Copy"
    ACCopy,
    /// Usage ID `0x21C`: "AC Cut"
    ACCut,
    /// Usage ID `0x21D`: "AC Paste"
    ACPaste,
    /// Usage ID `0x21E`: "AC Select All"
    ACSelectAll,
    /// Usage ID `0x21F`: "AC Find"
    ACFind,
    /// Usage ID `0x220`: "AC Find and Replace"
    ACFindandReplace,
    /// Usage ID `0x221`: "AC Search"
    ACSearch,
    /// Usage ID `0x222`: "AC Go To"
    ACGoTo,
    /// Usage ID `0x223`: "AC Home"
    ACHome,
    /// Usage ID `0x224`: "AC Back"
    ACBack,
    /// Usage ID `0x225`: "AC Forward"
    ACForward,
    /// Usage ID `0x226`: "AC Stop"
    ACStop,
    /// Usage ID `0x227`: "AC Refresh"
    ACRefresh,
    /// Usage ID `0x228`: "AC Previous Link"
    ACPreviousLink,
    /// Usage ID `0x229`: "AC Next Link"
    ACNextLink,
    /// Usage ID `0x22A`: "AC Bookmarks"
    ACBookmarks,
    /// Usage ID `0x22B`: "AC History"
    ACHistory,
    /// Usage ID `0x22C`: "AC Subscriptions"
    ACSubscriptions,
    /// Usage ID `0x22D`: "AC Zoom In"
    ACZoomIn,
    /// Usage ID `0x22E`: "AC Zoom Out"
    ACZoomOut,
    /// Usage ID `0x22F`: "AC Zoom"
    ACZoom,
    /// Usage ID `0x230`: "AC Full Screen View"
    ACFullScreenView,
    /// Usage ID `0x231`: "AC Normal View"
    ACNormalView,
    /// Usage ID `0x232`: "AC View Toggle"
    ACViewToggle,
    /// Usage ID `0x233`: "AC Scroll Up"
    ACScrollUp,
    /// Usage ID `0x234`: "AC Scroll Down"
    ACScrollDown,
    /// Usage ID `0x235`: "AC Scroll"
    ACScroll,
    /// Usage ID `0x236`: "AC Pan Left"
    ACPanLeft,
    /// Usage ID `0x237`: "AC Pan Right"
    ACPanRight,
    /// Usage ID `0x238`: "AC Pan"
    ACPan,
    /// Usage ID `0x239`: "AC New Window"
    ACNewWindow,
    /// Usage ID `0x23A`: "AC Tile Horizontally"
    ACTileHorizontally,
    /// Usage ID `0x23B`: "AC Tile Vertically"
    ACTileVertically,
    /// Usage ID `0x23C`: "AC Format"
    ACFormat,
    /// Usage ID `0x23D`: "AC Edit"
    ACEdit,
    /// Usage ID `0x23E`: "AC Bold"
    ACBold,
    /// Usage ID `0x23F`: "AC Italics"
    ACItalics,
    /// Usage ID `0x240`: "AC Underline"
    ACUnderline,
    /// Usage ID `0x241`: "AC Strikethrough"
    ACStrikethrough,
    /// Usage ID `0x242`: "AC Subscript"
    ACSubscript,
    /// Usage ID `0x243`: "AC Superscript"
    ACSuperscript,
    /// Usage ID `0x244`: "AC All Caps"
    ACAllCaps,
    /// Usage ID `0x245`: "AC Rotate"
    ACRotate,
    /// Usage ID `0x246`: "AC Resize"
    ACResize,
    /// Usage ID `0x247`: "AC Flip Horizontal"
    ACFlipHorizontal,
    /// Usage ID `0x248`: "AC Flip Vertical"
    ACFlipVertical,
    /// Usage ID `0x249`: "AC Mirror Horizontal"
    ACMirrorHorizontal,
    /// Usage ID `0x24A`: "AC Mirror Vertical"
    ACMirrorVertical,
    /// Usage ID `0x24B`: "AC Font Select"
    ACFontSelect,
    /// Usage ID `0x24C`: "AC Font Color"
    ACFontColor,
    /// Usage ID `0x24D`: "AC Font Size"
    ACFontSize,
    /// Usage ID `0x24E`: "AC Justify Left"
    ACJustifyLeft,
    /// Usage ID `0x24F`: "AC Justify Center H"
    ACJustifyCenterH,
    /// Usage ID `0x250`: "AC Justify Right"
    ACJustifyRight,
    /// Usage ID `0x251`: "AC Justify Block H"
    ACJustifyBlockH,
    /// Usage ID `0x252`: "AC Justify Top"
    ACJustifyTop,
    /// Usage ID `0x253`: "AC Justify Center V"
    ACJustifyCenterV,
    /// Usage ID `0x254`: "AC Justify Bottom"
    ACJustifyBottom,
    /// Usage ID `0x255`: "AC Justify Block V"
    ACJustifyBlockV,
    /// Usage ID `0x256`: "AC Indent Decrease"
    ACIndentDecrease,
    /// Usage ID `0x257`: "AC Indent Increase"
    ACIndentIncrease,
    /// Usage ID `0x258`: "AC Numbered List"
    ACNumberedList,
    /// Usage ID `0x259`: "AC Restart Numbering"
    ACRestartNumbering,
    /// Usage ID `0x25A`: "AC Bulleted List"
    ACBulletedList,
    /// Usage ID `0x25B`: "AC Promote"
    ACPromote,
    /// Usage ID `0x25C`: "AC Demote"
    ACDemote,
    /// Usage ID `0x25D`: "AC Yes"
    ACYes,
    /// Usage ID `0x25E`: "AC No"
    ACNo,
    /// Usage ID `0x25F`: "AC Cancel"
    ACCancel,
    /// Usage ID `0x260`: "AC Catalog"
    ACCatalog,
    /// Usage ID `0x261`: "AC Buy/Checkout"
    ACBuyCheckout,
    /// Usage ID `0x262`: "AC Add to Cart"
    ACAddtoCart,
    /// Usage ID `0x263`: "AC Expand"
    ACExpand,
    /// Usage ID `0x264`: "AC Expand All"
    ACExpandAll,
    /// Usage ID `0x265`: "AC Collapse"
    ACCollapse,
    /// Usage ID `0x266`: "AC Collapse All"
    ACCollapseAll,
    /// Usage ID `0x267`: "AC Print Preview"
    ACPrintPreview,
    /// Usage ID `0x268`: "AC Paste Special"
    ACPasteSpecial,
    /// Usage ID `0x269`: "AC Insert Mode"
    ACInsertMode,
    /// Usage ID `0x26A`: "AC Delete"
    ACDelete,
    /// Usage ID `0x26B`: "AC Lock"
    ACLock,
    /// Usage ID `0x26C`: "AC Unlock"
    ACUnlock,
    /// Usage ID `0x26D`: "AC Protect"
    ACProtect,
    /// Usage ID `0x26E`: "AC Unprotect"
    ACUnprotect,
    /// Usage ID `0x26F`: "AC Attach Comment"
    ACAttachComment,
    /// Usage ID `0x270`: "AC Delete Comment"
    ACDeleteComment,
    /// Usage ID `0x271`: "AC View Comment"
    ACViewComment,
    /// Usage ID `0x272`: "AC Select Word"
    ACSelectWord,
    /// Usage ID `0x273`: "AC Select Sentence"
    ACSelectSentence,
    /// Usage ID `0x274`: "AC Select Paragraph"
    ACSelectParagraph,
    /// Usage ID `0x275`: "AC Select Column"
    ACSelectColumn,
    /// Usage ID `0x276`: "AC Select Row"
    ACSelectRow,
    /// Usage ID `0x277`: "AC Select Table"
    ACSelectTable,
    /// Usage ID `0x278`: "AC Select Object"
    ACSelectObject,
    /// Usage ID `0x279`: "AC Redo/Repeat"
    ACRedoRepeat,
    /// Usage ID `0x27A`: "AC Sort"
    ACSort,
    /// Usage ID `0x27B`: "AC Sort Ascending"
    ACSortAscending,
    /// Usage ID `0x27C`: "AC Sort Descending"
    ACSortDescending,
    /// Usage ID `0x27D`: "AC Filter"
    ACFilter,
    /// Usage ID `0x27E`: "AC Set Clock"
    ACSetClock,
    /// Usage ID `0x27F`: "AC View Clock"
    ACViewClock,
    /// Usage ID `0x280`: "AC Select Time Zone"
    ACSelectTimeZone,
    /// Usage ID `0x281`: "AC Edit Time Zones"
    ACEditTimeZones,
    /// Usage ID `0x282`: "AC Set Alarm"
    ACSetAlarm,
    /// Usage ID `0x283`: "AC Clear Alarm"
    ACClearAlarm,
    /// Usage ID `0x284`: "AC Snooze Alarm"
    ACSnoozeAlarm,
    /// Usage ID `0x285`: "AC Reset Alarm"
    ACResetAlarm,
    /// Usage ID `0x286`: "AC Synchronize"
    ACSynchronize,
    /// Usage ID `0x287`: "AC Send/Receive"
    ACSendReceive,
    /// Usage ID `0x288`: "AC Send To"
    ACSendTo,
    /// Usage ID `0x289`: "AC Reply"
    ACReply,
    /// Usage ID `0x28A`: "AC Reply All"
    ACReplyAll,
    /// Usage ID `0x28B`: "AC Forward Msg"
    ACForwardMsg,
    /// Usage ID `0x28C`: "AC Send"
    ACSend,
    /// Usage ID `0x28D`: "AC Attach File"
    ACAttachFile,
    /// Usage ID `0x28E`: "AC Upload"
    ACUpload,
    /// Usage ID `0x28F`: "AC Download (Save Target As)"
    ACDownloadSaveTargetAs,
    /// Usage ID `0x290`: "AC Set Borders"
    ACSetBorders,
    /// Usage ID `0x291`: "AC Insert Row"
    ACInsertRow,
    /// Usage ID `0x292`: "AC Insert Column"
    ACInsertColumn,
    /// Usage ID `0x293`: "AC Insert File"
    ACInsertFile,
    /// Usage ID `0x294`: "AC Insert Picture"
    ACInsertPicture,
    /// Usage ID `0x295`: "AC Insert Object"
    ACInsertObject,
    /// Usage ID `0x296`: "AC Insert Symbol"
    ACInsertSymbol,
    /// Usage ID `0x297`: "AC Save and Close"
    ACSaveandClose,
    /// Usage ID `0x298`: "AC Rename"
    ACRename,
    /// Usage ID `0x299`: "AC Merge"
    ACMerge,
    /// Usage ID `0x29A`: "AC Split"
    ACSplit,
    /// Usage ID `0x29B`: "AC Disribute Horizontally"
    ACDisributeHorizontally,
    /// Usage ID `0x29C`: "AC Distribute Vertically"
    ACDistributeVertically,
    /// Usage ID `0x29D`: "AC Next Keyboard Layout Select"
    ACNextKeyboardLayoutSelect,
    /// Usage ID `0x29E`: "AC Navigation Guidance"
    ACNavigationGuidance,
    /// Usage ID `0x29F`: "AC Desktop Show All Windows"
    ACDesktopShowAllWindows,
    /// Usage ID `0x2A0`: "AC Soft Key Left"
    ACSoftKeyLeft,
    /// Usage ID `0x2A1`: "AC Soft Key Right"
    ACSoftKeyRight,
    /// Usage ID `0x2A2`: "AC Desktop Show All Applications"
    ACDesktopShowAllApplications,
    /// Usage ID `0x2B0`: "AC Idle Keep Alive"
    ACIdleKeepAlive,
    /// Usage ID `0x2C0`: "Extended Keyboard Attributes Collection"
    ExtendedKeyboardAttributesCollection,
    /// Usage ID `0x2C1`: "Keyboard Form Factor"
    KeyboardFormFactor,
    /// Usage ID `0x2C2`: "Keyboard Key Type"
    KeyboardKeyType,
    /// Usage ID `0x2C3`: "Keyboard Physical Layout"
    KeyboardPhysicalLayout,
    /// Usage ID `0x2C4`: "Vendor‐Specific Keyboard Physical Layout"
    VendorSpecificKeyboardPhysicalLayout,
    /// Usage ID `0x2C5`: "Keyboard IETF Language Tag Index"
    KeyboardIETFLanguageTagIndex,
    /// Usage ID `0x2C6`: "Implemented Keyboard Input Assist Controls"
    ImplementedKeyboardInputAssistControls,
    /// Usage ID `0x2C7`: "Keyboard Input Assist Previous"
    KeyboardInputAssistPrevious,
    /// Usage ID `0x2C8`: "Keyboard Input Assist Next"
    KeyboardInputAssistNext,
    /// Usage ID `0x2C9`: "Keyboard Input Assist Previous Group"
    KeyboardInputAssistPreviousGroup,
    /// Usage ID `0x2CA`: "Keyboard Input Assist Next Group"
    KeyboardInputAssistNextGroup,
    /// Usage ID `0x2CB`: "Keyboard Input Assist Accept"
    KeyboardInputAssistAccept,
    /// Usage ID `0x2CC`: "Keyboard Input Assist Cancel"
    KeyboardInputAssistCancel,
    /// Usage ID `0x2D0`: "Privacy Screen Toggle"
    PrivacyScreenToggle,
    /// Usage ID `0x2D1`: "Privacy Screen Level Decrement"
    PrivacyScreenLevelDecrement,
    /// Usage ID `0x2D2`: "Privacy Screen Level Increment"
    PrivacyScreenLevelIncrement,
    /// Usage ID `0x2D3`: "Privacy Screen Level Minimum"
    PrivacyScreenLevelMinimum,
    /// Usage ID `0x2D4`: "Privacy Screen Level Maximum"
    PrivacyScreenLevelMaximum,
    /// Usage ID `0x500`: "Contact Edited"
    ContactEdited,
    /// Usage ID `0x501`: "Contact Added"
    ContactAdded,
    /// Usage ID `0x502`: "Contact Record Active"
    ContactRecordActive,
    /// Usage ID `0x503`: "Contact Index"
    ContactIndex,
    /// Usage ID `0x504`: "Contact Nickname"
    ContactNickname,
    /// Usage ID `0x505`: "Contact First Name"
    ContactFirstName,
    /// Usage ID `0x506`: "Contact Last Name"
    ContactLastName,
    /// Usage ID `0x507`: "Contact Full Name"
    ContactFullName,
    /// Usage ID `0x508`: "Contact Phone Number Personal"
    ContactPhoneNumberPersonal,
    /// Usage ID `0x509`: "Contact Phone Number Business"
    ContactPhoneNumberBusiness,
    /// Usage ID `0x50A`: "Contact Phone Number Mobile"
    ContactPhoneNumberMobile,
    /// Usage ID `0x50B`: "Contact Phone Number Pager"
    ContactPhoneNumberPager,
    /// Usage ID `0x50C`: "Contact Phone Number Fax"
    ContactPhoneNumberFax,
    /// Usage ID `0x50D`: "Contact Phone Number Other"
    ContactPhoneNumberOther,
    /// Usage ID `0x50E`: "Contact Email Personal"
    ContactEmailPersonal,
    /// Usage ID `0x50F`: "Contact Email Business"
    ContactEmailBusiness,
    /// Usage ID `0x510`: "Contact Email Other"
    ContactEmailOther,
    /// Usage ID `0x511`: "Contact Email Main"
    ContactEmailMain,
    /// Usage ID `0x512`: "Contact Speed Dial Number"
    ContactSpeedDialNumber,
    /// Usage ID `0x513`: "Contact Status Flag"
    ContactStatusFlag,
    /// Usage ID `0x514`: "Contact Misc."
    ContactMisc,
}

impl fmt::Display for Consumer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Consumer::ConsumerControl => "Consumer Control",
            Consumer::NumericKeyPad => "Numeric Key Pad",
            Consumer::ProgrammableButtons => "Programmable Buttons",
            Consumer::Microphone => "Microphone",
            Consumer::Headphone => "Headphone",
            Consumer::GraphicEqualizer => "Graphic Equalizer",
            Consumer::Plus10 => "+10",
            Consumer::Plus100 => "+100",
            Consumer::AMPM => "AM/PM",
            Consumer::Power => "Power",
            Consumer::Reset => "Reset",
            Consumer::Sleep => "Sleep",
            Consumer::SleepAfter => "Sleep After",
            Consumer::SleepMode => "Sleep Mode",
            Consumer::Illumination => "Illumination",
            Consumer::FunctionButtons => "Function Buttons",
            Consumer::Menu => "Menu",
            Consumer::MenuPick => "Menu Pick",
            Consumer::MenuUp => "Menu Up",
            Consumer::MenuDown => "Menu Down",
            Consumer::MenuLeft => "Menu Left",
            Consumer::MenuRight => "Menu Right",
            Consumer::MenuEscape => "Menu Escape",
            Consumer::MenuValueIncrease => "Menu Value Increase",
            Consumer::MenuValueDecrease => "Menu Value Decrease",
            Consumer::DataOnScreen => "Data On Screen",
            Consumer::ClosedCaption => "Closed Caption",
            Consumer::ClosedCaptionSelect => "Closed Caption Select",
            Consumer::VCRTV => "VCR/TV",
            Consumer::BroadcastMode => "Broadcast Mode",
            Consumer::Snapshot => "Snapshot",
            Consumer::Still => "Still",
            Consumer::PictureinPictureToggle => "Picture-in-Picture Toggle",
            Consumer::PictureinPictureSwap => "Picture-in-Picture Swap",
            Consumer::RedMenuButton => "Red Menu Button",
            Consumer::GreenMenuButton => "Green Menu Button",
            Consumer::BlueMenuButton => "Blue Menu Button",
            Consumer::YellowMenuButton => "Yellow Menu Button",
            Consumer::Aspect => "Aspect",
            Consumer::ThreeDModeSelect => "3D Mode Select",
            Consumer::DisplayBrightnessIncrement => "Display Brightness Increment",
            Consumer::DisplayBrightnessDecrement => "Display Brightness Decrement",
            Consumer::DisplayBrightness => "Display Brightness",
            Consumer::DisplayBacklightToggle => "Display Backlight Toggle",
            Consumer::DisplaySetBrightnesstoMinimum => "Display Set Brightness to Minimum",
            Consumer::DisplaySetBrightnesstoMaximum => "Display Set Brightness to Maximum",
            Consumer::DisplaySetAutoBrightness => "Display Set Auto Brightness",
            Consumer::CameraAccessEnabled => "Camera Access Enabled",
            Consumer::CameraAccessDisabled => "Camera Access Disabled",
            Consumer::CameraAccessToggle => "Camera Access Toggle",
            Consumer::KeyboardBrightnessIncrement => "Keyboard Brightness Increment",
            Consumer::KeyboardBrightnessDecrement => "Keyboard Brightness Decrement",
            Consumer::KeyboardBacklightSetLevel => "Keyboard Backlight Set Level",
            Consumer::KeyboardBacklightOOC => "Keyboard Backlight OOC",
            Consumer::KeyboardBacklightSetMinimum => "Keyboard Backlight Set Minimum",
            Consumer::KeyboardBacklightSetMaximum => "Keyboard Backlight Set Maximum",
            Consumer::KeyboardBacklightAuto => "Keyboard Backlight Auto",
            Consumer::Selection => "Selection",
            Consumer::AssignSelection => "Assign Selection",
            Consumer::ModeStep => "Mode Step",
            Consumer::RecallLast => "Recall Last",
            Consumer::EnterChannel => "Enter Channel",
            Consumer::OrderMovie => "Order Movie",
            Consumer::Channel => "Channel",
            Consumer::MediaSelection => "Media Selection",
            Consumer::MediaSelectComputer => "Media Select Computer",
            Consumer::MediaSelectTV => "Media Select TV",
            Consumer::MediaSelectWWW => "Media Select WWW",
            Consumer::MediaSelectDVD => "Media Select DVD",
            Consumer::MediaSelectTelephone => "Media Select Telephone",
            Consumer::MediaSelectProgramGuide => "Media Select Program Guide",
            Consumer::MediaSelectVideoPhone => "Media Select Video Phone",
            Consumer::MediaSelectGames => "Media Select Games",
            Consumer::MediaSelectMessages => "Media Select Messages",
            Consumer::MediaSelectCD => "Media Select CD",
            Consumer::MediaSelectVCR => "Media Select VCR",
            Consumer::MediaSelectTuner => "Media Select Tuner",
            Consumer::Quit => "Quit",
            Consumer::Help => "Help",
            Consumer::MediaSelectTape => "Media Select Tape",
            Consumer::MediaSelectCable => "Media Select Cable",
            Consumer::MediaSelectSatellite => "Media Select Satellite",
            Consumer::MediaSelectSecurity => "Media Select Security",
            Consumer::MediaSelectHome => "Media Select Home",
            Consumer::MediaSelectCall => "Media Select Call",
            Consumer::ChannelIncrement => "Channel Increment",
            Consumer::ChannelDecrement => "Channel Decrement",
            Consumer::MediaSelectSAP => "Media Select SAP",
            Consumer::VCRPlus => "VCR Plus",
            Consumer::Once => "Once",
            Consumer::Daily => "Daily",
            Consumer::Weekly => "Weekly",
            Consumer::Monthly => "Monthly",
            Consumer::Play => "Play",
            Consumer::Pause => "Pause",
            Consumer::Record => "Record",
            Consumer::FastForward => "Fast Forward",
            Consumer::Rewind => "Rewind",
            Consumer::ScanNextTrack => "Scan Next Track",
            Consumer::ScanPreviousTrack => "Scan Previous Track",
            Consumer::Stop => "Stop",
            Consumer::Eject => "Eject",
            Consumer::RandomPlay => "Random Play",
            Consumer::SelectDisc => "Select Disc",
            Consumer::EnterDisc => "Enter Disc",
            Consumer::Repeat => "Repeat",
            Consumer::Tracking => "Tracking",
            Consumer::TrackNormal => "Track Normal",
            Consumer::SlowTracking => "Slow Tracking",
            Consumer::FrameForward => "Frame Forward",
            Consumer::FrameBack => "Frame Back",
            Consumer::Mark => "Mark",
            Consumer::ClearMark => "Clear Mark",
            Consumer::RepeatFromMark => "Repeat From Mark",
            Consumer::ReturnToMark => "Return To Mark",
            Consumer::SearchMarkForward => "Search Mark Forward",
            Consumer::SearchMarkBackwards => "Search Mark Backwards",
            Consumer::CounterReset => "Counter Reset",
            Consumer::ShowCounter => "Show Counter",
            Consumer::TrackingIncrement => "Tracking Increment",
            Consumer::TrackingDecrement => "Tracking Decrement",
            Consumer::StopEject => "Stop/Eject",
            Consumer::PlayPause => "Play/Pause",
            Consumer::PlaySkip => "Play/Skip",
            Consumer::VoiceCommand => "Voice Command",
            Consumer::InvokeCaptureInterface => "Invoke Capture Interface",
            Consumer::StartorStopGameRecording => "Start or Stop Game Recording",
            Consumer::HistoricalGameCapture => "Historical Game Capture",
            Consumer::CaptureGameScreenshot => "Capture Game Screenshot",
            Consumer::ShoworHideRecordingIndicator => "Show or Hide Recording Indicator",
            Consumer::StartorStopMicrophoneCapture => "Start or Stop Microphone Capture",
            Consumer::StartorStopCameraCapture => "Start or Stop Camera Capture",
            Consumer::StartorStopGameBroadcast => "Start or Stop Game Broadcast",
            Consumer::StartorStopVoiceDictationSession => "Start or Stop Voice Dictation Session",
            Consumer::InvokeDismissEmojiPicker => "Invoke/Dismiss Emoji Picker",
            Consumer::Volume => "Volume",
            Consumer::Balance => "Balance",
            Consumer::Mute => "Mute",
            Consumer::Bass => "Bass",
            Consumer::Treble => "Treble",
            Consumer::BassBoost => "Bass Boost",
            Consumer::SurroundMode => "Surround Mode",
            Consumer::Loudness => "Loudness",
            Consumer::MPX => "MPX",
            Consumer::VolumeIncrement => "Volume Increment",
            Consumer::VolumeDecrement => "Volume Decrement",
            Consumer::SpeedSelect => "Speed Select",
            Consumer::PlaybackSpeed => "Playback Speed",
            Consumer::StandardPlay => "Standard Play",
            Consumer::LongPlay => "Long Play",
            Consumer::ExtendedPlay => "Extended Play",
            Consumer::Slow => "Slow",
            Consumer::FanEnable => "Fan Enable",
            Consumer::FanSpeed => "Fan Speed",
            Consumer::LightEnable => "Light Enable",
            Consumer::LightIlluminationLevel => "Light Illumination Level",
            Consumer::ClimateControlEnable => "Climate Control Enable",
            Consumer::RoomTemperature => "Room Temperature",
            Consumer::SecurityEnable => "Security Enable",
            Consumer::FireAlarm => "Fire Alarm",
            Consumer::PoliceAlarm => "Police Alarm",
            Consumer::Proximity => "Proximity",
            Consumer::Motion => "Motion",
            Consumer::DuressAlarm => "Duress Alarm",
            Consumer::HoldupAlarm => "Holdup Alarm",
            Consumer::MedicalAlarm => "Medical Alarm",
            Consumer::BalanceRight => "Balance Right",
            Consumer::BalanceLeft => "Balance Left",
            Consumer::BassIncrement => "Bass Increment",
            Consumer::BassDecrement => "Bass Decrement",
            Consumer::TrebleIncrement => "Treble Increment",
            Consumer::TrebleDecrement => "Treble Decrement",
            Consumer::SpeakerSystem => "Speaker System",
            Consumer::ChannelLeft => "Channel Left",
            Consumer::ChannelRight => "Channel Right",
            Consumer::ChannelCenter => "Channel Center",
            Consumer::ChannelFront => "Channel Front",
            Consumer::ChannelCenterFront => "Channel Center Front",
            Consumer::ChannelSide => "Channel Side",
            Consumer::ChannelSurround => "Channel Surround",
            Consumer::ChannelLowFrequencyEnhancement => "Channel Low Frequency Enhancement",
            Consumer::ChannelTop => "Channel Top",
            Consumer::ChannelUnknown => "Channel Unknown",
            Consumer::Subchannel => "Sub-channel",
            Consumer::SubchannelIncrement => "Sub-channel Increment",
            Consumer::SubchannelDecrement => "Sub-channel Decrement",
            Consumer::AlternateAudioIncrement => "Alternate Audio Increment",
            Consumer::AlternateAudioDecrement => "Alternate Audio Decrement",
            Consumer::ApplicationLaunchButtons => "Application Launch Buttons",
            Consumer::ALLaunchButtonConfigurationTool => "AL Launch Button Configuration Tool",
            Consumer::ALProgrammableButtonConfiguration => "AL Programmable Button Configuration",
            Consumer::ALConsumerControlConfiguration => "AL Consumer Control Configuration",
            Consumer::ALWordProcessor => "AL Word Processor",
            Consumer::ALTextEditor => "AL Text Editor",
            Consumer::ALSpreadsheet => "AL Spreadsheet",
            Consumer::ALGraphicsEditor => "AL Graphics Editor",
            Consumer::ALPresentationApp => "AL Presentation App",
            Consumer::ALDatabaseApp => "AL Database App",
            Consumer::ALEmailReader => "AL Email Reader",
            Consumer::ALNewsreader => "AL Newsreader",
            Consumer::ALVoicemail => "AL Voicemail",
            Consumer::ALContactsAddressBook => "AL Contacts/Address Book",
            Consumer::ALCalendarSchedule => "AL Calendar/Schedule",
            Consumer::ALTaskProjectManager => "AL Task/Project Manager",
            Consumer::ALLogJournalTimecard => "AL Log/Journal/Timecard",
            Consumer::ALCheckbookFinance => "AL Checkbook/Finance",
            Consumer::ALCalculator => "AL Calculator",
            Consumer::ALAVCapturePlayback => "AL A/V Capture/Playback",
            Consumer::ALLocalMachineBrowser => "AL Local Machine Browser",
            Consumer::ALLANWANBrowser => "AL LAN/WAN Browser",
            Consumer::ALInternetBrowser => "AL Internet Browser",
            Consumer::ALRemoteNetworkingISPConnect => "AL Remote Networking/ISP Connect",
            Consumer::ALNetworkConference => "AL Network Conference",
            Consumer::ALNetworkChat => "AL Network Chat",
            Consumer::ALTelephonyDialer => "AL Telephony/Dialer",
            Consumer::ALLogon => "AL Logon",
            Consumer::ALLogoff => "AL Logoff",
            Consumer::ALLogonLogoff => "AL Logon/Logoff",
            Consumer::ALTerminalLockScreensaver => "AL Terminal Lock/Screensaver",
            Consumer::ALControlPanel => "AL Control Panel",
            Consumer::ALCommandLineProcessorRun => "AL Command Line Processor/Run",
            Consumer::ALProcessTaskManager => "AL Process/Task Manager",
            Consumer::ALSelectTaskApplication => "AL Select Task/Application",
            Consumer::ALNextTaskApplication => "AL Next Task/Application",
            Consumer::ALPreviousTaskApplication => "AL Previous Task/Application",
            Consumer::ALPreemptiveHaltTaskApplication => "AL Preemptive Halt Task/Application",
            Consumer::ALIntegratedHelpCenter => "AL Integrated Help Center",
            Consumer::ALDocuments => "AL Documents",
            Consumer::ALThesaurus => "AL Thesaurus",
            Consumer::ALDictionary => "AL Dictionary",
            Consumer::ALDesktop => "AL Desktop",
            Consumer::ALSpellCheck => "AL Spell Check",
            Consumer::ALGrammarCheck => "AL Grammar Check",
            Consumer::ALWirelessStatus => "AL Wireless Status",
            Consumer::ALKeyboardLayout => "AL Keyboard Layout",
            Consumer::ALVirusProtection => "AL Virus Protection",
            Consumer::ALEncryption => "AL Encryption",
            Consumer::ALScreenSaver => "AL Screen Saver",
            Consumer::ALAlarms => "AL Alarms",
            Consumer::ALClock => "AL Clock",
            Consumer::ALFileBrowser => "AL File Browser",
            Consumer::ALPowerStatus => "AL Power Status",
            Consumer::ALImageBrowser => "AL Image Browser",
            Consumer::ALAudioBrowser => "AL Audio Browser",
            Consumer::ALMovieBrowser => "AL Movie Browser",
            Consumer::ALDigitalRightsManager => "AL Digital Rights Manager",
            Consumer::ALDigitalWallet => "AL Digital Wallet",
            Consumer::ALInstantMessaging => "AL Instant Messaging",
            Consumer::ALOEMFeaturesTipsTutorialBrowser => "AL OEM Features/ Tips/Tutorial Browser",
            Consumer::ALOEMHelp => "AL OEM Help",
            Consumer::ALOnlineCommunity => "AL Online Community",
            Consumer::ALEntertainmentContentBrowser => "AL Entertainment Content Browser",
            Consumer::ALOnlineShoppingBrowser => "AL Online Shopping Browser",
            Consumer::ALSmartCardInformationHelp => "AL SmartCard Information/Help",
            Consumer::ALMarketMonitorFinanceBrowser => "AL Market Monitor/Finance Browser",
            Consumer::ALCustomizedCorporateNewsBrowser => "AL Customized Corporate News Browser",
            Consumer::ALOnlineActivityBrowser => "AL Online Activity Browser",
            Consumer::ALResearchSearchBrowser => "AL Research/Search Browser",
            Consumer::ALAudioPlayer => "AL Audio Player",
            Consumer::ALMessageStatus => "AL Message Status",
            Consumer::ALContactSync => "AL Contact Sync",
            Consumer::ALNavigation => "AL Navigation",
            Consumer::ALContextawareDesktopAssistant => "AL Context‐aware Desktop Assistant",
            Consumer::GenericGUIApplicationControls => "Generic GUI Application Controls",
            Consumer::ACNew => "AC New",
            Consumer::ACOpen => "AC Open",
            Consumer::ACClose => "AC Close",
            Consumer::ACExit => "AC Exit",
            Consumer::ACMaximize => "AC Maximize",
            Consumer::ACMinimize => "AC Minimize",
            Consumer::ACSave => "AC Save",
            Consumer::ACPrint => "AC Print",
            Consumer::ACProperties => "AC Properties",
            Consumer::ACUndo => "AC Undo",
            Consumer::ACCopy => "AC Copy",
            Consumer::ACCut => "AC Cut",
            Consumer::ACPaste => "AC Paste",
            Consumer::ACSelectAll => "AC Select All",
            Consumer::ACFind => "AC Find",
            Consumer::ACFindandReplace => "AC Find and Replace",
            Consumer::ACSearch => "AC Search",
            Consumer::ACGoTo => "AC Go To",
            Consumer::ACHome => "AC Home",
            Consumer::ACBack => "AC Back",
            Consumer::ACForward => "AC Forward",
            Consumer::ACStop => "AC Stop",
            Consumer::ACRefresh => "AC Refresh",
            Consumer::ACPreviousLink => "AC Previous Link",
            Consumer::ACNextLink => "AC Next Link",
            Consumer::ACBookmarks => "AC Bookmarks",
            Consumer::ACHistory => "AC History",
            Consumer::ACSubscriptions => "AC Subscriptions",
            Consumer::ACZoomIn => "AC Zoom In",
            Consumer::ACZoomOut => "AC Zoom Out",
            Consumer::ACZoom => "AC Zoom",
            Consumer::ACFullScreenView => "AC Full Screen View",
            Consumer::ACNormalView => "AC Normal View",
            Consumer::ACViewToggle => "AC View Toggle",
            Consumer::ACScrollUp => "AC Scroll Up",
            Consumer::ACScrollDown => "AC Scroll Down",
            Consumer::ACScroll => "AC Scroll",
            Consumer::ACPanLeft => "AC Pan Left",
            Consumer::ACPanRight => "AC Pan Right",
            Consumer::ACPan => "AC Pan",
            Consumer::ACNewWindow => "AC New Window",
            Consumer::ACTileHorizontally => "AC Tile Horizontally",
            Consumer::ACTileVertically => "AC Tile Vertically",
            Consumer::ACFormat => "AC Format",
            Consumer::ACEdit => "AC Edit",
            Consumer::ACBold => "AC Bold",
            Consumer::ACItalics => "AC Italics",
            Consumer::ACUnderline => "AC Underline",
            Consumer::ACStrikethrough => "AC Strikethrough",
            Consumer::ACSubscript => "AC Subscript",
            Consumer::ACSuperscript => "AC Superscript",
            Consumer::ACAllCaps => "AC All Caps",
            Consumer::ACRotate => "AC Rotate",
            Consumer::ACResize => "AC Resize",
            Consumer::ACFlipHorizontal => "AC Flip Horizontal",
            Consumer::ACFlipVertical => "AC Flip Vertical",
            Consumer::ACMirrorHorizontal => "AC Mirror Horizontal",
            Consumer::ACMirrorVertical => "AC Mirror Vertical",
            Consumer::ACFontSelect => "AC Font Select",
            Consumer::ACFontColor => "AC Font Color",
            Consumer::ACFontSize => "AC Font Size",
            Consumer::ACJustifyLeft => "AC Justify Left",
            Consumer::ACJustifyCenterH => "AC Justify Center H",
            Consumer::ACJustifyRight => "AC Justify Right",
            Consumer::ACJustifyBlockH => "AC Justify Block H",
            Consumer::ACJustifyTop => "AC Justify Top",
            Consumer::ACJustifyCenterV => "AC Justify Center V",
            Consumer::ACJustifyBottom => "AC Justify Bottom",
            Consumer::ACJustifyBlockV => "AC Justify Block V",
            Consumer::ACIndentDecrease => "AC Indent Decrease",
            Consumer::ACIndentIncrease => "AC Indent Increase",
            Consumer::ACNumberedList => "AC Numbered List",
            Consumer::ACRestartNumbering => "AC Restart Numbering",
            Consumer::ACBulletedList => "AC Bulleted List",
            Consumer::ACPromote => "AC Promote",
            Consumer::ACDemote => "AC Demote",
            Consumer::ACYes => "AC Yes",
            Consumer::ACNo => "AC No",
            Consumer::ACCancel => "AC Cancel",
            Consumer::ACCatalog => "AC Catalog",
            Consumer::ACBuyCheckout => "AC Buy/Checkout",
            Consumer::ACAddtoCart => "AC Add to Cart",
            Consumer::ACExpand => "AC Expand",
            Consumer::ACExpandAll => "AC Expand All",
            Consumer::ACCollapse => "AC Collapse",
            Consumer::ACCollapseAll => "AC Collapse All",
            Consumer::ACPrintPreview => "AC Print Preview",
            Consumer::ACPasteSpecial => "AC Paste Special",
            Consumer::ACInsertMode => "AC Insert Mode",
            Consumer::ACDelete => "AC Delete",
            Consumer::ACLock => "AC Lock",
            Consumer::ACUnlock => "AC Unlock",
            Consumer::ACProtect => "AC Protect",
            Consumer::ACUnprotect => "AC Unprotect",
            Consumer::ACAttachComment => "AC Attach Comment",
            Consumer::ACDeleteComment => "AC Delete Comment",
            Consumer::ACViewComment => "AC View Comment",
            Consumer::ACSelectWord => "AC Select Word",
            Consumer::ACSelectSentence => "AC Select Sentence",
            Consumer::ACSelectParagraph => "AC Select Paragraph",
            Consumer::ACSelectColumn => "AC Select Column",
            Consumer::ACSelectRow => "AC Select Row",
            Consumer::ACSelectTable => "AC Select Table",
            Consumer::ACSelectObject => "AC Select Object",
            Consumer::ACRedoRepeat => "AC Redo/Repeat",
            Consumer::ACSort => "AC Sort",
            Consumer::ACSortAscending => "AC Sort Ascending",
            Consumer::ACSortDescending => "AC Sort Descending",
            Consumer::ACFilter => "AC Filter",
            Consumer::ACSetClock => "AC Set Clock",
            Consumer::ACViewClock => "AC View Clock",
            Consumer::ACSelectTimeZone => "AC Select Time Zone",
            Consumer::ACEditTimeZones => "AC Edit Time Zones",
            Consumer::ACSetAlarm => "AC Set Alarm",
            Consumer::ACClearAlarm => "AC Clear Alarm",
            Consumer::ACSnoozeAlarm => "AC Snooze Alarm",
            Consumer::ACResetAlarm => "AC Reset Alarm",
            Consumer::ACSynchronize => "AC Synchronize",
            Consumer::ACSendReceive => "AC Send/Receive",
            Consumer::ACSendTo => "AC Send To",
            Consumer::ACReply => "AC Reply",
            Consumer::ACReplyAll => "AC Reply All",
            Consumer::ACForwardMsg => "AC Forward Msg",
            Consumer::ACSend => "AC Send",
            Consumer::ACAttachFile => "AC Attach File",
            Consumer::ACUpload => "AC Upload",
            Consumer::ACDownloadSaveTargetAs => "AC Download (Save Target As)",
            Consumer::ACSetBorders => "AC Set Borders",
            Consumer::ACInsertRow => "AC Insert Row",
            Consumer::ACInsertColumn => "AC Insert Column",
            Consumer::ACInsertFile => "AC Insert File",
            Consumer::ACInsertPicture => "AC Insert Picture",
            Consumer::ACInsertObject => "AC Insert Object",
            Consumer::ACInsertSymbol => "AC Insert Symbol",
            Consumer::ACSaveandClose => "AC Save and Close",
            Consumer::ACRename => "AC Rename",
            Consumer::ACMerge => "AC Merge",
            Consumer::ACSplit => "AC Split",
            Consumer::ACDisributeHorizontally => "AC Disribute Horizontally",
            Consumer::ACDistributeVertically => "AC Distribute Vertically",
            Consumer::ACNextKeyboardLayoutSelect => "AC Next Keyboard Layout Select",
            Consumer::ACNavigationGuidance => "AC Navigation Guidance",
            Consumer::ACDesktopShowAllWindows => "AC Desktop Show All Windows",
            Consumer::ACSoftKeyLeft => "AC Soft Key Left",
            Consumer::ACSoftKeyRight => "AC Soft Key Right",
            Consumer::ACDesktopShowAllApplications => "AC Desktop Show All Applications",
            Consumer::ACIdleKeepAlive => "AC Idle Keep Alive",
            Consumer::ExtendedKeyboardAttributesCollection => "Extended Keyboard Attributes Collection",
            Consumer::KeyboardFormFactor => "Keyboard Form Factor",
            Consumer::KeyboardKeyType => "Keyboard Key Type",
            Consumer::KeyboardPhysicalLayout => "Keyboard Physical Layout",
            Consumer::VendorSpecificKeyboardPhysicalLayout => "Vendor‐Specific Keyboard Physical Layout",
            Consumer::KeyboardIETFLanguageTagIndex => "Keyboard IETF Language Tag Index",
            Consumer::ImplementedKeyboardInputAssistControls => "Implemented Keyboard Input Assist Controls",
            Consumer::KeyboardInputAssistPrevious => "Keyboard Input Assist Previous",
            Consumer::KeyboardInputAssistNext => "Keyboard Input Assist Next",
            Consumer::KeyboardInputAssistPreviousGroup => "Keyboard Input Assist Previous Group",
            Consumer::KeyboardInputAssistNextGroup => "Keyboard Input Assist Next Group",
            Consumer::KeyboardInputAssistAccept => "Keyboard Input Assist Accept",
            Consumer::KeyboardInputAssistCancel => "Keyboard Input Assist Cancel",
            Consumer::PrivacyScreenToggle => "Privacy Screen Toggle",
            Consumer::PrivacyScreenLevelDecrement => "Privacy Screen Level Decrement",
            Consumer::PrivacyScreenLevelIncrement => "Privacy Screen Level Increment",
            Consumer::PrivacyScreenLevelMinimum => "Privacy Screen Level Minimum",
            Consumer::PrivacyScreenLevelMaximum => "Privacy Screen Level Maximum",
            Consumer::ContactEdited => "Contact Edited",
            Consumer::ContactAdded => "Contact Added",
            Consumer::ContactRecordActive => "Contact Record Active",
            Consumer::ContactIndex => "Contact Index",
            Consumer::ContactNickname => "Contact Nickname",
            Consumer::ContactFirstName => "Contact First Name",
            Consumer::ContactLastName => "Contact Last Name",
            Consumer::ContactFullName => "Contact Full Name",
            Consumer::ContactPhoneNumberPersonal => "Contact Phone Number Personal",
            Consumer::ContactPhoneNumberBusiness => "Contact Phone Number Business",
            Consumer::ContactPhoneNumberMobile => "Contact Phone Number Mobile",
            Consumer::ContactPhoneNumberPager => "Contact Phone Number Pager",
            Consumer::ContactPhoneNumberFax => "Contact Phone Number Fax",
            Consumer::ContactPhoneNumberOther => "Contact Phone Number Other",
            Consumer::ContactEmailPersonal => "Contact Email Personal",
            Consumer::ContactEmailBusiness => "Contact Email Business",
            Consumer::ContactEmailOther => "Contact Email Other",
            Consumer::ContactEmailMain => "Contact Email Main",
            Consumer::ContactSpeedDialNumber => "Contact Speed Dial Number",
            Consumer::ContactStatusFlag => "Contact Status Flag",
            Consumer::ContactMisc => "Contact Misc.",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0xD`: "Digitizers"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::Digitizers { usage: Digitizers::Pen };
/// let u2 = Usage::new_from_page_and_id(0xD, 0x2).unwrap();
/// let u3 = Usage::from(Digitizers::Pen);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0xD, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0xD << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Digitizers {
    /// Usage ID `0x1`: "Digitizer"
    Digitizer,
    /// Usage ID `0x2`: "Pen"
    Pen,
    /// Usage ID `0x3`: "Light Pen"
    LightPen,
    /// Usage ID `0x4`: "Touch Screen"
    TouchScreen,
    /// Usage ID `0x5`: "Touch Pad"
    TouchPad,
    /// Usage ID `0x6`: "Whiteboard"
    Whiteboard,
    /// Usage ID `0x7`: "Coordinate Measuring Machine"
    CoordinateMeasuringMachine,
    /// Usage ID `0x8`: "3D Digitizer"
    ThreeDDigitizer,
    /// Usage ID `0x9`: "Stereo Plotter"
    StereoPlotter,
    /// Usage ID `0xA`: "Articulated Arm"
    ArticulatedArm,
    /// Usage ID `0xB`: "Armature"
    Armature,
    /// Usage ID `0xC`: "Multiple Point Digitizer"
    MultiplePointDigitizer,
    /// Usage ID `0xD`: "Free Space Wand"
    FreeSpaceWand,
    /// Usage ID `0xE`: "Device Configuration"
    DeviceConfiguration,
    /// Usage ID `0xF`: "Capacitive Heat Map Digitizer"
    CapacitiveHeatMapDigitizer,
    /// Usage ID `0x20`: "Stylus"
    Stylus,
    /// Usage ID `0x21`: "Puck"
    Puck,
    /// Usage ID `0x22`: "Finger"
    Finger,
    /// Usage ID `0x23`: "Device settings"
    Devicesettings,
    /// Usage ID `0x24`: "Character Gesture"
    CharacterGesture,
    /// Usage ID `0x30`: "Tip Pressure"
    TipPressure,
    /// Usage ID `0x31`: "Barrel Pressure"
    BarrelPressure,
    /// Usage ID `0x32`: "In Range"
    InRange,
    /// Usage ID `0x33`: "Touch"
    Touch,
    /// Usage ID `0x34`: "Untouch"
    Untouch,
    /// Usage ID `0x35`: "Tap"
    Tap,
    /// Usage ID `0x36`: "Quality"
    Quality,
    /// Usage ID `0x37`: "Data Valid"
    DataValid,
    /// Usage ID `0x38`: "Transducer Index"
    TransducerIndex,
    /// Usage ID `0x39`: "Tablet Function Keys"
    TabletFunctionKeys,
    /// Usage ID `0x3A`: "Program Change Keys"
    ProgramChangeKeys,
    /// Usage ID `0x3B`: "Battery Strength"
    BatteryStrength,
    /// Usage ID `0x3C`: "Invert"
    Invert,
    /// Usage ID `0x3D`: "X Tilt"
    XTilt,
    /// Usage ID `0x3E`: "Y Tilt"
    YTilt,
    /// Usage ID `0x3F`: "Azimuth"
    Azimuth,
    /// Usage ID `0x40`: "Altitude"
    Altitude,
    /// Usage ID `0x41`: "Twist"
    Twist,
    /// Usage ID `0x42`: "Tip Switch"
    TipSwitch,
    /// Usage ID `0x43`: "Secondary Tip Switch"
    SecondaryTipSwitch,
    /// Usage ID `0x44`: "Barrel Switch"
    BarrelSwitch,
    /// Usage ID `0x45`: "Eraser"
    Eraser,
    /// Usage ID `0x46`: "Tablet Pick"
    TabletPick,
    /// Usage ID `0x47`: "Touch Valid"
    TouchValid,
    /// Usage ID `0x48`: "Width"
    Width,
    /// Usage ID `0x49`: "Height"
    Height,
    /// Usage ID `0x51`: "Contact Identifier"
    ContactIdentifier,
    /// Usage ID `0x52`: "Device Mode"
    DeviceMode,
    /// Usage ID `0x53`: "Device Identifier"
    DeviceIdentifier,
    /// Usage ID `0x54`: "Contact Count"
    ContactCount,
    /// Usage ID `0x55`: "Contact Count Maximum"
    ContactCountMaximum,
    /// Usage ID `0x56`: "Scan Time"
    ScanTime,
    /// Usage ID `0x57`: "Surface Switch"
    SurfaceSwitch,
    /// Usage ID `0x58`: "Button Switch"
    ButtonSwitch,
    /// Usage ID `0x59`: "Pad Type"
    PadType,
    /// Usage ID `0x5A`: "Secondary Barrel Switch"
    SecondaryBarrelSwitch,
    /// Usage ID `0x5B`: "Transducer Serial Number"
    TransducerSerialNumber,
    /// Usage ID `0x5C`: "Preferred Color"
    PreferredColor,
    /// Usage ID `0x5D`: "Preferred Color is Locked"
    PreferredColorisLocked,
    /// Usage ID `0x5E`: "Preferred Line Width"
    PreferredLineWidth,
    /// Usage ID `0x5F`: "Preferred Line Width is Locked"
    PreferredLineWidthisLocked,
    /// Usage ID `0x60`: "Latency Mode"
    LatencyMode,
    /// Usage ID `0x61`: "Gesture Character Quality"
    GestureCharacterQuality,
    /// Usage ID `0x62`: "Character Gesture Data Length"
    CharacterGestureDataLength,
    /// Usage ID `0x63`: "Character Gesture Data"
    CharacterGestureData,
    /// Usage ID `0x64`: "Gesture Character Encoding"
    GestureCharacterEncoding,
    /// Usage ID `0x65`: "UTF8 Character Gesture Encoding"
    UTF8CharacterGestureEncoding,
    /// Usage ID `0x66`: "UTF16 Little Endian Character Gesture Encoding"
    UTF16LittleEndianCharacterGestureEncoding,
    /// Usage ID `0x67`: "UTF16 Big Endian Character Gesture Encoding"
    UTF16BigEndianCharacterGestureEncoding,
    /// Usage ID `0x68`: "UTF32 Little Endian Character Gesture Encoding"
    UTF32LittleEndianCharacterGestureEncoding,
    /// Usage ID `0x69`: "UTF32 Big Endian Character Gesture Encoding"
    UTF32BigEndianCharacterGestureEncoding,
    /// Usage ID `0x6A`: "Capacitive Heat Map Protocol Vendor ID"
    CapacitiveHeatMapProtocolVendorID,
    /// Usage ID `0x6B`: "Capacitive Heat Map Protocol Version"
    CapacitiveHeatMapProtocolVersion,
    /// Usage ID `0x6C`: "Capacitive Heat Map Frame Data"
    CapacitiveHeatMapFrameData,
    /// Usage ID `0x6D`: "Gesture Character Enable"
    GestureCharacterEnable,
    /// Usage ID `0x6E`: "Transducer Serial Number Part 2"
    TransducerSerialNumberPart2,
    /// Usage ID `0x6F`: "No Preferred Color"
    NoPreferredColor,
    /// Usage ID `0x70`: "Preferred Line Style"
    PreferredLineStyle,
    /// Usage ID `0x71`: "Preferred Line Style is Locked"
    PreferredLineStyleisLocked,
    /// Usage ID `0x72`: "Ink"
    Ink,
    /// Usage ID `0x73`: "Pencil"
    Pencil,
    /// Usage ID `0x74`: "Highlighter"
    Highlighter,
    /// Usage ID `0x75`: "Chisel Marker"
    ChiselMarker,
    /// Usage ID `0x76`: "Brush"
    Brush,
    /// Usage ID `0x77`: "No Preference"
    NoPreference,
    /// Usage ID `0x80`: "Digitizer Diagnostic"
    DigitizerDiagnostic,
    /// Usage ID `0x81`: "Digitizer Error"
    DigitizerError,
    /// Usage ID `0x82`: "Err Normal Status"
    ErrNormalStatus,
    /// Usage ID `0x83`: "Err Transducers Exceeded"
    ErrTransducersExceeded,
    /// Usage ID `0x84`: "Err Full Trans Features Unavailable"
    ErrFullTransFeaturesUnavailable,
    /// Usage ID `0x85`: "Err Charge Low"
    ErrChargeLow,
    /// Usage ID `0x90`: "Transducer Software Info"
    TransducerSoftwareInfo,
    /// Usage ID `0x91`: "Transducer Vendor Id"
    TransducerVendorId,
    /// Usage ID `0x92`: "Transducer Product Id"
    TransducerProductId,
    /// Usage ID `0x93`: "Device Supported Protocols"
    DeviceSupportedProtocols,
    /// Usage ID `0x94`: "Transducer Supported Protocols"
    TransducerSupportedProtocols,
    /// Usage ID `0x95`: "No Protocol"
    NoProtocol,
    /// Usage ID `0x96`: "Wacom AES Protocol"
    WacomAESProtocol,
    /// Usage ID `0x97`: "USI Protocol"
    USIProtocol,
    /// Usage ID `0x98`: "Microsoft Pen Protocol"
    MicrosoftPenProtocol,
    /// Usage ID `0xA0`: "Supported Report Rates"
    SupportedReportRates,
    /// Usage ID `0xA1`: "Report Rate"
    ReportRate,
    /// Usage ID `0xA2`: "Transducer Connected"
    TransducerConnected,
    /// Usage ID `0xA3`: "Switch Disabled"
    SwitchDisabled,
    /// Usage ID `0xA4`: "Switch Unimplemented"
    SwitchUnimplemented,
    /// Usage ID `0xA5`: "Transducer Switches"
    TransducerSwitches,
    /// Usage ID `0xA6`: "Transducer Index Selector"
    TransducerIndexSelector,
    /// Usage ID `0xB0`: "Button Press Threshold"
    ButtonPressThreshold,
}

impl fmt::Display for Digitizers {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Digitizers::Digitizer => "Digitizer",
            Digitizers::Pen => "Pen",
            Digitizers::LightPen => "Light Pen",
            Digitizers::TouchScreen => "Touch Screen",
            Digitizers::TouchPad => "Touch Pad",
            Digitizers::Whiteboard => "Whiteboard",
            Digitizers::CoordinateMeasuringMachine => "Coordinate Measuring Machine",
            Digitizers::ThreeDDigitizer => "3D Digitizer",
            Digitizers::StereoPlotter => "Stereo Plotter",
            Digitizers::ArticulatedArm => "Articulated Arm",
            Digitizers::Armature => "Armature",
            Digitizers::MultiplePointDigitizer => "Multiple Point Digitizer",
            Digitizers::FreeSpaceWand => "Free Space Wand",
            Digitizers::DeviceConfiguration => "Device Configuration",
            Digitizers::CapacitiveHeatMapDigitizer => "Capacitive Heat Map Digitizer",
            Digitizers::Stylus => "Stylus",
            Digitizers::Puck => "Puck",
            Digitizers::Finger => "Finger",
            Digitizers::Devicesettings => "Device settings",
            Digitizers::CharacterGesture => "Character Gesture",
            Digitizers::TipPressure => "Tip Pressure",
            Digitizers::BarrelPressure => "Barrel Pressure",
            Digitizers::InRange => "In Range",
            Digitizers::Touch => "Touch",
            Digitizers::Untouch => "Untouch",
            Digitizers::Tap => "Tap",
            Digitizers::Quality => "Quality",
            Digitizers::DataValid => "Data Valid",
            Digitizers::TransducerIndex => "Transducer Index",
            Digitizers::TabletFunctionKeys => "Tablet Function Keys",
            Digitizers::ProgramChangeKeys => "Program Change Keys",
            Digitizers::BatteryStrength => "Battery Strength",
            Digitizers::Invert => "Invert",
            Digitizers::XTilt => "X Tilt",
            Digitizers::YTilt => "Y Tilt",
            Digitizers::Azimuth => "Azimuth",
            Digitizers::Altitude => "Altitude",
            Digitizers::Twist => "Twist",
            Digitizers::TipSwitch => "Tip Switch",
            Digitizers::SecondaryTipSwitch => "Secondary Tip Switch",
            Digitizers::BarrelSwitch => "Barrel Switch",
            Digitizers::Eraser => "Eraser",
            Digitizers::TabletPick => "Tablet Pick",
            Digitizers::TouchValid => "Touch Valid",
            Digitizers::Width => "Width",
            Digitizers::Height => "Height",
            Digitizers::ContactIdentifier => "Contact Identifier",
            Digitizers::DeviceMode => "Device Mode",
            Digitizers::DeviceIdentifier => "Device Identifier",
            Digitizers::ContactCount => "Contact Count",
            Digitizers::ContactCountMaximum => "Contact Count Maximum",
            Digitizers::ScanTime => "Scan Time",
            Digitizers::SurfaceSwitch => "Surface Switch",
            Digitizers::ButtonSwitch => "Button Switch",
            Digitizers::PadType => "Pad Type",
            Digitizers::SecondaryBarrelSwitch => "Secondary Barrel Switch",
            Digitizers::TransducerSerialNumber => "Transducer Serial Number",
            Digitizers::PreferredColor => "Preferred Color",
            Digitizers::PreferredColorisLocked => "Preferred Color is Locked",
            Digitizers::PreferredLineWidth => "Preferred Line Width",
            Digitizers::PreferredLineWidthisLocked => "Preferred Line Width is Locked",
            Digitizers::LatencyMode => "Latency Mode",
            Digitizers::GestureCharacterQuality => "Gesture Character Quality",
            Digitizers::CharacterGestureDataLength => "Character Gesture Data Length",
            Digitizers::CharacterGestureData => "Character Gesture Data",
            Digitizers::GestureCharacterEncoding => "Gesture Character Encoding",
            Digitizers::UTF8CharacterGestureEncoding => "UTF8 Character Gesture Encoding",
            Digitizers::UTF16LittleEndianCharacterGestureEncoding => "UTF16 Little Endian Character Gesture Encoding",
            Digitizers::UTF16BigEndianCharacterGestureEncoding => "UTF16 Big Endian Character Gesture Encoding",
            Digitizers::UTF32LittleEndianCharacterGestureEncoding => "UTF32 Little Endian Character Gesture Encoding",
            Digitizers::UTF32BigEndianCharacterGestureEncoding => "UTF32 Big Endian Character Gesture Encoding",
            Digitizers::CapacitiveHeatMapProtocolVendorID => "Capacitive Heat Map Protocol Vendor ID",
            Digitizers::CapacitiveHeatMapProtocolVersion => "Capacitive Heat Map Protocol Version",
            Digitizers::CapacitiveHeatMapFrameData => "Capacitive Heat Map Frame Data",
            Digitizers::GestureCharacterEnable => "Gesture Character Enable",
            Digitizers::TransducerSerialNumberPart2 => "Transducer Serial Number Part 2",
            Digitizers::NoPreferredColor => "No Preferred Color",
            Digitizers::PreferredLineStyle => "Preferred Line Style",
            Digitizers::PreferredLineStyleisLocked => "Preferred Line Style is Locked",
            Digitizers::Ink => "Ink",
            Digitizers::Pencil => "Pencil",
            Digitizers::Highlighter => "Highlighter",
            Digitizers::ChiselMarker => "Chisel Marker",
            Digitizers::Brush => "Brush",
            Digitizers::NoPreference => "No Preference",
            Digitizers::DigitizerDiagnostic => "Digitizer Diagnostic",
            Digitizers::DigitizerError => "Digitizer Error",
            Digitizers::ErrNormalStatus => "Err Normal Status",
            Digitizers::ErrTransducersExceeded => "Err Transducers Exceeded",
            Digitizers::ErrFullTransFeaturesUnavailable => "Err Full Trans Features Unavailable",
            Digitizers::ErrChargeLow => "Err Charge Low",
            Digitizers::TransducerSoftwareInfo => "Transducer Software Info",
            Digitizers::TransducerVendorId => "Transducer Vendor Id",
            Digitizers::TransducerProductId => "Transducer Product Id",
            Digitizers::DeviceSupportedProtocols => "Device Supported Protocols",
            Digitizers::TransducerSupportedProtocols => "Transducer Supported Protocols",
            Digitizers::NoProtocol => "No Protocol",
            Digitizers::WacomAESProtocol => "Wacom AES Protocol",
            Digitizers::USIProtocol => "USI Protocol",
            Digitizers::MicrosoftPenProtocol => "Microsoft Pen Protocol",
            Digitizers::SupportedReportRates => "Supported Report Rates",
            Digitizers::ReportRate => "Report Rate",
            Digitizers::TransducerConnected => "Transducer Connected",
            Digitizers::SwitchDisabled => "Switch Disabled",
            Digitizers::SwitchUnimplemented => "Switch Unimplemented",
            Digitizers::TransducerSwitches => "Transducer Switches",
            Digitizers::TransducerIndexSelector => "Transducer Index Selector",
            Digitizers::ButtonPressThreshold => "Button Press Threshold",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0xE`: "Haptics"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::Haptics { usage: Haptics::WaveformList };
/// let u2 = Usage::new_from_page_and_id(0xE, 0x10).unwrap();
/// let u3 = Usage::from(Haptics::WaveformList);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0xE, u1.usage_page_value());
/// assert_eq!(0x10, u1.usage_id_value());
/// assert_eq!((0xE << 16) | 0x10, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Haptics {
    /// Usage ID `0x1`: "Simple Haptic Controller"
    SimpleHapticController,
    /// Usage ID `0x10`: "Waveform List"
    WaveformList,
    /// Usage ID `0x11`: "Duration List"
    DurationList,
    /// Usage ID `0x20`: "Auto Trigger"
    AutoTrigger,
    /// Usage ID `0x21`: "Manual Trigger"
    ManualTrigger,
    /// Usage ID `0x22`: "Auto Trigger Associated Control"
    AutoTriggerAssociatedControl,
    /// Usage ID `0x23`: "Intensity"
    Intensity,
    /// Usage ID `0x24`: "Repeat Count"
    RepeatCount,
    /// Usage ID `0x25`: "Retrigger Period"
    RetriggerPeriod,
    /// Usage ID `0x26`: "Waveform Vendor Page"
    WaveformVendorPage,
    /// Usage ID `0x27`: "Waveform Vendor ID"
    WaveformVendorID,
    /// Usage ID `0x28`: "Waveform Cutoff Time"
    WaveformCutoffTime,
    /// Usage ID `0x1001`: "Waveform None"
    WaveformNone,
    /// Usage ID `0x1002`: "Waveform Stop"
    WaveformStop,
    /// Usage ID `0x1003`: "Waveform Click"
    WaveformClick,
    /// Usage ID `0x1004`: "Waveform Buzz Continuous"
    WaveformBuzzContinuous,
    /// Usage ID `0x1005`: "Waveform Rumble Continuous"
    WaveformRumbleContinuous,
    /// Usage ID `0x1006`: "Waveform Press"
    WaveformPress,
    /// Usage ID `0x1007`: "Waveform Release"
    WaveformRelease,
    /// Usage ID `0x1008`: "Waveform Hover"
    WaveformHover,
    /// Usage ID `0x1009`: "Waveform Success"
    WaveformSuccess,
    /// Usage ID `0x100A`: "Waveform Error"
    WaveformError,
    /// Usage ID `0x100B`: "Waveform Ink Continuous"
    WaveformInkContinuous,
    /// Usage ID `0x100C`: "Waveform Pencil Continuous"
    WaveformPencilContinuous,
    /// Usage ID `0x100D`: "Waveform Marker Continuous"
    WaveformMarkerContinuous,
    /// Usage ID `0x100E`: "Waveform Chisel Marker Continuous"
    WaveformChiselMarkerContinuous,
    /// Usage ID `0x100F`: "Waveform Brush Continuous"
    WaveformBrushContinuous,
    /// Usage ID `0x1010`: "Waveform Eraser Continuous"
    WaveformEraserContinuous,
    /// Usage ID `0x1011`: "Waveform Sparkle Continuous"
    WaveformSparkleContinuous,
}

impl fmt::Display for Haptics {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Haptics::SimpleHapticController => "Simple Haptic Controller",
            Haptics::WaveformList => "Waveform List",
            Haptics::DurationList => "Duration List",
            Haptics::AutoTrigger => "Auto Trigger",
            Haptics::ManualTrigger => "Manual Trigger",
            Haptics::AutoTriggerAssociatedControl => "Auto Trigger Associated Control",
            Haptics::Intensity => "Intensity",
            Haptics::RepeatCount => "Repeat Count",
            Haptics::RetriggerPeriod => "Retrigger Period",
            Haptics::WaveformVendorPage => "Waveform Vendor Page",
            Haptics::WaveformVendorID => "Waveform Vendor ID",
            Haptics::WaveformCutoffTime => "Waveform Cutoff Time",
            Haptics::WaveformNone => "Waveform None",
            Haptics::WaveformStop => "Waveform Stop",
            Haptics::WaveformClick => "Waveform Click",
            Haptics::WaveformBuzzContinuous => "Waveform Buzz Continuous",
            Haptics::WaveformRumbleContinuous => "Waveform Rumble Continuous",
            Haptics::WaveformPress => "Waveform Press",
            Haptics::WaveformRelease => "Waveform Release",
            Haptics::WaveformHover => "Waveform Hover",
            Haptics::WaveformSuccess => "Waveform Success",
            Haptics::WaveformError => "Waveform Error",
            Haptics::WaveformInkContinuous => "Waveform Ink Continuous",
            Haptics::WaveformPencilContinuous => "Waveform Pencil Continuous",
            Haptics::WaveformMarkerContinuous => "Waveform Marker Continuous",
            Haptics::WaveformChiselMarkerContinuous => "Waveform Chisel Marker Continuous",
            Haptics::WaveformBrushContinuous => "Waveform Brush Continuous",
            Haptics::WaveformEraserContinuous => "Waveform Eraser Continuous",
            Haptics::WaveformSparkleContinuous => "Waveform Sparkle Continuous",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0xF`: "Physical Input Device"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Normal };
/// let u2 = Usage::new_from_page_and_id(0xF, 0x20).unwrap();
/// let u3 = Usage::from(PhysicalInputDevice::Normal);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0xF, u1.usage_page_value());
/// assert_eq!(0x20, u1.usage_id_value());
/// assert_eq!((0xF << 16) | 0x20, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum PhysicalInputDevice {
    /// Usage ID `0x1`: "Physical Input Device"
    PhysicalInputDevice,
    /// Usage ID `0x20`: "Normal"
    Normal,
    /// Usage ID `0x21`: "Set Effect Report"
    SetEffectReport,
    /// Usage ID `0x22`: "Effect Parameter Block Index"
    EffectParameterBlockIndex,
    /// Usage ID `0x23`: "Parameter Block Offset"
    ParameterBlockOffset,
    /// Usage ID `0x24`: "ROM Flag"
    ROMFlag,
    /// Usage ID `0x25`: "Effect Type"
    EffectType,
    /// Usage ID `0x26`: "ET Constant-Force"
    ETConstantForce,
    /// Usage ID `0x27`: "ET Ramp"
    ETRamp,
    /// Usage ID `0x28`: "ET Custom-Force"
    ETCustomForce,
    /// Usage ID `0x30`: "ET Square"
    ETSquare,
    /// Usage ID `0x31`: "ET Sine"
    ETSine,
    /// Usage ID `0x32`: "ET Triangle"
    ETTriangle,
    /// Usage ID `0x33`: "ET Sawtooth Up"
    ETSawtoothUp,
    /// Usage ID `0x34`: "ET Sawtooth Down"
    ETSawtoothDown,
    /// Usage ID `0x40`: "ET Spring"
    ETSpring,
    /// Usage ID `0x41`: "ET Damper"
    ETDamper,
    /// Usage ID `0x42`: "ET Inertia"
    ETInertia,
    /// Usage ID `0x43`: "ET Friction"
    ETFriction,
    /// Usage ID `0x50`: "Duration"
    Duration,
    /// Usage ID `0x51`: "Sample Period"
    SamplePeriod,
    /// Usage ID `0x52`: "Gain"
    Gain,
    /// Usage ID `0x53`: "Trigger Button"
    TriggerButton,
    /// Usage ID `0x54`: "Trigger Repeat Interval"
    TriggerRepeatInterval,
    /// Usage ID `0x55`: "Axes Enable"
    AxesEnable,
    /// Usage ID `0x56`: "Direction Enable"
    DirectionEnable,
    /// Usage ID `0x57`: "Direction"
    Direction,
    /// Usage ID `0x58`: "Type Specific Block Offset"
    TypeSpecificBlockOffset,
    /// Usage ID `0x59`: "Block Type"
    BlockType,
    /// Usage ID `0x5A`: "Set Envelope Report"
    SetEnvelopeReport,
    /// Usage ID `0x5B`: "Attack Level"
    AttackLevel,
    /// Usage ID `0x5C`: "Attack Time"
    AttackTime,
    /// Usage ID `0x5D`: "Fade Level"
    FadeLevel,
    /// Usage ID `0x5E`: "Fade Time"
    FadeTime,
    /// Usage ID `0x5F`: "Set Condition Report"
    SetConditionReport,
    /// Usage ID `0x60`: "Center-Point Offset"
    CenterPointOffset,
    /// Usage ID `0x61`: "Positive Coefficient"
    PositiveCoefficient,
    /// Usage ID `0x62`: "Negative Coefficient"
    NegativeCoefficient,
    /// Usage ID `0x63`: "Positive Saturation"
    PositiveSaturation,
    /// Usage ID `0x64`: "Negative Saturation"
    NegativeSaturation,
    /// Usage ID `0x65`: "Dead Band"
    DeadBand,
    /// Usage ID `0x66`: "Download Force Sample"
    DownloadForceSample,
    /// Usage ID `0x67`: "Isoch Custom-Force Enable"
    IsochCustomForceEnable,
    /// Usage ID `0x68`: "Custom-Force Data Report"
    CustomForceDataReport,
    /// Usage ID `0x69`: "Custom-Force Data"
    CustomForceData,
    /// Usage ID `0x6A`: "Custom-Force Vendor Defined Data"
    CustomForceVendorDefinedData,
    /// Usage ID `0x6B`: "Set Custom-Force Report"
    SetCustomForceReport,
    /// Usage ID `0x6C`: "Custom-Force Data Offset"
    CustomForceDataOffset,
    /// Usage ID `0x6D`: "Sample Count"
    SampleCount,
    /// Usage ID `0x6E`: "Set Periodic Report"
    SetPeriodicReport,
    /// Usage ID `0x6F`: "Offset"
    Offset,
    /// Usage ID `0x70`: "Magnitude"
    Magnitude,
    /// Usage ID `0x71`: "Phase"
    Phase,
    /// Usage ID `0x72`: "Period"
    Period,
    /// Usage ID `0x73`: "Set Constant-Force Report"
    SetConstantForceReport,
    /// Usage ID `0x74`: "Set Ramp-Force Report"
    SetRampForceReport,
    /// Usage ID `0x75`: "Ramp Start"
    RampStart,
    /// Usage ID `0x76`: "Ramp End"
    RampEnd,
    /// Usage ID `0x77`: "Effect Operation Report"
    EffectOperationReport,
    /// Usage ID `0x78`: "Effect Operation"
    EffectOperation,
    /// Usage ID `0x79`: "Op Effect Start"
    OpEffectStart,
    /// Usage ID `0x7A`: "Op Effect Start Solo"
    OpEffectStartSolo,
    /// Usage ID `0x7B`: "Op Effect Stop"
    OpEffectStop,
    /// Usage ID `0x7C`: "Loop Count"
    LoopCount,
    /// Usage ID `0x7D`: "Device Gain Report"
    DeviceGainReport,
    /// Usage ID `0x7E`: "Device Gain"
    DeviceGain,
    /// Usage ID `0x7F`: "Parameter Block Pools Report"
    ParameterBlockPoolsReport,
    /// Usage ID `0x80`: "RAM Pool Size"
    RAMPoolSize,
    /// Usage ID `0x81`: "ROM Pool Size"
    ROMPoolSize,
    /// Usage ID `0x82`: "ROM Effect Block Count"
    ROMEffectBlockCount,
    /// Usage ID `0x83`: "Simultaneous Effects Max"
    SimultaneousEffectsMax,
    /// Usage ID `0x84`: "Pool Alignment"
    PoolAlignment,
    /// Usage ID `0x85`: "Parameter Block Move Report"
    ParameterBlockMoveReport,
    /// Usage ID `0x86`: "Move Source"
    MoveSource,
    /// Usage ID `0x87`: "Move Destination"
    MoveDestination,
    /// Usage ID `0x88`: "Move Length"
    MoveLength,
    /// Usage ID `0x89`: "Effect Parameter Block Load Report"
    EffectParameterBlockLoadReport,
    /// Usage ID `0x8B`: "Effect Parameter Block Load Status"
    EffectParameterBlockLoadStatus,
    /// Usage ID `0x8C`: "Block Load Success"
    BlockLoadSuccess,
    /// Usage ID `0x8D`: "Block Load Full"
    BlockLoadFull,
    /// Usage ID `0x8E`: "Block Load Error"
    BlockLoadError,
    /// Usage ID `0x8F`: "Block Handle"
    BlockHandle,
    /// Usage ID `0x90`: "Effect Parameter Block Free Report"
    EffectParameterBlockFreeReport,
    /// Usage ID `0x91`: "Type Specific Block Handle"
    TypeSpecificBlockHandle,
    /// Usage ID `0x92`: "PID State Report"
    PIDStateReport,
    /// Usage ID `0x94`: "Effect Playing"
    EffectPlaying,
    /// Usage ID `0x95`: "PID Device Control Report"
    PIDDeviceControlReport,
    /// Usage ID `0x96`: "PID Device Control"
    PIDDeviceControl,
    /// Usage ID `0x97`: "DC Enable Actuators"
    DCEnableActuators,
    /// Usage ID `0x98`: "DC Disable Actuators"
    DCDisableActuators,
    /// Usage ID `0x99`: "DC Stop All Effects"
    DCStopAllEffects,
    /// Usage ID `0x9A`: "DC Reset"
    DCReset,
    /// Usage ID `0x9B`: "DC Pause"
    DCPause,
    /// Usage ID `0x9C`: "DC Continue"
    DCContinue,
    /// Usage ID `0x9F`: "Device Paused"
    DevicePaused,
    /// Usage ID `0xA0`: "Actuators Enabled"
    ActuatorsEnabled,
    /// Usage ID `0xA4`: "Safety Switch"
    SafetySwitch,
    /// Usage ID `0xA5`: "Actuator Override Switch"
    ActuatorOverrideSwitch,
    /// Usage ID `0xA6`: "Actuator Power"
    ActuatorPower,
    /// Usage ID `0xA7`: "Start Delay"
    StartDelay,
    /// Usage ID `0xA8`: "Parameter Block Size"
    ParameterBlockSize,
    /// Usage ID `0xA9`: "Device-Managed Pool"
    DeviceManagedPool,
    /// Usage ID `0xAA`: "Shared Parameter Blocks"
    SharedParameterBlocks,
    /// Usage ID `0xAB`: "Create New Effect Parameter Block Report"
    CreateNewEffectParameterBlockReport,
    /// Usage ID `0xAC`: "RAM Pool Available"
    RAMPoolAvailable,
}

impl fmt::Display for PhysicalInputDevice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            PhysicalInputDevice::PhysicalInputDevice => "Physical Input Device",
            PhysicalInputDevice::Normal => "Normal",
            PhysicalInputDevice::SetEffectReport => "Set Effect Report",
            PhysicalInputDevice::EffectParameterBlockIndex => "Effect Parameter Block Index",
            PhysicalInputDevice::ParameterBlockOffset => "Parameter Block Offset",
            PhysicalInputDevice::ROMFlag => "ROM Flag",
            PhysicalInputDevice::EffectType => "Effect Type",
            PhysicalInputDevice::ETConstantForce => "ET Constant-Force",
            PhysicalInputDevice::ETRamp => "ET Ramp",
            PhysicalInputDevice::ETCustomForce => "ET Custom-Force",
            PhysicalInputDevice::ETSquare => "ET Square",
            PhysicalInputDevice::ETSine => "ET Sine",
            PhysicalInputDevice::ETTriangle => "ET Triangle",
            PhysicalInputDevice::ETSawtoothUp => "ET Sawtooth Up",
            PhysicalInputDevice::ETSawtoothDown => "ET Sawtooth Down",
            PhysicalInputDevice::ETSpring => "ET Spring",
            PhysicalInputDevice::ETDamper => "ET Damper",
            PhysicalInputDevice::ETInertia => "ET Inertia",
            PhysicalInputDevice::ETFriction => "ET Friction",
            PhysicalInputDevice::Duration => "Duration",
            PhysicalInputDevice::SamplePeriod => "Sample Period",
            PhysicalInputDevice::Gain => "Gain",
            PhysicalInputDevice::TriggerButton => "Trigger Button",
            PhysicalInputDevice::TriggerRepeatInterval => "Trigger Repeat Interval",
            PhysicalInputDevice::AxesEnable => "Axes Enable",
            PhysicalInputDevice::DirectionEnable => "Direction Enable",
            PhysicalInputDevice::Direction => "Direction",
            PhysicalInputDevice::TypeSpecificBlockOffset => "Type Specific Block Offset",
            PhysicalInputDevice::BlockType => "Block Type",
            PhysicalInputDevice::SetEnvelopeReport => "Set Envelope Report",
            PhysicalInputDevice::AttackLevel => "Attack Level",
            PhysicalInputDevice::AttackTime => "Attack Time",
            PhysicalInputDevice::FadeLevel => "Fade Level",
            PhysicalInputDevice::FadeTime => "Fade Time",
            PhysicalInputDevice::SetConditionReport => "Set Condition Report",
            PhysicalInputDevice::CenterPointOffset => "Center-Point Offset",
            PhysicalInputDevice::PositiveCoefficient => "Positive Coefficient",
            PhysicalInputDevice::NegativeCoefficient => "Negative Coefficient",
            PhysicalInputDevice::PositiveSaturation => "Positive Saturation",
            PhysicalInputDevice::NegativeSaturation => "Negative Saturation",
            PhysicalInputDevice::DeadBand => "Dead Band",
            PhysicalInputDevice::DownloadForceSample => "Download Force Sample",
            PhysicalInputDevice::IsochCustomForceEnable => "Isoch Custom-Force Enable",
            PhysicalInputDevice::CustomForceDataReport => "Custom-Force Data Report",
            PhysicalInputDevice::CustomForceData => "Custom-Force Data",
            PhysicalInputDevice::CustomForceVendorDefinedData => "Custom-Force Vendor Defined Data",
            PhysicalInputDevice::SetCustomForceReport => "Set Custom-Force Report",
            PhysicalInputDevice::CustomForceDataOffset => "Custom-Force Data Offset",
            PhysicalInputDevice::SampleCount => "Sample Count",
            PhysicalInputDevice::SetPeriodicReport => "Set Periodic Report",
            PhysicalInputDevice::Offset => "Offset",
            PhysicalInputDevice::Magnitude => "Magnitude",
            PhysicalInputDevice::Phase => "Phase",
            PhysicalInputDevice::Period => "Period",
            PhysicalInputDevice::SetConstantForceReport => "Set Constant-Force Report",
            PhysicalInputDevice::SetRampForceReport => "Set Ramp-Force Report",
            PhysicalInputDevice::RampStart => "Ramp Start",
            PhysicalInputDevice::RampEnd => "Ramp End",
            PhysicalInputDevice::EffectOperationReport => "Effect Operation Report",
            PhysicalInputDevice::EffectOperation => "Effect Operation",
            PhysicalInputDevice::OpEffectStart => "Op Effect Start",
            PhysicalInputDevice::OpEffectStartSolo => "Op Effect Start Solo",
            PhysicalInputDevice::OpEffectStop => "Op Effect Stop",
            PhysicalInputDevice::LoopCount => "Loop Count",
            PhysicalInputDevice::DeviceGainReport => "Device Gain Report",
            PhysicalInputDevice::DeviceGain => "Device Gain",
            PhysicalInputDevice::ParameterBlockPoolsReport => "Parameter Block Pools Report",
            PhysicalInputDevice::RAMPoolSize => "RAM Pool Size",
            PhysicalInputDevice::ROMPoolSize => "ROM Pool Size",
            PhysicalInputDevice::ROMEffectBlockCount => "ROM Effect Block Count",
            PhysicalInputDevice::SimultaneousEffectsMax => "Simultaneous Effects Max",
            PhysicalInputDevice::PoolAlignment => "Pool Alignment",
            PhysicalInputDevice::ParameterBlockMoveReport => "Parameter Block Move Report",
            PhysicalInputDevice::MoveSource => "Move Source",
            PhysicalInputDevice::MoveDestination => "Move Destination",
            PhysicalInputDevice::MoveLength => "Move Length",
            PhysicalInputDevice::EffectParameterBlockLoadReport => "Effect Parameter Block Load Report",
            PhysicalInputDevice::EffectParameterBlockLoadStatus => "Effect Parameter Block Load Status",
            PhysicalInputDevice::BlockLoadSuccess => "Block Load Success",
            PhysicalInputDevice::BlockLoadFull => "Block Load Full",
            PhysicalInputDevice::BlockLoadError => "Block Load Error",
            PhysicalInputDevice::BlockHandle => "Block Handle",
            PhysicalInputDevice::EffectParameterBlockFreeReport => "Effect Parameter Block Free Report",
            PhysicalInputDevice::TypeSpecificBlockHandle => "Type Specific Block Handle",
            PhysicalInputDevice::PIDStateReport => "PID State Report",
            PhysicalInputDevice::EffectPlaying => "Effect Playing",
            PhysicalInputDevice::PIDDeviceControlReport => "PID Device Control Report",
            PhysicalInputDevice::PIDDeviceControl => "PID Device Control",
            PhysicalInputDevice::DCEnableActuators => "DC Enable Actuators",
            PhysicalInputDevice::DCDisableActuators => "DC Disable Actuators",
            PhysicalInputDevice::DCStopAllEffects => "DC Stop All Effects",
            PhysicalInputDevice::DCReset => "DC Reset",
            PhysicalInputDevice::DCPause => "DC Pause",
            PhysicalInputDevice::DCContinue => "DC Continue",
            PhysicalInputDevice::DevicePaused => "Device Paused",
            PhysicalInputDevice::ActuatorsEnabled => "Actuators Enabled",
            PhysicalInputDevice::SafetySwitch => "Safety Switch",
            PhysicalInputDevice::ActuatorOverrideSwitch => "Actuator Override Switch",
            PhysicalInputDevice::ActuatorPower => "Actuator Power",
            PhysicalInputDevice::StartDelay => "Start Delay",
            PhysicalInputDevice::ParameterBlockSize => "Parameter Block Size",
            PhysicalInputDevice::DeviceManagedPool => "Device-Managed Pool",
            PhysicalInputDevice::SharedParameterBlocks => "Shared Parameter Blocks",
            PhysicalInputDevice::CreateNewEffectParameterBlockReport => "Create New Effect Parameter Block Report",
            PhysicalInputDevice::RAMPoolAvailable => "RAM Pool Available",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x10`: "Unicode"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
///
/// This Usage Page is generated, not defined, any Usage IDs in this Usage
/// Page are simply the codepoint number.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Unicode {
    Unicode {
        codepoint: u16,
    }
}

impl fmt::Display for Unicode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Unicode::Unicode { codepoint } => format!("codepoint {codepoint}"),
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x11`: "SoC"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::SoC { usage: SoC::FirmwareTransfer };
/// let u2 = Usage::new_from_page_and_id(0x11, 0x2).unwrap();
/// let u3 = Usage::from(SoC::FirmwareTransfer);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x11, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x11 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum SoC {
    /// Usage ID `0x1`: "SocControl"
    SocControl,
    /// Usage ID `0x2`: "FirmwareTransfer"
    FirmwareTransfer,
    /// Usage ID `0x3`: "FirmwareFileId"
    FirmwareFileId,
    /// Usage ID `0x4`: "FileOffsetInBytes"
    FileOffsetInBytes,
    /// Usage ID `0x5`: "FileTransferSizeMaxInBytes"
    FileTransferSizeMaxInBytes,
    /// Usage ID `0x6`: "FilePayload"
    FilePayload,
    /// Usage ID `0x7`: "FilePayloadSizeInBytes"
    FilePayloadSizeInBytes,
    /// Usage ID `0x8`: "FilePayloadContainsLastBytes"
    FilePayloadContainsLastBytes,
    /// Usage ID `0x9`: "FileTransferStop"
    FileTransferStop,
    /// Usage ID `0xA`: "FileTransferTillEnd"
    FileTransferTillEnd,
}

impl fmt::Display for SoC {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            SoC::SocControl => "SocControl",
            SoC::FirmwareTransfer => "FirmwareTransfer",
            SoC::FirmwareFileId => "FirmwareFileId",
            SoC::FileOffsetInBytes => "FileOffsetInBytes",
            SoC::FileTransferSizeMaxInBytes => "FileTransferSizeMaxInBytes",
            SoC::FilePayload => "FilePayload",
            SoC::FilePayloadSizeInBytes => "FilePayloadSizeInBytes",
            SoC::FilePayloadContainsLastBytes => "FilePayloadContainsLastBytes",
            SoC::FileTransferStop => "FileTransferStop",
            SoC::FileTransferTillEnd => "FileTransferTillEnd",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x12`: "Eye and Head Trackers"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::HeadTracker };
/// let u2 = Usage::new_from_page_and_id(0x12, 0x2).unwrap();
/// let u3 = Usage::from(EyeandHeadTrackers::HeadTracker);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x12, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x12 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum EyeandHeadTrackers {
    /// Usage ID `0x1`: "Eye Tracker"
    EyeTracker,
    /// Usage ID `0x2`: "Head Tracker"
    HeadTracker,
    /// Usage ID `0x10`: "Tracking Data"
    TrackingData,
    /// Usage ID `0x11`: "Capabilities"
    Capabilities,
    /// Usage ID `0x12`: "Configuration"
    Configuration,
    /// Usage ID `0x13`: "Status"
    Status,
    /// Usage ID `0x14`: "Control"
    Control,
    /// Usage ID `0x20`: "Sensor Timestamp"
    SensorTimestamp,
    /// Usage ID `0x21`: "Position X"
    PositionX,
    /// Usage ID `0x22`: "Position Y"
    PositionY,
    /// Usage ID `0x23`: "Position Z"
    PositionZ,
    /// Usage ID `0x24`: "Gaze Point"
    GazePoint,
    /// Usage ID `0x25`: "Left Eye Position"
    LeftEyePosition,
    /// Usage ID `0x26`: "Right Eye Position"
    RightEyePosition,
    /// Usage ID `0x27`: "Head Position"
    HeadPosition,
    /// Usage ID `0x28`: "Head Direction Point"
    HeadDirectionPoint,
    /// Usage ID `0x29`: "Rotation about X axis"
    RotationaboutXaxis,
    /// Usage ID `0x2A`: "Rotation about Y axis"
    RotationaboutYaxis,
    /// Usage ID `0x2B`: "Rotation about Z axis"
    RotationaboutZaxis,
    /// Usage ID `0x100`: "Tracker Quality"
    TrackerQuality,
    /// Usage ID `0x101`: "Minimum Tracking Distance"
    MinimumTrackingDistance,
    /// Usage ID `0x102`: "Optimum Tracking Distance"
    OptimumTrackingDistance,
    /// Usage ID `0x103`: "Maximum Tracking Distance"
    MaximumTrackingDistance,
    /// Usage ID `0x104`: "Maximum Screen Plane Width"
    MaximumScreenPlaneWidth,
    /// Usage ID `0x105`: "Maximum Screen Plane Height"
    MaximumScreenPlaneHeight,
    /// Usage ID `0x200`: "Display Manufacturer ID"
    DisplayManufacturerID,
    /// Usage ID `0x201`: "Display Product ID"
    DisplayProductID,
    /// Usage ID `0x202`: "Display Serial Number"
    DisplaySerialNumber,
    /// Usage ID `0x203`: "Display Manufacturer Date"
    DisplayManufacturerDate,
    /// Usage ID `0x204`: "Calibrated Screen Width"
    CalibratedScreenWidth,
    /// Usage ID `0x205`: "Calibrated Screen Height"
    CalibratedScreenHeight,
    /// Usage ID `0x300`: "Sampling Frequency"
    SamplingFrequency,
    /// Usage ID `0x301`: "Configuration Status"
    ConfigurationStatus,
    /// Usage ID `0x400`: "Device Mode Request"
    DeviceModeRequest,
}

impl fmt::Display for EyeandHeadTrackers {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            EyeandHeadTrackers::EyeTracker => "Eye Tracker",
            EyeandHeadTrackers::HeadTracker => "Head Tracker",
            EyeandHeadTrackers::TrackingData => "Tracking Data",
            EyeandHeadTrackers::Capabilities => "Capabilities",
            EyeandHeadTrackers::Configuration => "Configuration",
            EyeandHeadTrackers::Status => "Status",
            EyeandHeadTrackers::Control => "Control",
            EyeandHeadTrackers::SensorTimestamp => "Sensor Timestamp",
            EyeandHeadTrackers::PositionX => "Position X",
            EyeandHeadTrackers::PositionY => "Position Y",
            EyeandHeadTrackers::PositionZ => "Position Z",
            EyeandHeadTrackers::GazePoint => "Gaze Point",
            EyeandHeadTrackers::LeftEyePosition => "Left Eye Position",
            EyeandHeadTrackers::RightEyePosition => "Right Eye Position",
            EyeandHeadTrackers::HeadPosition => "Head Position",
            EyeandHeadTrackers::HeadDirectionPoint => "Head Direction Point",
            EyeandHeadTrackers::RotationaboutXaxis => "Rotation about X axis",
            EyeandHeadTrackers::RotationaboutYaxis => "Rotation about Y axis",
            EyeandHeadTrackers::RotationaboutZaxis => "Rotation about Z axis",
            EyeandHeadTrackers::TrackerQuality => "Tracker Quality",
            EyeandHeadTrackers::MinimumTrackingDistance => "Minimum Tracking Distance",
            EyeandHeadTrackers::OptimumTrackingDistance => "Optimum Tracking Distance",
            EyeandHeadTrackers::MaximumTrackingDistance => "Maximum Tracking Distance",
            EyeandHeadTrackers::MaximumScreenPlaneWidth => "Maximum Screen Plane Width",
            EyeandHeadTrackers::MaximumScreenPlaneHeight => "Maximum Screen Plane Height",
            EyeandHeadTrackers::DisplayManufacturerID => "Display Manufacturer ID",
            EyeandHeadTrackers::DisplayProductID => "Display Product ID",
            EyeandHeadTrackers::DisplaySerialNumber => "Display Serial Number",
            EyeandHeadTrackers::DisplayManufacturerDate => "Display Manufacturer Date",
            EyeandHeadTrackers::CalibratedScreenWidth => "Calibrated Screen Width",
            EyeandHeadTrackers::CalibratedScreenHeight => "Calibrated Screen Height",
            EyeandHeadTrackers::SamplingFrequency => "Sampling Frequency",
            EyeandHeadTrackers::ConfigurationStatus => "Configuration Status",
            EyeandHeadTrackers::DeviceModeRequest => "Device Mode Request",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x14`: "Auxiliary Display"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AuxiliaryDisplay };
/// let u2 = Usage::new_from_page_and_id(0x14, 0x2).unwrap();
/// let u3 = Usage::from(AuxiliaryDisplay::AuxiliaryDisplay);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x14, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x14 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum AuxiliaryDisplay {
    /// Usage ID `0x1`: "Alphanumeric Display"
    AlphanumericDisplay,
    /// Usage ID `0x2`: "Auxiliary Display"
    AuxiliaryDisplay,
    /// Usage ID `0x20`: "Display Attributes Report"
    DisplayAttributesReport,
    /// Usage ID `0x21`: "ASCII Character Set"
    ASCIICharacterSet,
    /// Usage ID `0x22`: "Data Read Back"
    DataReadBack,
    /// Usage ID `0x23`: "Font Read Back"
    FontReadBack,
    /// Usage ID `0x24`: "Display Control Report"
    DisplayControlReport,
    /// Usage ID `0x25`: "Clear Display"
    ClearDisplay,
    /// Usage ID `0x26`: "Display Enable"
    DisplayEnable,
    /// Usage ID `0x27`: "Screen Saver Delay"
    ScreenSaverDelay,
    /// Usage ID `0x28`: "Screen Saver Enable"
    ScreenSaverEnable,
    /// Usage ID `0x29`: "Vertical Scroll"
    VerticalScroll,
    /// Usage ID `0x2A`: "Horizontal Scroll"
    HorizontalScroll,
    /// Usage ID `0x2B`: "Character Report"
    CharacterReport,
    /// Usage ID `0x2C`: "Display Data"
    DisplayData,
    /// Usage ID `0x2D`: "Display Status"
    DisplayStatus,
    /// Usage ID `0x2E`: "Stat Not Ready"
    StatNotReady,
    /// Usage ID `0x2F`: "Stat Ready"
    StatReady,
    /// Usage ID `0x30`: "Err Not a loadable character"
    ErrNotaloadablecharacter,
    /// Usage ID `0x31`: "Err Font data cannot be read"
    ErrFontdatacannotberead,
    /// Usage ID `0x32`: "Cursor Position Report"
    CursorPositionReport,
    /// Usage ID `0x33`: "Row"
    Row,
    /// Usage ID `0x34`: "Column"
    Column,
    /// Usage ID `0x35`: "Rows"
    Rows,
    /// Usage ID `0x36`: "Columns"
    Columns,
    /// Usage ID `0x37`: "Cursor Pixel Positioning"
    CursorPixelPositioning,
    /// Usage ID `0x38`: "Cursor Mode"
    CursorMode,
    /// Usage ID `0x39`: "Cursor Enable"
    CursorEnable,
    /// Usage ID `0x3A`: "Cursor Blink"
    CursorBlink,
    /// Usage ID `0x3B`: "Font Report"
    FontReport,
    /// Usage ID `0x3C`: "Font Data"
    FontData,
    /// Usage ID `0x3D`: "Character Width"
    CharacterWidth,
    /// Usage ID `0x3E`: "Character Height"
    CharacterHeight,
    /// Usage ID `0x3F`: "Character Spacing Horizontal"
    CharacterSpacingHorizontal,
    /// Usage ID `0x40`: "Character Spacing Vertical"
    CharacterSpacingVertical,
    /// Usage ID `0x41`: "Unicode Character Set"
    UnicodeCharacterSet,
    /// Usage ID `0x42`: "Font 7-Segment"
    Font7Segment,
    /// Usage ID `0x43`: "7-Segment Direct Map"
    SevenSegmentDirectMap,
    /// Usage ID `0x44`: "Font 14-Segment"
    Font14Segment,
    /// Usage ID `0x45`: "14-Segment Direct Map"
    One4SegmentDirectMap,
    /// Usage ID `0x46`: "Display Brightness"
    DisplayBrightness,
    /// Usage ID `0x47`: "Display Contrast"
    DisplayContrast,
    /// Usage ID `0x48`: "Character Attribute"
    CharacterAttribute,
    /// Usage ID `0x49`: "Attribute Readback"
    AttributeReadback,
    /// Usage ID `0x4A`: "Attribute Data"
    AttributeData,
    /// Usage ID `0x4B`: "Char Attr Enhance"
    CharAttrEnhance,
    /// Usage ID `0x4C`: "Char Attr Underline"
    CharAttrUnderline,
    /// Usage ID `0x4D`: "Char Attr Blink"
    CharAttrBlink,
    /// Usage ID `0x80`: "Bitmap Size X"
    BitmapSizeX,
    /// Usage ID `0x81`: "Bitmap Size Y"
    BitmapSizeY,
    /// Usage ID `0x82`: "Max Blit Size"
    MaxBlitSize,
    /// Usage ID `0x83`: "Bit Depth Format"
    BitDepthFormat,
    /// Usage ID `0x84`: "Display Orientation"
    DisplayOrientation,
    /// Usage ID `0x85`: "Palette Report"
    PaletteReport,
    /// Usage ID `0x86`: "Palette Data Size"
    PaletteDataSize,
    /// Usage ID `0x87`: "Palette Data Offset"
    PaletteDataOffset,
    /// Usage ID `0x88`: "Palette Data"
    PaletteData,
    /// Usage ID `0x8A`: "Blit Report"
    BlitReport,
    /// Usage ID `0x8B`: "Blit Rectangle X1"
    BlitRectangleX1,
    /// Usage ID `0x8C`: "Blit Rectangle Y1"
    BlitRectangleY1,
    /// Usage ID `0x8D`: "Blit Rectangle X2"
    BlitRectangleX2,
    /// Usage ID `0x8E`: "Blit Rectangle Y2"
    BlitRectangleY2,
    /// Usage ID `0x8F`: "Blit Data"
    BlitData,
    /// Usage ID `0x90`: "Soft Button"
    SoftButton,
    /// Usage ID `0x91`: "Soft Button ID"
    SoftButtonID,
    /// Usage ID `0x92`: "Soft Button Side"
    SoftButtonSide,
    /// Usage ID `0x93`: "Soft Button Offset 1"
    SoftButtonOffset1,
    /// Usage ID `0x94`: "Soft Button Offset 2"
    SoftButtonOffset2,
    /// Usage ID `0x95`: "Soft Button Report"
    SoftButtonReport,
    /// Usage ID `0xC2`: "Soft Keys"
    SoftKeys,
    /// Usage ID `0xCC`: "Display Data Extensions"
    DisplayDataExtensions,
    /// Usage ID `0xCF`: "Character Mapping"
    CharacterMapping,
    /// Usage ID `0xDD`: "Unicode Equivalent"
    UnicodeEquivalent,
    /// Usage ID `0xDF`: "Character Page Mapping"
    CharacterPageMapping,
    /// Usage ID `0xFF`: "Request Report"
    RequestReport,
}

impl fmt::Display for AuxiliaryDisplay {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            AuxiliaryDisplay::AlphanumericDisplay => "Alphanumeric Display",
            AuxiliaryDisplay::AuxiliaryDisplay => "Auxiliary Display",
            AuxiliaryDisplay::DisplayAttributesReport => "Display Attributes Report",
            AuxiliaryDisplay::ASCIICharacterSet => "ASCII Character Set",
            AuxiliaryDisplay::DataReadBack => "Data Read Back",
            AuxiliaryDisplay::FontReadBack => "Font Read Back",
            AuxiliaryDisplay::DisplayControlReport => "Display Control Report",
            AuxiliaryDisplay::ClearDisplay => "Clear Display",
            AuxiliaryDisplay::DisplayEnable => "Display Enable",
            AuxiliaryDisplay::ScreenSaverDelay => "Screen Saver Delay",
            AuxiliaryDisplay::ScreenSaverEnable => "Screen Saver Enable",
            AuxiliaryDisplay::VerticalScroll => "Vertical Scroll",
            AuxiliaryDisplay::HorizontalScroll => "Horizontal Scroll",
            AuxiliaryDisplay::CharacterReport => "Character Report",
            AuxiliaryDisplay::DisplayData => "Display Data",
            AuxiliaryDisplay::DisplayStatus => "Display Status",
            AuxiliaryDisplay::StatNotReady => "Stat Not Ready",
            AuxiliaryDisplay::StatReady => "Stat Ready",
            AuxiliaryDisplay::ErrNotaloadablecharacter => "Err Not a loadable character",
            AuxiliaryDisplay::ErrFontdatacannotberead => "Err Font data cannot be read",
            AuxiliaryDisplay::CursorPositionReport => "Cursor Position Report",
            AuxiliaryDisplay::Row => "Row",
            AuxiliaryDisplay::Column => "Column",
            AuxiliaryDisplay::Rows => "Rows",
            AuxiliaryDisplay::Columns => "Columns",
            AuxiliaryDisplay::CursorPixelPositioning => "Cursor Pixel Positioning",
            AuxiliaryDisplay::CursorMode => "Cursor Mode",
            AuxiliaryDisplay::CursorEnable => "Cursor Enable",
            AuxiliaryDisplay::CursorBlink => "Cursor Blink",
            AuxiliaryDisplay::FontReport => "Font Report",
            AuxiliaryDisplay::FontData => "Font Data",
            AuxiliaryDisplay::CharacterWidth => "Character Width",
            AuxiliaryDisplay::CharacterHeight => "Character Height",
            AuxiliaryDisplay::CharacterSpacingHorizontal => "Character Spacing Horizontal",
            AuxiliaryDisplay::CharacterSpacingVertical => "Character Spacing Vertical",
            AuxiliaryDisplay::UnicodeCharacterSet => "Unicode Character Set",
            AuxiliaryDisplay::Font7Segment => "Font 7-Segment",
            AuxiliaryDisplay::SevenSegmentDirectMap => "7-Segment Direct Map",
            AuxiliaryDisplay::Font14Segment => "Font 14-Segment",
            AuxiliaryDisplay::One4SegmentDirectMap => "14-Segment Direct Map",
            AuxiliaryDisplay::DisplayBrightness => "Display Brightness",
            AuxiliaryDisplay::DisplayContrast => "Display Contrast",
            AuxiliaryDisplay::CharacterAttribute => "Character Attribute",
            AuxiliaryDisplay::AttributeReadback => "Attribute Readback",
            AuxiliaryDisplay::AttributeData => "Attribute Data",
            AuxiliaryDisplay::CharAttrEnhance => "Char Attr Enhance",
            AuxiliaryDisplay::CharAttrUnderline => "Char Attr Underline",
            AuxiliaryDisplay::CharAttrBlink => "Char Attr Blink",
            AuxiliaryDisplay::BitmapSizeX => "Bitmap Size X",
            AuxiliaryDisplay::BitmapSizeY => "Bitmap Size Y",
            AuxiliaryDisplay::MaxBlitSize => "Max Blit Size",
            AuxiliaryDisplay::BitDepthFormat => "Bit Depth Format",
            AuxiliaryDisplay::DisplayOrientation => "Display Orientation",
            AuxiliaryDisplay::PaletteReport => "Palette Report",
            AuxiliaryDisplay::PaletteDataSize => "Palette Data Size",
            AuxiliaryDisplay::PaletteDataOffset => "Palette Data Offset",
            AuxiliaryDisplay::PaletteData => "Palette Data",
            AuxiliaryDisplay::BlitReport => "Blit Report",
            AuxiliaryDisplay::BlitRectangleX1 => "Blit Rectangle X1",
            AuxiliaryDisplay::BlitRectangleY1 => "Blit Rectangle Y1",
            AuxiliaryDisplay::BlitRectangleX2 => "Blit Rectangle X2",
            AuxiliaryDisplay::BlitRectangleY2 => "Blit Rectangle Y2",
            AuxiliaryDisplay::BlitData => "Blit Data",
            AuxiliaryDisplay::SoftButton => "Soft Button",
            AuxiliaryDisplay::SoftButtonID => "Soft Button ID",
            AuxiliaryDisplay::SoftButtonSide => "Soft Button Side",
            AuxiliaryDisplay::SoftButtonOffset1 => "Soft Button Offset 1",
            AuxiliaryDisplay::SoftButtonOffset2 => "Soft Button Offset 2",
            AuxiliaryDisplay::SoftButtonReport => "Soft Button Report",
            AuxiliaryDisplay::SoftKeys => "Soft Keys",
            AuxiliaryDisplay::DisplayDataExtensions => "Display Data Extensions",
            AuxiliaryDisplay::CharacterMapping => "Character Mapping",
            AuxiliaryDisplay::UnicodeEquivalent => "Unicode Equivalent",
            AuxiliaryDisplay::CharacterPageMapping => "Character Page Mapping",
            AuxiliaryDisplay::RequestReport => "Request Report",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x20`: "Sensors"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::Sensors { usage: Sensors::Biometric };
/// let u2 = Usage::new_from_page_and_id(0x20, 0x10).unwrap();
/// let u3 = Usage::from(Sensors::Biometric);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x20, u1.usage_page_value());
/// assert_eq!(0x10, u1.usage_id_value());
/// assert_eq!((0x20 << 16) | 0x10, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Sensors {
    /// Usage ID `0x1`: "Sensor"
    Sensor,
    /// Usage ID `0x10`: "Biometric"
    Biometric,
    /// Usage ID `0x11`: "Biometric: Human Presence"
    BiometricHumanPresence,
    /// Usage ID `0x12`: "Biometric: Human Proximity"
    BiometricHumanProximity,
    /// Usage ID `0x13`: "Biometric: Human Touch"
    BiometricHumanTouch,
    /// Usage ID `0x14`: "Biometric: Blood Pressure"
    BiometricBloodPressure,
    /// Usage ID `0x15`: "Biometric: Body Temperature"
    BiometricBodyTemperature,
    /// Usage ID `0x16`: "Biometric: Heart Rate"
    BiometricHeartRate,
    /// Usage ID `0x17`: "Biometric: Heart Rate Variability"
    BiometricHeartRateVariability,
    /// Usage ID `0x18`: "Biometric: Peripheral Oxygen Saturation"
    BiometricPeripheralOxygenSaturation,
    /// Usage ID `0x19`: "Biometric: Respiratory Rate"
    BiometricRespiratoryRate,
    /// Usage ID `0x20`: "Electrical"
    Electrical,
    /// Usage ID `0x21`: "Electrical: Capacitance"
    ElectricalCapacitance,
    /// Usage ID `0x22`: "Electrical: Current"
    ElectricalCurrent,
    /// Usage ID `0x23`: "Electrical: Power"
    ElectricalPower,
    /// Usage ID `0x24`: "Electrical: Inductance"
    ElectricalInductance,
    /// Usage ID `0x25`: "Electrical: Resistance"
    ElectricalResistance,
    /// Usage ID `0x26`: "Electrical: Voltage"
    ElectricalVoltage,
    /// Usage ID `0x27`: "Electrical: Potentiometer"
    ElectricalPotentiometer,
    /// Usage ID `0x28`: "Electrical: Frequency"
    ElectricalFrequency,
    /// Usage ID `0x29`: "Electrical: Period"
    ElectricalPeriod,
    /// Usage ID `0x30`: "Environmental"
    Environmental,
    /// Usage ID `0x31`: "Environmental: Atmospheric Pressure"
    EnvironmentalAtmosphericPressure,
    /// Usage ID `0x32`: "Environmental: Humidity"
    EnvironmentalHumidity,
    /// Usage ID `0x33`: "Environmental: Temperature"
    EnvironmentalTemperature,
    /// Usage ID `0x34`: "Environmental: Wind Direction"
    EnvironmentalWindDirection,
    /// Usage ID `0x35`: "Environmental: Wind Speed"
    EnvironmentalWindSpeed,
    /// Usage ID `0x36`: "Environmental: Air Quality"
    EnvironmentalAirQuality,
    /// Usage ID `0x37`: "Environmental: Heat Index"
    EnvironmentalHeatIndex,
    /// Usage ID `0x38`: "Environmental: Surface Temperature"
    EnvironmentalSurfaceTemperature,
    /// Usage ID `0x39`: "Environmental: Volatile Organic Compounds"
    EnvironmentalVolatileOrganicCompounds,
    /// Usage ID `0x3A`: "Environmental: Object Presence"
    EnvironmentalObjectPresence,
    /// Usage ID `0x3B`: "Environmental: Object Proximity"
    EnvironmentalObjectProximity,
    /// Usage ID `0x40`: "Light"
    Light,
    /// Usage ID `0x41`: "Light: Ambient Light"
    LightAmbientLight,
    /// Usage ID `0x42`: "Light: Consumer Infrared"
    LightConsumerInfrared,
    /// Usage ID `0x43`: "Light: Infrared Light"
    LightInfraredLight,
    /// Usage ID `0x44`: "Light: Visible Light"
    LightVisibleLight,
    /// Usage ID `0x45`: "Light: Ultraviolet Light"
    LightUltravioletLight,
    /// Usage ID `0x50`: "Location"
    Location,
    /// Usage ID `0x51`: "Location: Broadcast"
    LocationBroadcast,
    /// Usage ID `0x52`: "Location: Dead Reckoning"
    LocationDeadReckoning,
    /// Usage ID `0x53`: "Location: GPS (Global Positioning System)"
    LocationGPSGlobalPositioningSystem,
    /// Usage ID `0x54`: "Location: Lookup"
    LocationLookup,
    /// Usage ID `0x55`: "Location: Other"
    LocationOther,
    /// Usage ID `0x56`: "Location: Static"
    LocationStatic,
    /// Usage ID `0x57`: "Location: Triangulation"
    LocationTriangulation,
    /// Usage ID `0x60`: "Mechanical"
    Mechanical,
    /// Usage ID `0x61`: "Mechanical: Boolean Switch"
    MechanicalBooleanSwitch,
    /// Usage ID `0x62`: "Mechanical: Boolean Switch Array"
    MechanicalBooleanSwitchArray,
    /// Usage ID `0x63`: "Mechanical: Multivalue Switch"
    MechanicalMultivalueSwitch,
    /// Usage ID `0x64`: "Mechanical: Force"
    MechanicalForce,
    /// Usage ID `0x65`: "Mechanical: Pressure"
    MechanicalPressure,
    /// Usage ID `0x66`: "Mechanical: Strain"
    MechanicalStrain,
    /// Usage ID `0x67`: "Mechanical: Weight"
    MechanicalWeight,
    /// Usage ID `0x68`: "Mechanical: Haptic Vibrator"
    MechanicalHapticVibrator,
    /// Usage ID `0x69`: "Mechanical: Hall Effect Switch"
    MechanicalHallEffectSwitch,
    /// Usage ID `0x70`: "Motion"
    Motion,
    /// Usage ID `0x71`: "Motion: Accelerometer 1D"
    MotionAccelerometer1D,
    /// Usage ID `0x72`: "Motion: Accelerometer 2D"
    MotionAccelerometer2D,
    /// Usage ID `0x73`: "Motion: Accelerometer 3D"
    MotionAccelerometer3D,
    /// Usage ID `0x74`: "Motion: Gyrometer 1D"
    MotionGyrometer1D,
    /// Usage ID `0x75`: "Motion: Gyrometer 2D"
    MotionGyrometer2D,
    /// Usage ID `0x76`: "Motion: Gyrometer 3D"
    MotionGyrometer3D,
    /// Usage ID `0x77`: "Motion: Motion Detector"
    MotionMotionDetector,
    /// Usage ID `0x78`: "Motion: Speedometer"
    MotionSpeedometer,
    /// Usage ID `0x79`: "Motion: Accelerometer"
    MotionAccelerometer,
    /// Usage ID `0x7A`: "Motion: Gyrometer"
    MotionGyrometer,
    /// Usage ID `0x7B`: "Motion: Gravity Vector"
    MotionGravityVector,
    /// Usage ID `0x7C`: "Motion: Linear Accelerometer"
    MotionLinearAccelerometer,
    /// Usage ID `0x80`: "Orientation"
    Orientation,
    /// Usage ID `0x81`: "Orientation: Compass 1D"
    OrientationCompass1D,
    /// Usage ID `0x82`: "Orientation: Compass 2D"
    OrientationCompass2D,
    /// Usage ID `0x83`: "Orientation: Compass 3D"
    OrientationCompass3D,
    /// Usage ID `0x84`: "Orientation: Inclinometer 1D"
    OrientationInclinometer1D,
    /// Usage ID `0x85`: "Orientation: Inclinometer 2D"
    OrientationInclinometer2D,
    /// Usage ID `0x86`: "Orientation: Inclinometer 3D"
    OrientationInclinometer3D,
    /// Usage ID `0x87`: "Orientation: Distance 1D"
    OrientationDistance1D,
    /// Usage ID `0x88`: "Orientation: Distance 2D"
    OrientationDistance2D,
    /// Usage ID `0x89`: "Orientation: Distance 3D"
    OrientationDistance3D,
    /// Usage ID `0x8A`: "Orientation: Device Orientation"
    OrientationDeviceOrientation,
    /// Usage ID `0x8B`: "Orientation: Compass"
    OrientationCompass,
    /// Usage ID `0x8C`: "Orientation: Inclinometer"
    OrientationInclinometer,
    /// Usage ID `0x8D`: "Orientation: Distance"
    OrientationDistance,
    /// Usage ID `0x8E`: "Orientation: Relative Orientation"
    OrientationRelativeOrientation,
    /// Usage ID `0x8F`: "Orientation: Simple Orientation"
    OrientationSimpleOrientation,
    /// Usage ID `0x90`: "Scanner"
    Scanner,
    /// Usage ID `0x91`: "Scanner: Barcode"
    ScannerBarcode,
    /// Usage ID `0x92`: "Scanner: RFID"
    ScannerRFID,
    /// Usage ID `0x93`: "Scanner: NFC"
    ScannerNFC,
    /// Usage ID `0xA0`: "Time"
    Time,
    /// Usage ID `0xA1`: "Time: Alarm Timer"
    TimeAlarmTimer,
    /// Usage ID `0xA2`: "Time: Real Time Clock"
    TimeRealTimeClock,
    /// Usage ID `0xB0`: "Personal Activity"
    PersonalActivity,
    /// Usage ID `0xB1`: "Personal Activity: Activity Detection"
    PersonalActivityActivityDetection,
    /// Usage ID `0xB2`: "Personal Activity: Device Position"
    PersonalActivityDevicePosition,
    /// Usage ID `0xB3`: "Personal Activity: Floor Tracker"
    PersonalActivityFloorTracker,
    /// Usage ID `0xB4`: "Personal Activity: Pedometer"
    PersonalActivityPedometer,
    /// Usage ID `0xB5`: "Personal Activity: Step Detection"
    PersonalActivityStepDetection,
    /// Usage ID `0xC0`: "Orientation Extended"
    OrientationExtended,
    /// Usage ID `0xC1`: "Orientation Extended: Geomagnetic Orientation"
    OrientationExtendedGeomagneticOrientation,
    /// Usage ID `0xC2`: "Orientation Extended: Magnetometer"
    OrientationExtendedMagnetometer,
    /// Usage ID `0xD0`: "Gesture"
    Gesture,
    /// Usage ID `0xD1`: "Gesture: Chassis Flip Gesture"
    GestureChassisFlipGesture,
    /// Usage ID `0xD2`: "Gesture: Hinge Fold Gesture"
    GestureHingeFoldGesture,
    /// Usage ID `0xE0`: "Other"
    Other,
    /// Usage ID `0xE1`: "Other: Custom"
    OtherCustom,
    /// Usage ID `0xE2`: "Other: Generic"
    OtherGeneric,
    /// Usage ID `0xE3`: "Other: Generic Enumerator"
    OtherGenericEnumerator,
    /// Usage ID `0xE4`: "Other: Hinge Angle"
    OtherHingeAngle,
    /// Usage ID `0xF0`: "Vendor Reserved 1"
    VendorReserved1,
    /// Usage ID `0xF1`: "Vendor Reserved 2"
    VendorReserved2,
    /// Usage ID `0xF2`: "Vendor Reserved 3"
    VendorReserved3,
    /// Usage ID `0xF3`: "Vendor Reserved 4"
    VendorReserved4,
    /// Usage ID `0xF4`: "Vendor Reserved 5"
    VendorReserved5,
    /// Usage ID `0xF5`: "Vendor Reserved 6"
    VendorReserved6,
    /// Usage ID `0xF6`: "Vendor Reserved 7"
    VendorReserved7,
    /// Usage ID `0xF7`: "Vendor Reserved 8"
    VendorReserved8,
    /// Usage ID `0xF8`: "Vendor Reserved 9"
    VendorReserved9,
    /// Usage ID `0xF9`: "Vendor Reserved 10"
    VendorReserved10,
    /// Usage ID `0xFA`: "Vendor Reserved 11"
    VendorReserved11,
    /// Usage ID `0xFB`: "Vendor Reserved 12"
    VendorReserved12,
    /// Usage ID `0xFC`: "Vendor Reserved 13"
    VendorReserved13,
    /// Usage ID `0xFD`: "Vendor Reserved 14"
    VendorReserved14,
    /// Usage ID `0xFE`: "Vendor Reserved 15"
    VendorReserved15,
    /// Usage ID `0xFF`: "Vendor Reserved 16"
    VendorReserved16,
    /// Usage ID `0x200`: "Event"
    Event,
    /// Usage ID `0x201`: "Event: Sensor State"
    EventSensorState,
    /// Usage ID `0x202`: "Event: Sensor Event"
    EventSensorEvent,
    /// Usage ID `0x300`: "Property"
    Property,
    /// Usage ID `0x301`: "Property: Friendly Name"
    PropertyFriendlyName,
    /// Usage ID `0x302`: "Property: Persistent Unique ID"
    PropertyPersistentUniqueID,
    /// Usage ID `0x303`: "Property: Sensor Status"
    PropertySensorStatus,
    /// Usage ID `0x304`: "Property: Minimum Report Interval"
    PropertyMinimumReportInterval,
    /// Usage ID `0x305`: "Property: Sensor Manufacturer"
    PropertySensorManufacturer,
    /// Usage ID `0x306`: "Property: Sensor Model"
    PropertySensorModel,
    /// Usage ID `0x307`: "Property: Sensor Serial Number"
    PropertySensorSerialNumber,
    /// Usage ID `0x308`: "Property: Sensor Description"
    PropertySensorDescription,
    /// Usage ID `0x309`: "Property: Sensor Connection Type"
    PropertySensorConnectionType,
    /// Usage ID `0x30A`: "Property: Sensor Device Path"
    PropertySensorDevicePath,
    /// Usage ID `0x30B`: "Property: Hardware Revision"
    PropertyHardwareRevision,
    /// Usage ID `0x30C`: "Property: Firmware Version"
    PropertyFirmwareVersion,
    /// Usage ID `0x30D`: "Property: Release Date"
    PropertyReleaseDate,
    /// Usage ID `0x30E`: "Property: Report Interval"
    PropertyReportInterval,
    /// Usage ID `0x30F`: "Property: Change Sensitivity Absolute"
    PropertyChangeSensitivityAbsolute,
    /// Usage ID `0x310`: "Property: Change Sensitivity Percent of Range"
    PropertyChangeSensitivityPercentofRange,
    /// Usage ID `0x311`: "Property: Change Sensitivity Percent Relative"
    PropertyChangeSensitivityPercentRelative,
    /// Usage ID `0x312`: "Property: Accuracy"
    PropertyAccuracy,
    /// Usage ID `0x313`: "Property: Resolution"
    PropertyResolution,
    /// Usage ID `0x314`: "Property: Maximum"
    PropertyMaximum,
    /// Usage ID `0x315`: "Property: Minimum"
    PropertyMinimum,
    /// Usage ID `0x316`: "Property: Reporting State"
    PropertyReportingState,
    /// Usage ID `0x317`: "Property: Sampling Rate"
    PropertySamplingRate,
    /// Usage ID `0x318`: "Property: Response Curve"
    PropertyResponseCurve,
    /// Usage ID `0x319`: "Property: Power State"
    PropertyPowerState,
    /// Usage ID `0x31A`: "Property: Maximum FIFO Events"
    PropertyMaximumFIFOEvents,
    /// Usage ID `0x31B`: "Property: Report Latency"
    PropertyReportLatency,
    /// Usage ID `0x31C`: "Property: Flush FIFO Events"
    PropertyFlushFIFOEvents,
    /// Usage ID `0x31D`: "Property: Maximum Power Consumption"
    PropertyMaximumPowerConsumption,
    /// Usage ID `0x31E`: "Property: Is Primary"
    PropertyIsPrimary,
    /// Usage ID `0x31F`: "Property: Human Presence Detection Type"
    PropertyHumanPresenceDetectionType,
    /// Usage ID `0x400`: "Data Field: Location"
    DataFieldLocation,
    /// Usage ID `0x402`: "Data Field: Altitude Antenna Sea Level"
    DataFieldAltitudeAntennaSeaLevel,
    /// Usage ID `0x403`: "Data Field: Differential Reference Station ID"
    DataFieldDifferentialReferenceStationID,
    /// Usage ID `0x404`: "Data Field: Altitude Ellipsoid Error"
    DataFieldAltitudeEllipsoidError,
    /// Usage ID `0x405`: "Data Field: Altitude Ellipsoid"
    DataFieldAltitudeEllipsoid,
    /// Usage ID `0x406`: "Data Field: Altitude Sea Level Error"
    DataFieldAltitudeSeaLevelError,
    /// Usage ID `0x407`: "Data Field: Altitude Sea Level"
    DataFieldAltitudeSeaLevel,
    /// Usage ID `0x408`: "Data Field: Differential GPS Data Age"
    DataFieldDifferentialGPSDataAge,
    /// Usage ID `0x409`: "Data Field: Error Radius"
    DataFieldErrorRadius,
    /// Usage ID `0x40A`: "Data Field: Fix Quality"
    DataFieldFixQuality,
    /// Usage ID `0x40B`: "Data Field: Fix Type"
    DataFieldFixType,
    /// Usage ID `0x40C`: "Data Field: Geoidal Separation"
    DataFieldGeoidalSeparation,
    /// Usage ID `0x40D`: "Data Field: GPS Operation Mode"
    DataFieldGPSOperationMode,
    /// Usage ID `0x40E`: "Data Field: GPS Selection Mode"
    DataFieldGPSSelectionMode,
    /// Usage ID `0x40F`: "Data Field: GPS Status"
    DataFieldGPSStatus,
    /// Usage ID `0x410`: "Data Field: Position Dilution of Precision"
    DataFieldPositionDilutionofPrecision,
    /// Usage ID `0x411`: "Data Field: Horizontal Dilution of Precision"
    DataFieldHorizontalDilutionofPrecision,
    /// Usage ID `0x412`: "Data Field: Vertical Dilution of Precision"
    DataFieldVerticalDilutionofPrecision,
    /// Usage ID `0x413`: "Data Field: Latitude"
    DataFieldLatitude,
    /// Usage ID `0x414`: "Data Field: Longitude"
    DataFieldLongitude,
    /// Usage ID `0x415`: "Data Field: True Heading"
    DataFieldTrueHeading,
    /// Usage ID `0x416`: "Data Field: Magnetic Heading"
    DataFieldMagneticHeading,
    /// Usage ID `0x417`: "Data Field: Magnetic Variation"
    DataFieldMagneticVariation,
    /// Usage ID `0x418`: "Data Field: Speed"
    DataFieldSpeed,
    /// Usage ID `0x419`: "Data Field: Satellites in View"
    DataFieldSatellitesinView,
    /// Usage ID `0x41A`: "Data Field: Satellites in View Azimuth"
    DataFieldSatellitesinViewAzimuth,
    /// Usage ID `0x41B`: "Data Field: Satellites in View Elevation"
    DataFieldSatellitesinViewElevation,
    /// Usage ID `0x41C`: "Data Field: Satellites in View IDs"
    DataFieldSatellitesinViewIDs,
    /// Usage ID `0x41D`: "Data Field: Satellites in View PRNs"
    DataFieldSatellitesinViewPRNs,
    /// Usage ID `0x41E`: "Data Field: Satellites in View S/N Ratios"
    DataFieldSatellitesinViewSNRatios,
    /// Usage ID `0x41F`: "Data Field: Satellites Used Count"
    DataFieldSatellitesUsedCount,
    /// Usage ID `0x420`: "Data Field: Satellites Used PRNs"
    DataFieldSatellitesUsedPRNs,
    /// Usage ID `0x421`: "Data Field: NMEA Sentence"
    DataFieldNMEASentence,
    /// Usage ID `0x422`: "Data Field: Address Line 1"
    DataFieldAddressLine1,
    /// Usage ID `0x423`: "Data Field: Address Line 2"
    DataFieldAddressLine2,
    /// Usage ID `0x424`: "Data Field: City"
    DataFieldCity,
    /// Usage ID `0x425`: "Data Field: State or Province"
    DataFieldStateorProvince,
    /// Usage ID `0x426`: "Data Field: Country or Region"
    DataFieldCountryorRegion,
    /// Usage ID `0x427`: "Data Field: Postal Code"
    DataFieldPostalCode,
    /// Usage ID `0x42A`: "Property: Location"
    PropertyLocation,
    /// Usage ID `0x42B`: "Property: Location Desired Accuracy"
    PropertyLocationDesiredAccuracy,
    /// Usage ID `0x430`: "Data Field: Environmental"
    DataFieldEnvironmental,
    /// Usage ID `0x431`: "Data Field: Atmospheric Pressure"
    DataFieldAtmosphericPressure,
    /// Usage ID `0x433`: "Data Field: Relative Humidity"
    DataFieldRelativeHumidity,
    /// Usage ID `0x434`: "Data Field: Temperature"
    DataFieldTemperature,
    /// Usage ID `0x435`: "Data Field: Wind Direction"
    DataFieldWindDirection,
    /// Usage ID `0x436`: "Data Field: Wind Speed"
    DataFieldWindSpeed,
    /// Usage ID `0x437`: "Data Field: Air Quality Index"
    DataFieldAirQualityIndex,
    /// Usage ID `0x438`: "Data Field: Equivalent CO2"
    DataFieldEquivalentCO2,
    /// Usage ID `0x439`: "Data Field: Volatile Organic Compound Concentration"
    DataFieldVolatileOrganicCompoundConcentration,
    /// Usage ID `0x43A`: "Data Field: Object Presence"
    DataFieldObjectPresence,
    /// Usage ID `0x43B`: "Data Field: Object Proximity Range"
    DataFieldObjectProximityRange,
    /// Usage ID `0x43C`: "Data Field: Object Proximity Out of Range"
    DataFieldObjectProximityOutofRange,
    /// Usage ID `0x440`: "Property: Environmental"
    PropertyEnvironmental,
    /// Usage ID `0x441`: "Property: Reference Pressure"
    PropertyReferencePressure,
    /// Usage ID `0x450`: "Data Field: Motion"
    DataFieldMotion,
    /// Usage ID `0x451`: "Data Field: Motion State"
    DataFieldMotionState,
    /// Usage ID `0x452`: "Data Field: Acceleration"
    DataFieldAcceleration,
    /// Usage ID `0x453`: "Data Field: Acceleration Axis X"
    DataFieldAccelerationAxisX,
    /// Usage ID `0x454`: "Data Field: Acceleration Axis Y"
    DataFieldAccelerationAxisY,
    /// Usage ID `0x455`: "Data Field: Acceleration Axis Z"
    DataFieldAccelerationAxisZ,
    /// Usage ID `0x456`: "Data Field: Angular Velocity"
    DataFieldAngularVelocity,
    /// Usage ID `0x457`: "Data Field: Angular Velocity about X Axis"
    DataFieldAngularVelocityaboutXAxis,
    /// Usage ID `0x458`: "Data Field: Angular Velocity about Y Axis"
    DataFieldAngularVelocityaboutYAxis,
    /// Usage ID `0x459`: "Data Field: Angular Velocity about Z Axis"
    DataFieldAngularVelocityaboutZAxis,
    /// Usage ID `0x45A`: "Data Field: Angular Position"
    DataFieldAngularPosition,
    /// Usage ID `0x45B`: "Data Field: Angular Position about X Axis"
    DataFieldAngularPositionaboutXAxis,
    /// Usage ID `0x45C`: "Data Field: Angular Position about Y Axis"
    DataFieldAngularPositionaboutYAxis,
    /// Usage ID `0x45D`: "Data Field: Angular Position about Z Axis"
    DataFieldAngularPositionaboutZAxis,
    /// Usage ID `0x45E`: "Data Field: Motion Speed"
    DataFieldMotionSpeed,
    /// Usage ID `0x45F`: "Data Field: Motion Intensity"
    DataFieldMotionIntensity,
    /// Usage ID `0x470`: "Data Field: Orientation"
    DataFieldOrientation,
    /// Usage ID `0x471`: "Data Field: Heading"
    DataFieldHeading,
    /// Usage ID `0x472`: "Data Field: Heading X Axis"
    DataFieldHeadingXAxis,
    /// Usage ID `0x473`: "Data Field: Heading Y Axis"
    DataFieldHeadingYAxis,
    /// Usage ID `0x474`: "Data Field: Heading Z Axis"
    DataFieldHeadingZAxis,
    /// Usage ID `0x475`: "Data Field: Heading Compensated Magnetic North"
    DataFieldHeadingCompensatedMagneticNorth,
    /// Usage ID `0x476`: "Data Field: Heading Compensated True North"
    DataFieldHeadingCompensatedTrueNorth,
    /// Usage ID `0x477`: "Data Field: Heading Magnetic North"
    DataFieldHeadingMagneticNorth,
    /// Usage ID `0x478`: "Data Field: Heading True North"
    DataFieldHeadingTrueNorth,
    /// Usage ID `0x479`: "Data Field: Distance"
    DataFieldDistance,
    /// Usage ID `0x47A`: "Data Field: Distance X Axis"
    DataFieldDistanceXAxis,
    /// Usage ID `0x47B`: "Data Field: Distance Y Axis"
    DataFieldDistanceYAxis,
    /// Usage ID `0x47C`: "Data Field: Distance Z Axis"
    DataFieldDistanceZAxis,
    /// Usage ID `0x47D`: "Data Field: Distance Out-of-Range"
    DataFieldDistanceOutofRange,
    /// Usage ID `0x47E`: "Data Field: Tilt"
    DataFieldTilt,
    /// Usage ID `0x47F`: "Data Field: Tilt X Axis"
    DataFieldTiltXAxis,
    /// Usage ID `0x480`: "Data Field: Tilt Y Axis"
    DataFieldTiltYAxis,
    /// Usage ID `0x481`: "Data Field: Tilt Z Axis"
    DataFieldTiltZAxis,
    /// Usage ID `0x482`: "Data Field: Rotation Matrix"
    DataFieldRotationMatrix,
    /// Usage ID `0x483`: "Data Field: Quaternion"
    DataFieldQuaternion,
    /// Usage ID `0x484`: "Data Field: Magnetic Flux"
    DataFieldMagneticFlux,
    /// Usage ID `0x485`: "Data Field: Magnetic Flux X Axis"
    DataFieldMagneticFluxXAxis,
    /// Usage ID `0x486`: "Data Field: Magnetic Flux Y Axis"
    DataFieldMagneticFluxYAxis,
    /// Usage ID `0x487`: "Data Field: Magnetic Flux Z Axis"
    DataFieldMagneticFluxZAxis,
    /// Usage ID `0x488`: "Data Field: Magnetometer Accuracy"
    DataFieldMagnetometerAccuracy,
    /// Usage ID `0x489`: "Data Field: Simple Orientation Direction"
    DataFieldSimpleOrientationDirection,
    /// Usage ID `0x490`: "Data Field: Mechanical"
    DataFieldMechanical,
    /// Usage ID `0x491`: "Data Field: Boolean Switch State"
    DataFieldBooleanSwitchState,
    /// Usage ID `0x492`: "Data Field: Boolean Switch Array States"
    DataFieldBooleanSwitchArrayStates,
    /// Usage ID `0x493`: "Data Field: Multivalue Switch Value"
    DataFieldMultivalueSwitchValue,
    /// Usage ID `0x494`: "Data Field: Force"
    DataFieldForce,
    /// Usage ID `0x495`: "Data Field: Absolute Pressure"
    DataFieldAbsolutePressure,
    /// Usage ID `0x496`: "Data Field: Gauge Pressure"
    DataFieldGaugePressure,
    /// Usage ID `0x497`: "Data Field: Strain"
    DataFieldStrain,
    /// Usage ID `0x498`: "Data Field: Weight"
    DataFieldWeight,
    /// Usage ID `0x4A0`: "Property: Mechanical"
    PropertyMechanical,
    /// Usage ID `0x4A1`: "Property: Vibration State"
    PropertyVibrationState,
    /// Usage ID `0x4A2`: "Property: Forward Vibration Speed"
    PropertyForwardVibrationSpeed,
    /// Usage ID `0x4A3`: "Property: Backward Vibration Speed"
    PropertyBackwardVibrationSpeed,
    /// Usage ID `0x4B0`: "Data Field: Biometric"
    DataFieldBiometric,
    /// Usage ID `0x4B1`: "Data Field: Human Presence"
    DataFieldHumanPresence,
    /// Usage ID `0x4B2`: "Data Field: Human Proximity Range"
    DataFieldHumanProximityRange,
    /// Usage ID `0x4B3`: "Data Field: Human Proximity Out of Range"
    DataFieldHumanProximityOutofRange,
    /// Usage ID `0x4B4`: "Data Field: Human Touch State"
    DataFieldHumanTouchState,
    /// Usage ID `0x4B5`: "Data Field: Blood Pressure"
    DataFieldBloodPressure,
    /// Usage ID `0x4B6`: "Data Field: Blood Pressure Diastolic"
    DataFieldBloodPressureDiastolic,
    /// Usage ID `0x4B7`: "Data Field: Blood Pressure Systolic"
    DataFieldBloodPressureSystolic,
    /// Usage ID `0x4B8`: "Data Field: Heart Rate"
    DataFieldHeartRate,
    /// Usage ID `0x4B9`: "Data Field: Resting Heart Rate"
    DataFieldRestingHeartRate,
    /// Usage ID `0x4BA`: "Data Field: Heartbeat Interval"
    DataFieldHeartbeatInterval,
    /// Usage ID `0x4BB`: "Data Field: Respiratory Rate"
    DataFieldRespiratoryRate,
    /// Usage ID `0x4BC`: "Data Field: SpO2"
    DataFieldSpO2,
    /// Usage ID `0x4BD`: "Data Field: Human Attention Detected"
    DataFieldHumanAttentionDetected,
    /// Usage ID `0x4BE`: "Data Field: Human Head Azimuth"
    DataFieldHumanHeadAzimuth,
    /// Usage ID `0x4BF`: "Data Field: Human Head Altitude"
    DataFieldHumanHeadAltitude,
    /// Usage ID `0x4C0`: "Data Field: Human Head Roll"
    DataFieldHumanHeadRoll,
    /// Usage ID `0x4C1`: "Data Field: Human Head Pitch"
    DataFieldHumanHeadPitch,
    /// Usage ID `0x4C2`: "Data Field: Human Head Yaw"
    DataFieldHumanHeadYaw,
    /// Usage ID `0x4C3`: "Data Field: Human Correlation Id"
    DataFieldHumanCorrelationId,
    /// Usage ID `0x4D0`: "Data Field: Light"
    DataFieldLight,
    /// Usage ID `0x4D1`: "Data Field: Illuminance"
    DataFieldIlluminance,
    /// Usage ID `0x4D2`: "Data Field: Color Temperature"
    DataFieldColorTemperature,
    /// Usage ID `0x4D3`: "Data Field: Chromaticity"
    DataFieldChromaticity,
    /// Usage ID `0x4D4`: "Data Field: Chromaticity X"
    DataFieldChromaticityX,
    /// Usage ID `0x4D5`: "Data Field: Chromaticity Y"
    DataFieldChromaticityY,
    /// Usage ID `0x4D6`: "Data Field: Consumer IR Sentence Receive"
    DataFieldConsumerIRSentenceReceive,
    /// Usage ID `0x4D7`: "Data Field: Infrared Light"
    DataFieldInfraredLight,
    /// Usage ID `0x4D8`: "Data Field: Red Light"
    DataFieldRedLight,
    /// Usage ID `0x4D9`: "Data Field: Green Light"
    DataFieldGreenLight,
    /// Usage ID `0x4DA`: "Data Field: Blue Light"
    DataFieldBlueLight,
    /// Usage ID `0x4DB`: "Data Field: Ultraviolet A Light"
    DataFieldUltravioletALight,
    /// Usage ID `0x4DC`: "Data Field: Ultraviolet B Light"
    DataFieldUltravioletBLight,
    /// Usage ID `0x4DD`: "Data Field: Ultraviolet Index"
    DataFieldUltravioletIndex,
    /// Usage ID `0x4DE`: "Data Field: Near Infrared Light"
    DataFieldNearInfraredLight,
    /// Usage ID `0x4DF`: "Property: Light"
    PropertyLight,
    /// Usage ID `0x4E0`: "Property: Consumer IR Sentence Send"
    PropertyConsumerIRSentenceSend,
    /// Usage ID `0x4E2`: "Property: Auto Brightness Preferred"
    PropertyAutoBrightnessPreferred,
    /// Usage ID `0x4E3`: "Property: Auto Color Preferred"
    PropertyAutoColorPreferred,
    /// Usage ID `0x4F0`: "Data Field: Scanner"
    DataFieldScanner,
    /// Usage ID `0x4F1`: "Data Field: RFID Tag 40 Bit"
    DataFieldRFIDTag40Bit,
    /// Usage ID `0x4F2`: "Data Field: NFC Sentence Receive"
    DataFieldNFCSentenceReceive,
    /// Usage ID `0x4F8`: "Property: Scanner"
    PropertyScanner,
    /// Usage ID `0x4F9`: "Property: NFC Sentence Send"
    PropertyNFCSentenceSend,
    /// Usage ID `0x500`: "Data Field: Electrical"
    DataFieldElectrical,
    /// Usage ID `0x501`: "Data Field: Capacitance"
    DataFieldCapacitance,
    /// Usage ID `0x502`: "Data Field: Current"
    DataFieldCurrent,
    /// Usage ID `0x503`: "Data Field: Electrical Power"
    DataFieldElectricalPower,
    /// Usage ID `0x504`: "Data Field: Inductance"
    DataFieldInductance,
    /// Usage ID `0x505`: "Data Field: Resistance"
    DataFieldResistance,
    /// Usage ID `0x506`: "Data Field: Voltage"
    DataFieldVoltage,
    /// Usage ID `0x507`: "Data Field: Frequency"
    DataFieldFrequency,
    /// Usage ID `0x508`: "Data Field: Period"
    DataFieldPeriod,
    /// Usage ID `0x509`: "Data Field: Percent of Range"
    DataFieldPercentofRange,
    /// Usage ID `0x520`: "Data Field: Time"
    DataFieldTime,
    /// Usage ID `0x521`: "Data Field: Year"
    DataFieldYear,
    /// Usage ID `0x522`: "Data Field: Month"
    DataFieldMonth,
    /// Usage ID `0x523`: "Data Field: Day"
    DataFieldDay,
    /// Usage ID `0x524`: "Data Field: Day of Week"
    DataFieldDayofWeek,
    /// Usage ID `0x525`: "Data Field: Hour"
    DataFieldHour,
    /// Usage ID `0x526`: "Data Field: Minute"
    DataFieldMinute,
    /// Usage ID `0x527`: "Data Field: Second"
    DataFieldSecond,
    /// Usage ID `0x528`: "Data Field: Millisecond"
    DataFieldMillisecond,
    /// Usage ID `0x529`: "Data Field: Timestamp"
    DataFieldTimestamp,
    /// Usage ID `0x52A`: "Data Field: Julian Day of Year"
    DataFieldJulianDayofYear,
    /// Usage ID `0x52B`: "Data Field: Time Since System Boot"
    DataFieldTimeSinceSystemBoot,
    /// Usage ID `0x530`: "Property: Time"
    PropertyTime,
    /// Usage ID `0x531`: "Property: Time Zone Offset from UTC"
    PropertyTimeZoneOffsetfromUTC,
    /// Usage ID `0x532`: "Property: Time Zone Name"
    PropertyTimeZoneName,
    /// Usage ID `0x533`: "Property: Daylight Savings Time Observed"
    PropertyDaylightSavingsTimeObserved,
    /// Usage ID `0x534`: "Property: Time Trim Adjustment"
    PropertyTimeTrimAdjustment,
    /// Usage ID `0x535`: "Property: Arm Alarm"
    PropertyArmAlarm,
    /// Usage ID `0x540`: "Data Field: Custom"
    DataFieldCustom,
    /// Usage ID `0x541`: "Data Field: Custom Usage"
    DataFieldCustomUsage,
    /// Usage ID `0x542`: "Data Field: Custom Boolean Array"
    DataFieldCustomBooleanArray,
    /// Usage ID `0x543`: "Data Field: Custom Value"
    DataFieldCustomValue,
    /// Usage ID `0x544`: "Data Field: Custom Value 1"
    DataFieldCustomValue1,
    /// Usage ID `0x545`: "Data Field: Custom Value 2"
    DataFieldCustomValue2,
    /// Usage ID `0x546`: "Data Field: Custom Value 3"
    DataFieldCustomValue3,
    /// Usage ID `0x547`: "Data Field: Custom Value 4"
    DataFieldCustomValue4,
    /// Usage ID `0x548`: "Data Field: Custom Value 5"
    DataFieldCustomValue5,
    /// Usage ID `0x549`: "Data Field: Custom Value 6"
    DataFieldCustomValue6,
    /// Usage ID `0x54A`: "Data Field: Custom Value 7"
    DataFieldCustomValue7,
    /// Usage ID `0x54B`: "Data Field: Custom Value 8"
    DataFieldCustomValue8,
    /// Usage ID `0x54C`: "Data Field: Custom Value 9"
    DataFieldCustomValue9,
    /// Usage ID `0x54D`: "Data Field: Custom Value 10"
    DataFieldCustomValue10,
    /// Usage ID `0x54E`: "Data Field: Custom Value 11"
    DataFieldCustomValue11,
    /// Usage ID `0x54F`: "Data Field: Custom Value 12"
    DataFieldCustomValue12,
    /// Usage ID `0x550`: "Data Field: Custom Value 13"
    DataFieldCustomValue13,
    /// Usage ID `0x551`: "Data Field: Custom Value 14"
    DataFieldCustomValue14,
    /// Usage ID `0x552`: "Data Field: Custom Value 15"
    DataFieldCustomValue15,
    /// Usage ID `0x553`: "Data Field: Custom Value 16"
    DataFieldCustomValue16,
    /// Usage ID `0x554`: "Data Field: Custom Value 17"
    DataFieldCustomValue17,
    /// Usage ID `0x555`: "Data Field: Custom Value 18"
    DataFieldCustomValue18,
    /// Usage ID `0x556`: "Data Field: Custom Value 19"
    DataFieldCustomValue19,
    /// Usage ID `0x557`: "Data Field: Custom Value 20"
    DataFieldCustomValue20,
    /// Usage ID `0x558`: "Data Field: Custom Value 21"
    DataFieldCustomValue21,
    /// Usage ID `0x559`: "Data Field: Custom Value 22"
    DataFieldCustomValue22,
    /// Usage ID `0x55A`: "Data Field: Custom Value 23"
    DataFieldCustomValue23,
    /// Usage ID `0x55B`: "Data Field: Custom Value 24"
    DataFieldCustomValue24,
    /// Usage ID `0x55C`: "Data Field: Custom Value 25"
    DataFieldCustomValue25,
    /// Usage ID `0x55D`: "Data Field: Custom Value 26"
    DataFieldCustomValue26,
    /// Usage ID `0x55E`: "Data Field: Custom Value 27"
    DataFieldCustomValue27,
    /// Usage ID `0x55F`: "Data Field: Custom Value 28"
    DataFieldCustomValue28,
    /// Usage ID `0x560`: "Data Field: Generic"
    DataFieldGeneric,
    /// Usage ID `0x561`: "Data Field: Generic GUID or PROPERTYKEY"
    DataFieldGenericGUIDorPROPERTYKEY,
    /// Usage ID `0x562`: "Data Field: Generic Category GUID"
    DataFieldGenericCategoryGUID,
    /// Usage ID `0x563`: "Data Field: Generic Type GUID"
    DataFieldGenericTypeGUID,
    /// Usage ID `0x564`: "Data Field: Generic Event PROPERTYKEY"
    DataFieldGenericEventPROPERTYKEY,
    /// Usage ID `0x565`: "Data Field: Generic Property PROPERTYKEY"
    DataFieldGenericPropertyPROPERTYKEY,
    /// Usage ID `0x566`: "Data Field: Generic Data Field PROPERTYKEY"
    DataFieldGenericDataFieldPROPERTYKEY,
    /// Usage ID `0x567`: "Data Field: Generic Event"
    DataFieldGenericEvent,
    /// Usage ID `0x568`: "Data Field: Generic Property"
    DataFieldGenericProperty,
    /// Usage ID `0x569`: "Data Field: Generic Data Field"
    DataFieldGenericDataField,
    /// Usage ID `0x56A`: "Data Field: Enumerator Table Row Index"
    DataFieldEnumeratorTableRowIndex,
    /// Usage ID `0x56B`: "Data Field: Enumerator Table Row Count"
    DataFieldEnumeratorTableRowCount,
    /// Usage ID `0x56C`: "Data Field: Generic GUID or PROPERTYKEY kind"
    DataFieldGenericGUIDorPROPERTYKEYkind,
    /// Usage ID `0x56D`: "Data Field: Generic GUID"
    DataFieldGenericGUID,
    /// Usage ID `0x56E`: "Data Field: Generic PROPERTYKEY"
    DataFieldGenericPROPERTYKEY,
    /// Usage ID `0x56F`: "Data Field: Generic Top Level Collection ID"
    DataFieldGenericTopLevelCollectionID,
    /// Usage ID `0x570`: "Data Field: Generic Report ID"
    DataFieldGenericReportID,
    /// Usage ID `0x571`: "Data Field: Generic Report Item Position Index"
    DataFieldGenericReportItemPositionIndex,
    /// Usage ID `0x572`: "Data Field: Generic Firmware VARTYPE"
    DataFieldGenericFirmwareVARTYPE,
    /// Usage ID `0x573`: "Data Field: Generic Unit of Measure"
    DataFieldGenericUnitofMeasure,
    /// Usage ID `0x574`: "Data Field: Generic Unit Exponent"
    DataFieldGenericUnitExponent,
    /// Usage ID `0x575`: "Data Field: Generic Report Size"
    DataFieldGenericReportSize,
    /// Usage ID `0x576`: "Data Field: Generic Report Count"
    DataFieldGenericReportCount,
    /// Usage ID `0x580`: "Property: Generic"
    PropertyGeneric,
    /// Usage ID `0x581`: "Property: Enumerator Table Row Index"
    PropertyEnumeratorTableRowIndex,
    /// Usage ID `0x582`: "Property: Enumerator Table Row Count"
    PropertyEnumeratorTableRowCount,
    /// Usage ID `0x590`: "Data Field: Personal Activity"
    DataFieldPersonalActivity,
    /// Usage ID `0x591`: "Data Field: Activity Type"
    DataFieldActivityType,
    /// Usage ID `0x592`: "Data Field: Activity State"
    DataFieldActivityState,
    /// Usage ID `0x593`: "Data Field: Device Position"
    DataFieldDevicePosition,
    /// Usage ID `0x594`: "Data Field: Step Count"
    DataFieldStepCount,
    /// Usage ID `0x595`: "Data Field: Step Count Reset"
    DataFieldStepCountReset,
    /// Usage ID `0x596`: "Data Field: Step Duration"
    DataFieldStepDuration,
    /// Usage ID `0x597`: "Data Field: Step Type"
    DataFieldStepType,
    /// Usage ID `0x5A0`: "Property: Minimum Activity Detection Interval"
    PropertyMinimumActivityDetectionInterval,
    /// Usage ID `0x5A1`: "Property: Supported Activity Types"
    PropertySupportedActivityTypes,
    /// Usage ID `0x5A2`: "Property: Subscribed Activity Types"
    PropertySubscribedActivityTypes,
    /// Usage ID `0x5A3`: "Property: Supported Step Types"
    PropertySupportedStepTypes,
    /// Usage ID `0x5A4`: "Property: Subscribed Step Types"
    PropertySubscribedStepTypes,
    /// Usage ID `0x5A5`: "Property: Floor Height"
    PropertyFloorHeight,
    /// Usage ID `0x5B0`: "Data Field: Custom Type ID"
    DataFieldCustomTypeID,
    /// Usage ID `0x5C0`: "Property: Custom"
    PropertyCustom,
    /// Usage ID `0x5C1`: "Property: Custom Value 1"
    PropertyCustomValue1,
    /// Usage ID `0x5C2`: "Property: Custom Value 2"
    PropertyCustomValue2,
    /// Usage ID `0x5C3`: "Property: Custom Value 3"
    PropertyCustomValue3,
    /// Usage ID `0x5C4`: "Property: Custom Value 4"
    PropertyCustomValue4,
    /// Usage ID `0x5C5`: "Property: Custom Value 5"
    PropertyCustomValue5,
    /// Usage ID `0x5C6`: "Property: Custom Value 6"
    PropertyCustomValue6,
    /// Usage ID `0x5C7`: "Property: Custom Value 7"
    PropertyCustomValue7,
    /// Usage ID `0x5C8`: "Property: Custom Value 8"
    PropertyCustomValue8,
    /// Usage ID `0x5C9`: "Property: Custom Value 9"
    PropertyCustomValue9,
    /// Usage ID `0x5CA`: "Property: Custom Value 10"
    PropertyCustomValue10,
    /// Usage ID `0x5CB`: "Property: Custom Value 11"
    PropertyCustomValue11,
    /// Usage ID `0x5CC`: "Property: Custom Value 12"
    PropertyCustomValue12,
    /// Usage ID `0x5CD`: "Property: Custom Value 13"
    PropertyCustomValue13,
    /// Usage ID `0x5CE`: "Property: Custom Value 14"
    PropertyCustomValue14,
    /// Usage ID `0x5CF`: "Property: Custom Value 15"
    PropertyCustomValue15,
    /// Usage ID `0x5D0`: "Property: Custom Value 16"
    PropertyCustomValue16,
    /// Usage ID `0x5E0`: "Data Field: Hinge"
    DataFieldHinge,
    /// Usage ID `0x5E1`: "Data Field: Hinge Angle"
    DataFieldHingeAngle,
    /// Usage ID `0x5F0`: "Data Field: Gesture Sensor"
    DataFieldGestureSensor,
    /// Usage ID `0x5F1`: "Data Field: Gesture State"
    DataFieldGestureState,
    /// Usage ID `0x5F2`: "Data Field: Hinge Fold Initial Angle"
    DataFieldHingeFoldInitialAngle,
    /// Usage ID `0x5F3`: "Data Field: Hinge Fold Final Angle"
    DataFieldHingeFoldFinalAngle,
    /// Usage ID `0x5F4`: "Data Field: Hinge Fold Contributing Panel"
    DataFieldHingeFoldContributingPanel,
    /// Usage ID `0x5F5`: "Data Field: Hinge Fold Type"
    DataFieldHingeFoldType,
    /// Usage ID `0x800`: "Sensor State: Undefined"
    SensorStateUndefined,
    /// Usage ID `0x801`: "Sensor State: Ready"
    SensorStateReady,
    /// Usage ID `0x802`: "Sensor State: Not Available"
    SensorStateNotAvailable,
    /// Usage ID `0x803`: "Sensor State: No Data"
    SensorStateNoData,
    /// Usage ID `0x804`: "Sensor State: Initializing"
    SensorStateInitializing,
    /// Usage ID `0x805`: "Sensor State: Access Denied"
    SensorStateAccessDenied,
    /// Usage ID `0x806`: "Sensor State: Error"
    SensorStateError,
    /// Usage ID `0x810`: "Sensor Event: Unknown"
    SensorEventUnknown,
    /// Usage ID `0x811`: "Sensor Event: State Changed"
    SensorEventStateChanged,
    /// Usage ID `0x812`: "Sensor Event: Property Changed"
    SensorEventPropertyChanged,
    /// Usage ID `0x813`: "Sensor Event: Data Updated"
    SensorEventDataUpdated,
    /// Usage ID `0x814`: "Sensor Event: Poll Response"
    SensorEventPollResponse,
    /// Usage ID `0x815`: "Sensor Event: Change Sensitivity"
    SensorEventChangeSensitivity,
    /// Usage ID `0x816`: "Sensor Event: Range Maximum Reached"
    SensorEventRangeMaximumReached,
    /// Usage ID `0x817`: "Sensor Event: Range Minimum Reached"
    SensorEventRangeMinimumReached,
    /// Usage ID `0x818`: "Sensor Event: High Threshold Cross Upward"
    SensorEventHighThresholdCrossUpward,
    /// Usage ID `0x819`: "Sensor Event: High Threshold Cross Downward"
    SensorEventHighThresholdCrossDownward,
    /// Usage ID `0x81A`: "Sensor Event: Low Threshold Cross Upward"
    SensorEventLowThresholdCrossUpward,
    /// Usage ID `0x81B`: "Sensor Event: Low Threshold Cross Downward"
    SensorEventLowThresholdCrossDownward,
    /// Usage ID `0x81C`: "Sensor Event: Zero Threshold Cross Upward"
    SensorEventZeroThresholdCrossUpward,
    /// Usage ID `0x81D`: "Sensor Event: Zero Threshold Cross Downward"
    SensorEventZeroThresholdCrossDownward,
    /// Usage ID `0x81E`: "Sensor Event: Period Exceeded"
    SensorEventPeriodExceeded,
    /// Usage ID `0x81F`: "Sensor Event: Frequency Exceeded"
    SensorEventFrequencyExceeded,
    /// Usage ID `0x820`: "Sensor Event: Complex Trigger"
    SensorEventComplexTrigger,
    /// Usage ID `0x830`: "Connection Type: PC Integrated"
    ConnectionTypePCIntegrated,
    /// Usage ID `0x831`: "Connection Type: PC Attached"
    ConnectionTypePCAttached,
    /// Usage ID `0x832`: "Connection Type: PC External"
    ConnectionTypePCExternal,
    /// Usage ID `0x840`: "Reporting State: Report No Events"
    ReportingStateReportNoEvents,
    /// Usage ID `0x841`: "Reporting State: Report All Events"
    ReportingStateReportAllEvents,
    /// Usage ID `0x842`: "Reporting State: Report Threshold Events"
    ReportingStateReportThresholdEvents,
    /// Usage ID `0x843`: "Reporting State: Wake On No Events"
    ReportingStateWakeOnNoEvents,
    /// Usage ID `0x844`: "Reporting State: Wake On All Events"
    ReportingStateWakeOnAllEvents,
    /// Usage ID `0x845`: "Reporting State: Wake On Threshold Events"
    ReportingStateWakeOnThresholdEvents,
    /// Usage ID `0x846`: "Reporting State: Anytime"
    ReportingStateAnytime,
    /// Usage ID `0x850`: "Power State: Undefined"
    PowerStateUndefined,
    /// Usage ID `0x851`: "Power State: D0 Full Power"
    PowerStateD0FullPower,
    /// Usage ID `0x852`: "Power State: D1 Low Power"
    PowerStateD1LowPower,
    /// Usage ID `0x853`: "Power State: D2 Standby Power with Wakeup"
    PowerStateD2StandbyPowerwithWakeup,
    /// Usage ID `0x854`: "Power State: D3 Sleep with Wakeup"
    PowerStateD3SleepwithWakeup,
    /// Usage ID `0x855`: "Power State: D4 Power Off"
    PowerStateD4PowerOff,
    /// Usage ID `0x860`: "Accuracy: Default"
    AccuracyDefault,
    /// Usage ID `0x861`: "Accuracy: High"
    AccuracyHigh,
    /// Usage ID `0x862`: "Accuracy: Medium"
    AccuracyMedium,
    /// Usage ID `0x863`: "Accuracy: Low"
    AccuracyLow,
    /// Usage ID `0x870`: "Fix Quality: No Fix"
    FixQualityNoFix,
    /// Usage ID `0x871`: "Fix Quality: GPS"
    FixQualityGPS,
    /// Usage ID `0x872`: "Fix Quality: DGPS"
    FixQualityDGPS,
    /// Usage ID `0x880`: "Fix Type: No Fix"
    FixTypeNoFix,
    /// Usage ID `0x881`: "Fix Type: GPS SPS Mode, Fix Valid"
    FixTypeGPSSPSModeFixValid,
    /// Usage ID `0x882`: "Fix Type: DGPS SPS Mode, Fix Valid"
    FixTypeDGPSSPSModeFixValid,
    /// Usage ID `0x883`: "Fix Type: GPS PPS Mode, Fix Valid"
    FixTypeGPSPPSModeFixValid,
    /// Usage ID `0x884`: "Fix Type: Real Time Kinematic"
    FixTypeRealTimeKinematic,
    /// Usage ID `0x885`: "Fix Type: Float RTK"
    FixTypeFloatRTK,
    /// Usage ID `0x886`: "Fix Type: Estimated (dead reckoned)"
    FixTypeEstimateddeadreckoned,
    /// Usage ID `0x887`: "Fix Type: Manual Input Mode"
    FixTypeManualInputMode,
    /// Usage ID `0x888`: "Fix Type: Simulator Mode"
    FixTypeSimulatorMode,
    /// Usage ID `0x890`: "GPS Operation Mode: Manual"
    GPSOperationModeManual,
    /// Usage ID `0x891`: "GPS Operation Mode: Automatic"
    GPSOperationModeAutomatic,
    /// Usage ID `0x8A0`: "GPS Selection Mode: Autonomous"
    GPSSelectionModeAutonomous,
    /// Usage ID `0x8A1`: "GPS Selection Mode: DGPS"
    GPSSelectionModeDGPS,
    /// Usage ID `0x8A2`: "GPS Selection Mode: Estimated (dead reckoned)"
    GPSSelectionModeEstimateddeadreckoned,
    /// Usage ID `0x8A3`: "GPS Selection Mode: Manual Input"
    GPSSelectionModeManualInput,
    /// Usage ID `0x8A4`: "GPS Selection Mode: Simulator"
    GPSSelectionModeSimulator,
    /// Usage ID `0x8A5`: "GPS Selection Mode: Data Not Valid"
    GPSSelectionModeDataNotValid,
    /// Usage ID `0x8B0`: "GPS Status Data: Valid"
    GPSStatusDataValid,
    /// Usage ID `0x8B1`: "GPS Status Data: Not Valid"
    GPSStatusDataNotValid,
    /// Usage ID `0x8C0`: "Day of Week: Sunday"
    DayofWeekSunday,
    /// Usage ID `0x8C1`: "Day of Week: Monday"
    DayofWeekMonday,
    /// Usage ID `0x8C2`: "Day of Week: Tuesday"
    DayofWeekTuesday,
    /// Usage ID `0x8C3`: "Day of Week: Wednesday"
    DayofWeekWednesday,
    /// Usage ID `0x8C4`: "Day of Week: Thursday"
    DayofWeekThursday,
    /// Usage ID `0x8C5`: "Day of Week: Friday"
    DayofWeekFriday,
    /// Usage ID `0x8C6`: "Day of Week: Saturday"
    DayofWeekSaturday,
    /// Usage ID `0x8D0`: "Kind: Category"
    KindCategory,
    /// Usage ID `0x8D1`: "Kind: Type"
    KindType,
    /// Usage ID `0x8D2`: "Kind: Event"
    KindEvent,
    /// Usage ID `0x8D3`: "Kind: Property"
    KindProperty,
    /// Usage ID `0x8D4`: "Kind: Data Field"
    KindDataField,
    /// Usage ID `0x8E0`: "Magnetometer Accuracy: Low"
    MagnetometerAccuracyLow,
    /// Usage ID `0x8E1`: "Magnetometer Accuracy: Medium"
    MagnetometerAccuracyMedium,
    /// Usage ID `0x8E2`: "Magnetometer Accuracy: High"
    MagnetometerAccuracyHigh,
    /// Usage ID `0x8F0`: "Simple Orientation Direction: Not Rotated"
    SimpleOrientationDirectionNotRotated,
    /// Usage ID `0x8F1`: "Simple Orientation Direction: Rotated 90 Degrees CCW"
    SimpleOrientationDirectionRotated90DegreesCCW,
    /// Usage ID `0x8F2`: "Simple Orientation Direction: Rotated 180 Degrees CCW"
    SimpleOrientationDirectionRotated180DegreesCCW,
    /// Usage ID `0x8F3`: "Simple Orientation Direction: Rotated 270 Degrees CCW"
    SimpleOrientationDirectionRotated270DegreesCCW,
    /// Usage ID `0x8F4`: "Simple Orientation Direction: Face Up"
    SimpleOrientationDirectionFaceUp,
    /// Usage ID `0x8F5`: "Simple Orientation Direction: Face Down"
    SimpleOrientationDirectionFaceDown,
    /// Usage ID `0x900`: "VT_NULL"
    VT_NULL,
    /// Usage ID `0x901`: "VT_BOOL"
    VT_BOOL,
    /// Usage ID `0x902`: "VT_UI1"
    VT_UI1,
    /// Usage ID `0x903`: "VT_I1"
    VT_I1,
    /// Usage ID `0x904`: "VT_UI2"
    VT_UI2,
    /// Usage ID `0x905`: "VT_I2"
    VT_I2,
    /// Usage ID `0x906`: "VT_UI4"
    VT_UI4,
    /// Usage ID `0x907`: "VT_I4"
    VT_I4,
    /// Usage ID `0x908`: "VT_UI8"
    VT_UI8,
    /// Usage ID `0x909`: "VT_I8"
    VT_I8,
    /// Usage ID `0x90A`: "VT_R4"
    VT_R4,
    /// Usage ID `0x90B`: "VT_R8"
    VT_R8,
    /// Usage ID `0x90C`: "VT_WSTR"
    VT_WSTR,
    /// Usage ID `0x90D`: "VT_STR"
    VT_STR,
    /// Usage ID `0x90E`: "VT_CLSID"
    VT_CLSID,
    /// Usage ID `0x90F`: "VT_VECTOR VT_UI1"
    VT_VECTORVT_UI1,
    /// Usage ID `0x910`: "VT_F16E0"
    VT_F16E0,
    /// Usage ID `0x911`: "VT_F16E1"
    VT_F16E1,
    /// Usage ID `0x912`: "VT_F16E2"
    VT_F16E2,
    /// Usage ID `0x913`: "VT_F16E3"
    VT_F16E3,
    /// Usage ID `0x914`: "VT_F16E4"
    VT_F16E4,
    /// Usage ID `0x915`: "VT_F16E5"
    VT_F16E5,
    /// Usage ID `0x916`: "VT_F16E6"
    VT_F16E6,
    /// Usage ID `0x917`: "VT_F16E7"
    VT_F16E7,
    /// Usage ID `0x918`: "VT_F16E8"
    VT_F16E8,
    /// Usage ID `0x919`: "VT_F16E9"
    VT_F16E9,
    /// Usage ID `0x91A`: "VT_F16EA"
    VT_F16EA,
    /// Usage ID `0x91B`: "VT_F16EB"
    VT_F16EB,
    /// Usage ID `0x91C`: "VT_F16EC"
    VT_F16EC,
    /// Usage ID `0x91D`: "VT_F16ED"
    VT_F16ED,
    /// Usage ID `0x91E`: "VT_F16EE"
    VT_F16EE,
    /// Usage ID `0x91F`: "VT_F16EF"
    VT_F16EF,
    /// Usage ID `0x920`: "VT_F32E0"
    VT_F32E0,
    /// Usage ID `0x921`: "VT_F32E1"
    VT_F32E1,
    /// Usage ID `0x922`: "VT_F32E2"
    VT_F32E2,
    /// Usage ID `0x923`: "VT_F32E3"
    VT_F32E3,
    /// Usage ID `0x924`: "VT_F32E4"
    VT_F32E4,
    /// Usage ID `0x925`: "VT_F32E5"
    VT_F32E5,
    /// Usage ID `0x926`: "VT_F32E6"
    VT_F32E6,
    /// Usage ID `0x927`: "VT_F32E7"
    VT_F32E7,
    /// Usage ID `0x928`: "VT_F32E8"
    VT_F32E8,
    /// Usage ID `0x929`: "VT_F32E9"
    VT_F32E9,
    /// Usage ID `0x92A`: "VT_F32EA"
    VT_F32EA,
    /// Usage ID `0x92B`: "VT_F32EB"
    VT_F32EB,
    /// Usage ID `0x92C`: "VT_F32EC"
    VT_F32EC,
    /// Usage ID `0x92D`: "VT_F32ED"
    VT_F32ED,
    /// Usage ID `0x92E`: "VT_F32EE"
    VT_F32EE,
    /// Usage ID `0x92F`: "VT_F32EF"
    VT_F32EF,
    /// Usage ID `0x930`: "Activity Type: Unknown"
    ActivityTypeUnknown,
    /// Usage ID `0x931`: "Activity Type: Stationary"
    ActivityTypeStationary,
    /// Usage ID `0x932`: "Activity Type: Fidgeting"
    ActivityTypeFidgeting,
    /// Usage ID `0x933`: "Activity Type: Walking"
    ActivityTypeWalking,
    /// Usage ID `0x934`: "Activity Type: Running"
    ActivityTypeRunning,
    /// Usage ID `0x935`: "Activity Type: In Vehicle"
    ActivityTypeInVehicle,
    /// Usage ID `0x936`: "Activity Type: Biking"
    ActivityTypeBiking,
    /// Usage ID `0x937`: "Activity Type: Idle"
    ActivityTypeIdle,
    /// Usage ID `0x940`: "Unit: Not Specified"
    UnitNotSpecified,
    /// Usage ID `0x941`: "Unit: Lux"
    UnitLux,
    /// Usage ID `0x942`: "Unit: Degrees Kelvin"
    UnitDegreesKelvin,
    /// Usage ID `0x943`: "Unit: Degrees Celsius"
    UnitDegreesCelsius,
    /// Usage ID `0x944`: "Unit: Pascal"
    UnitPascal,
    /// Usage ID `0x945`: "Unit: Newton"
    UnitNewton,
    /// Usage ID `0x946`: "Unit: Meters/Second"
    UnitMetersSecond,
    /// Usage ID `0x947`: "Unit: Kilogram"
    UnitKilogram,
    /// Usage ID `0x948`: "Unit: Meter"
    UnitMeter,
    /// Usage ID `0x949`: "Unit: Meters/Second/Second"
    UnitMetersSecondSecond,
    /// Usage ID `0x94A`: "Unit: Farad"
    UnitFarad,
    /// Usage ID `0x94B`: "Unit: Ampere"
    UnitAmpere,
    /// Usage ID `0x94C`: "Unit: Watt"
    UnitWatt,
    /// Usage ID `0x94D`: "Unit: Henry"
    UnitHenry,
    /// Usage ID `0x94E`: "Unit: Ohm"
    UnitOhm,
    /// Usage ID `0x94F`: "Unit: Volt"
    UnitVolt,
    /// Usage ID `0x950`: "Unit: Hertz"
    UnitHertz,
    /// Usage ID `0x951`: "Unit: Bar"
    UnitBar,
    /// Usage ID `0x952`: "Unit: Degrees Anti-clockwise"
    UnitDegreesAnticlockwise,
    /// Usage ID `0x953`: "Unit: Degrees Clockwise"
    UnitDegreesClockwise,
    /// Usage ID `0x954`: "Unit: Degrees"
    UnitDegrees,
    /// Usage ID `0x955`: "Unit: Degrees/Second"
    UnitDegreesSecond,
    /// Usage ID `0x956`: "Unit: Degrees/Second/Second"
    UnitDegreesSecondSecond,
    /// Usage ID `0x957`: "Unit: Knot"
    UnitKnot,
    /// Usage ID `0x958`: "Unit: Percent"
    UnitPercent,
    /// Usage ID `0x959`: "Unit: Second"
    UnitSecond,
    /// Usage ID `0x95A`: "Unit: Millisecond"
    UnitMillisecond,
    /// Usage ID `0x95B`: "Unit: G"
    UnitG,
    /// Usage ID `0x95C`: "Unit: Bytes"
    UnitBytes,
    /// Usage ID `0x95D`: "Unit: Milligauss"
    UnitMilligauss,
    /// Usage ID `0x95E`: "Unit: Bits"
    UnitBits,
    /// Usage ID `0x960`: "Activity State: No State Change"
    ActivityStateNoStateChange,
    /// Usage ID `0x961`: "Activity State: Start Activity"
    ActivityStateStartActivity,
    /// Usage ID `0x962`: "Activity State: End Activity"
    ActivityStateEndActivity,
    /// Usage ID `0x970`: "Exponent 0"
    Exponent0,
    /// Usage ID `0x971`: "Exponent 1"
    Exponent1,
    /// Usage ID `0x972`: "Exponent 2"
    Exponent2,
    /// Usage ID `0x973`: "Exponent 3"
    Exponent3,
    /// Usage ID `0x974`: "Exponent 4"
    Exponent4,
    /// Usage ID `0x975`: "Exponent 5"
    Exponent5,
    /// Usage ID `0x976`: "Exponent 6"
    Exponent6,
    /// Usage ID `0x977`: "Exponent 7"
    Exponent7,
    /// Usage ID `0x978`: "Exponent 8"
    Exponent8,
    /// Usage ID `0x979`: "Exponent 9"
    Exponent9,
    /// Usage ID `0x97A`: "Exponent A"
    ExponentA,
    /// Usage ID `0x97B`: "Exponent B"
    ExponentB,
    /// Usage ID `0x97C`: "Exponent C"
    ExponentC,
    /// Usage ID `0x97D`: "Exponent D"
    ExponentD,
    /// Usage ID `0x97E`: "Exponent E"
    ExponentE,
    /// Usage ID `0x97F`: "Exponent F"
    ExponentF,
    /// Usage ID `0x980`: "Device Position: Unknown"
    DevicePositionUnknown,
    /// Usage ID `0x981`: "Device Position: Unchanged"
    DevicePositionUnchanged,
    /// Usage ID `0x982`: "Device Position: On Desk"
    DevicePositionOnDesk,
    /// Usage ID `0x983`: "Device Position: In Hand"
    DevicePositionInHand,
    /// Usage ID `0x984`: "Device Position: Moving in Bag"
    DevicePositionMovinginBag,
    /// Usage ID `0x985`: "Device Position: Stationary in Bag"
    DevicePositionStationaryinBag,
    /// Usage ID `0x990`: "Step Type: Unknown"
    StepTypeUnknown,
    /// Usage ID `0x991`: "Step Type: Walking"
    StepTypeWalking,
    /// Usage ID `0x992`: "Step Type: Running"
    StepTypeRunning,
    /// Usage ID `0x9A0`: "Gesture State: Unknown"
    GestureStateUnknown,
    /// Usage ID `0x9A1`: "Gesture State: Started"
    GestureStateStarted,
    /// Usage ID `0x9A2`: "Gesture State: Completed"
    GestureStateCompleted,
    /// Usage ID `0x9A3`: "Gesture State: Cancelled"
    GestureStateCancelled,
    /// Usage ID `0x9B0`: "Hinge Fold Contributing Panel: Unknown"
    HingeFoldContributingPanelUnknown,
    /// Usage ID `0x9B1`: "Hinge Fold Contributing Panel: Panel 1"
    HingeFoldContributingPanelPanel1,
    /// Usage ID `0x9B2`: "Hinge Fold Contributing Panel: Panel 2"
    HingeFoldContributingPanelPanel2,
    /// Usage ID `0x9B3`: "Hinge Fold Contributing Panel: Both"
    HingeFoldContributingPanelBoth,
    /// Usage ID `0x9B4`: "Hinge Fold Type: Unknown"
    HingeFoldTypeUnknown,
    /// Usage ID `0x9B5`: "Hinge Fold Type: Increasing"
    HingeFoldTypeIncreasing,
    /// Usage ID `0x9B6`: "Hinge Fold Type: Decreasing"
    HingeFoldTypeDecreasing,
    /// Usage ID `0x9C0`: "Human Presence Detection Type: Vendor-Defined Non-Biometric"
    HumanPresenceDetectionTypeVendorDefinedNonBiometric,
    /// Usage ID `0x9C1`: "Human Presence Detection Type: Vendor-Defined Biometric"
    HumanPresenceDetectionTypeVendorDefinedBiometric,
    /// Usage ID `0x9C2`: "Human Presence Detection Type: Facial Biometric"
    HumanPresenceDetectionTypeFacialBiometric,
    /// Usage ID `0x9C3`: "Human Presence Detection Type: Audio Biometric"
    HumanPresenceDetectionTypeAudioBiometric,
    /// Usage ID `0x1000`: "Modifier: Change Sensitivity Absolute"
    ModifierChangeSensitivityAbsolute,
    /// Usage ID `0x2000`: "Modifier: Maximum"
    ModifierMaximum,
    /// Usage ID `0x3000`: "Modifier: Minimum"
    ModifierMinimum,
    /// Usage ID `0x4000`: "Modifier: Accuracy"
    ModifierAccuracy,
    /// Usage ID `0x5000`: "Modifier: Resolution"
    ModifierResolution,
    /// Usage ID `0x6000`: "Modifier: Threshold High"
    ModifierThresholdHigh,
    /// Usage ID `0x7000`: "Modifier: Threshold Low"
    ModifierThresholdLow,
    /// Usage ID `0x8000`: "Modifier: Calibration Offset"
    ModifierCalibrationOffset,
    /// Usage ID `0x9000`: "Modifier: Calibration Multiplier"
    ModifierCalibrationMultiplier,
    /// Usage ID `0xA000`: "Modifier: Report Interval"
    ModifierReportInterval,
    /// Usage ID `0xB000`: "Modifier: Frequency Max"
    ModifierFrequencyMax,
    /// Usage ID `0xC000`: "Modifier: Period Max"
    ModifierPeriodMax,
    /// Usage ID `0xD000`: "Modifier: Change Sensitivity Percent of Range"
    ModifierChangeSensitivityPercentofRange,
    /// Usage ID `0xE000`: "Modifier: Change Sensitivity Percent Relative"
    ModifierChangeSensitivityPercentRelative,
    /// Usage ID `0xF000`: "Modifier: Vendor Reserved"
    ModifierVendorReserved,
}

impl fmt::Display for Sensors {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Sensors::Sensor => "Sensor",
            Sensors::Biometric => "Biometric",
            Sensors::BiometricHumanPresence => "Biometric: Human Presence",
            Sensors::BiometricHumanProximity => "Biometric: Human Proximity",
            Sensors::BiometricHumanTouch => "Biometric: Human Touch",
            Sensors::BiometricBloodPressure => "Biometric: Blood Pressure",
            Sensors::BiometricBodyTemperature => "Biometric: Body Temperature",
            Sensors::BiometricHeartRate => "Biometric: Heart Rate",
            Sensors::BiometricHeartRateVariability => "Biometric: Heart Rate Variability",
            Sensors::BiometricPeripheralOxygenSaturation => "Biometric: Peripheral Oxygen Saturation",
            Sensors::BiometricRespiratoryRate => "Biometric: Respiratory Rate",
            Sensors::Electrical => "Electrical",
            Sensors::ElectricalCapacitance => "Electrical: Capacitance",
            Sensors::ElectricalCurrent => "Electrical: Current",
            Sensors::ElectricalPower => "Electrical: Power",
            Sensors::ElectricalInductance => "Electrical: Inductance",
            Sensors::ElectricalResistance => "Electrical: Resistance",
            Sensors::ElectricalVoltage => "Electrical: Voltage",
            Sensors::ElectricalPotentiometer => "Electrical: Potentiometer",
            Sensors::ElectricalFrequency => "Electrical: Frequency",
            Sensors::ElectricalPeriod => "Electrical: Period",
            Sensors::Environmental => "Environmental",
            Sensors::EnvironmentalAtmosphericPressure => "Environmental: Atmospheric Pressure",
            Sensors::EnvironmentalHumidity => "Environmental: Humidity",
            Sensors::EnvironmentalTemperature => "Environmental: Temperature",
            Sensors::EnvironmentalWindDirection => "Environmental: Wind Direction",
            Sensors::EnvironmentalWindSpeed => "Environmental: Wind Speed",
            Sensors::EnvironmentalAirQuality => "Environmental: Air Quality",
            Sensors::EnvironmentalHeatIndex => "Environmental: Heat Index",
            Sensors::EnvironmentalSurfaceTemperature => "Environmental: Surface Temperature",
            Sensors::EnvironmentalVolatileOrganicCompounds => "Environmental: Volatile Organic Compounds",
            Sensors::EnvironmentalObjectPresence => "Environmental: Object Presence",
            Sensors::EnvironmentalObjectProximity => "Environmental: Object Proximity",
            Sensors::Light => "Light",
            Sensors::LightAmbientLight => "Light: Ambient Light",
            Sensors::LightConsumerInfrared => "Light: Consumer Infrared",
            Sensors::LightInfraredLight => "Light: Infrared Light",
            Sensors::LightVisibleLight => "Light: Visible Light",
            Sensors::LightUltravioletLight => "Light: Ultraviolet Light",
            Sensors::Location => "Location",
            Sensors::LocationBroadcast => "Location: Broadcast",
            Sensors::LocationDeadReckoning => "Location: Dead Reckoning",
            Sensors::LocationGPSGlobalPositioningSystem => "Location: GPS (Global Positioning System)",
            Sensors::LocationLookup => "Location: Lookup",
            Sensors::LocationOther => "Location: Other",
            Sensors::LocationStatic => "Location: Static",
            Sensors::LocationTriangulation => "Location: Triangulation",
            Sensors::Mechanical => "Mechanical",
            Sensors::MechanicalBooleanSwitch => "Mechanical: Boolean Switch",
            Sensors::MechanicalBooleanSwitchArray => "Mechanical: Boolean Switch Array",
            Sensors::MechanicalMultivalueSwitch => "Mechanical: Multivalue Switch",
            Sensors::MechanicalForce => "Mechanical: Force",
            Sensors::MechanicalPressure => "Mechanical: Pressure",
            Sensors::MechanicalStrain => "Mechanical: Strain",
            Sensors::MechanicalWeight => "Mechanical: Weight",
            Sensors::MechanicalHapticVibrator => "Mechanical: Haptic Vibrator",
            Sensors::MechanicalHallEffectSwitch => "Mechanical: Hall Effect Switch",
            Sensors::Motion => "Motion",
            Sensors::MotionAccelerometer1D => "Motion: Accelerometer 1D",
            Sensors::MotionAccelerometer2D => "Motion: Accelerometer 2D",
            Sensors::MotionAccelerometer3D => "Motion: Accelerometer 3D",
            Sensors::MotionGyrometer1D => "Motion: Gyrometer 1D",
            Sensors::MotionGyrometer2D => "Motion: Gyrometer 2D",
            Sensors::MotionGyrometer3D => "Motion: Gyrometer 3D",
            Sensors::MotionMotionDetector => "Motion: Motion Detector",
            Sensors::MotionSpeedometer => "Motion: Speedometer",
            Sensors::MotionAccelerometer => "Motion: Accelerometer",
            Sensors::MotionGyrometer => "Motion: Gyrometer",
            Sensors::MotionGravityVector => "Motion: Gravity Vector",
            Sensors::MotionLinearAccelerometer => "Motion: Linear Accelerometer",
            Sensors::Orientation => "Orientation",
            Sensors::OrientationCompass1D => "Orientation: Compass 1D",
            Sensors::OrientationCompass2D => "Orientation: Compass 2D",
            Sensors::OrientationCompass3D => "Orientation: Compass 3D",
            Sensors::OrientationInclinometer1D => "Orientation: Inclinometer 1D",
            Sensors::OrientationInclinometer2D => "Orientation: Inclinometer 2D",
            Sensors::OrientationInclinometer3D => "Orientation: Inclinometer 3D",
            Sensors::OrientationDistance1D => "Orientation: Distance 1D",
            Sensors::OrientationDistance2D => "Orientation: Distance 2D",
            Sensors::OrientationDistance3D => "Orientation: Distance 3D",
            Sensors::OrientationDeviceOrientation => "Orientation: Device Orientation",
            Sensors::OrientationCompass => "Orientation: Compass",
            Sensors::OrientationInclinometer => "Orientation: Inclinometer",
            Sensors::OrientationDistance => "Orientation: Distance",
            Sensors::OrientationRelativeOrientation => "Orientation: Relative Orientation",
            Sensors::OrientationSimpleOrientation => "Orientation: Simple Orientation",
            Sensors::Scanner => "Scanner",
            Sensors::ScannerBarcode => "Scanner: Barcode",
            Sensors::ScannerRFID => "Scanner: RFID",
            Sensors::ScannerNFC => "Scanner: NFC",
            Sensors::Time => "Time",
            Sensors::TimeAlarmTimer => "Time: Alarm Timer",
            Sensors::TimeRealTimeClock => "Time: Real Time Clock",
            Sensors::PersonalActivity => "Personal Activity",
            Sensors::PersonalActivityActivityDetection => "Personal Activity: Activity Detection",
            Sensors::PersonalActivityDevicePosition => "Personal Activity: Device Position",
            Sensors::PersonalActivityFloorTracker => "Personal Activity: Floor Tracker",
            Sensors::PersonalActivityPedometer => "Personal Activity: Pedometer",
            Sensors::PersonalActivityStepDetection => "Personal Activity: Step Detection",
            Sensors::OrientationExtended => "Orientation Extended",
            Sensors::OrientationExtendedGeomagneticOrientation => "Orientation Extended: Geomagnetic Orientation",
            Sensors::OrientationExtendedMagnetometer => "Orientation Extended: Magnetometer",
            Sensors::Gesture => "Gesture",
            Sensors::GestureChassisFlipGesture => "Gesture: Chassis Flip Gesture",
            Sensors::GestureHingeFoldGesture => "Gesture: Hinge Fold Gesture",
            Sensors::Other => "Other",
            Sensors::OtherCustom => "Other: Custom",
            Sensors::OtherGeneric => "Other: Generic",
            Sensors::OtherGenericEnumerator => "Other: Generic Enumerator",
            Sensors::OtherHingeAngle => "Other: Hinge Angle",
            Sensors::VendorReserved1 => "Vendor Reserved 1",
            Sensors::VendorReserved2 => "Vendor Reserved 2",
            Sensors::VendorReserved3 => "Vendor Reserved 3",
            Sensors::VendorReserved4 => "Vendor Reserved 4",
            Sensors::VendorReserved5 => "Vendor Reserved 5",
            Sensors::VendorReserved6 => "Vendor Reserved 6",
            Sensors::VendorReserved7 => "Vendor Reserved 7",
            Sensors::VendorReserved8 => "Vendor Reserved 8",
            Sensors::VendorReserved9 => "Vendor Reserved 9",
            Sensors::VendorReserved10 => "Vendor Reserved 10",
            Sensors::VendorReserved11 => "Vendor Reserved 11",
            Sensors::VendorReserved12 => "Vendor Reserved 12",
            Sensors::VendorReserved13 => "Vendor Reserved 13",
            Sensors::VendorReserved14 => "Vendor Reserved 14",
            Sensors::VendorReserved15 => "Vendor Reserved 15",
            Sensors::VendorReserved16 => "Vendor Reserved 16",
            Sensors::Event => "Event",
            Sensors::EventSensorState => "Event: Sensor State",
            Sensors::EventSensorEvent => "Event: Sensor Event",
            Sensors::Property => "Property",
            Sensors::PropertyFriendlyName => "Property: Friendly Name",
            Sensors::PropertyPersistentUniqueID => "Property: Persistent Unique ID",
            Sensors::PropertySensorStatus => "Property: Sensor Status",
            Sensors::PropertyMinimumReportInterval => "Property: Minimum Report Interval",
            Sensors::PropertySensorManufacturer => "Property: Sensor Manufacturer",
            Sensors::PropertySensorModel => "Property: Sensor Model",
            Sensors::PropertySensorSerialNumber => "Property: Sensor Serial Number",
            Sensors::PropertySensorDescription => "Property: Sensor Description",
            Sensors::PropertySensorConnectionType => "Property: Sensor Connection Type",
            Sensors::PropertySensorDevicePath => "Property: Sensor Device Path",
            Sensors::PropertyHardwareRevision => "Property: Hardware Revision",
            Sensors::PropertyFirmwareVersion => "Property: Firmware Version",
            Sensors::PropertyReleaseDate => "Property: Release Date",
            Sensors::PropertyReportInterval => "Property: Report Interval",
            Sensors::PropertyChangeSensitivityAbsolute => "Property: Change Sensitivity Absolute",
            Sensors::PropertyChangeSensitivityPercentofRange => "Property: Change Sensitivity Percent of Range",
            Sensors::PropertyChangeSensitivityPercentRelative => "Property: Change Sensitivity Percent Relative",
            Sensors::PropertyAccuracy => "Property: Accuracy",
            Sensors::PropertyResolution => "Property: Resolution",
            Sensors::PropertyMaximum => "Property: Maximum",
            Sensors::PropertyMinimum => "Property: Minimum",
            Sensors::PropertyReportingState => "Property: Reporting State",
            Sensors::PropertySamplingRate => "Property: Sampling Rate",
            Sensors::PropertyResponseCurve => "Property: Response Curve",
            Sensors::PropertyPowerState => "Property: Power State",
            Sensors::PropertyMaximumFIFOEvents => "Property: Maximum FIFO Events",
            Sensors::PropertyReportLatency => "Property: Report Latency",
            Sensors::PropertyFlushFIFOEvents => "Property: Flush FIFO Events",
            Sensors::PropertyMaximumPowerConsumption => "Property: Maximum Power Consumption",
            Sensors::PropertyIsPrimary => "Property: Is Primary",
            Sensors::PropertyHumanPresenceDetectionType => "Property: Human Presence Detection Type",
            Sensors::DataFieldLocation => "Data Field: Location",
            Sensors::DataFieldAltitudeAntennaSeaLevel => "Data Field: Altitude Antenna Sea Level",
            Sensors::DataFieldDifferentialReferenceStationID => "Data Field: Differential Reference Station ID",
            Sensors::DataFieldAltitudeEllipsoidError => "Data Field: Altitude Ellipsoid Error",
            Sensors::DataFieldAltitudeEllipsoid => "Data Field: Altitude Ellipsoid",
            Sensors::DataFieldAltitudeSeaLevelError => "Data Field: Altitude Sea Level Error",
            Sensors::DataFieldAltitudeSeaLevel => "Data Field: Altitude Sea Level",
            Sensors::DataFieldDifferentialGPSDataAge => "Data Field: Differential GPS Data Age",
            Sensors::DataFieldErrorRadius => "Data Field: Error Radius",
            Sensors::DataFieldFixQuality => "Data Field: Fix Quality",
            Sensors::DataFieldFixType => "Data Field: Fix Type",
            Sensors::DataFieldGeoidalSeparation => "Data Field: Geoidal Separation",
            Sensors::DataFieldGPSOperationMode => "Data Field: GPS Operation Mode",
            Sensors::DataFieldGPSSelectionMode => "Data Field: GPS Selection Mode",
            Sensors::DataFieldGPSStatus => "Data Field: GPS Status",
            Sensors::DataFieldPositionDilutionofPrecision => "Data Field: Position Dilution of Precision",
            Sensors::DataFieldHorizontalDilutionofPrecision => "Data Field: Horizontal Dilution of Precision",
            Sensors::DataFieldVerticalDilutionofPrecision => "Data Field: Vertical Dilution of Precision",
            Sensors::DataFieldLatitude => "Data Field: Latitude",
            Sensors::DataFieldLongitude => "Data Field: Longitude",
            Sensors::DataFieldTrueHeading => "Data Field: True Heading",
            Sensors::DataFieldMagneticHeading => "Data Field: Magnetic Heading",
            Sensors::DataFieldMagneticVariation => "Data Field: Magnetic Variation",
            Sensors::DataFieldSpeed => "Data Field: Speed",
            Sensors::DataFieldSatellitesinView => "Data Field: Satellites in View",
            Sensors::DataFieldSatellitesinViewAzimuth => "Data Field: Satellites in View Azimuth",
            Sensors::DataFieldSatellitesinViewElevation => "Data Field: Satellites in View Elevation",
            Sensors::DataFieldSatellitesinViewIDs => "Data Field: Satellites in View IDs",
            Sensors::DataFieldSatellitesinViewPRNs => "Data Field: Satellites in View PRNs",
            Sensors::DataFieldSatellitesinViewSNRatios => "Data Field: Satellites in View S/N Ratios",
            Sensors::DataFieldSatellitesUsedCount => "Data Field: Satellites Used Count",
            Sensors::DataFieldSatellitesUsedPRNs => "Data Field: Satellites Used PRNs",
            Sensors::DataFieldNMEASentence => "Data Field: NMEA Sentence",
            Sensors::DataFieldAddressLine1 => "Data Field: Address Line 1",
            Sensors::DataFieldAddressLine2 => "Data Field: Address Line 2",
            Sensors::DataFieldCity => "Data Field: City",
            Sensors::DataFieldStateorProvince => "Data Field: State or Province",
            Sensors::DataFieldCountryorRegion => "Data Field: Country or Region",
            Sensors::DataFieldPostalCode => "Data Field: Postal Code",
            Sensors::PropertyLocation => "Property: Location",
            Sensors::PropertyLocationDesiredAccuracy => "Property: Location Desired Accuracy",
            Sensors::DataFieldEnvironmental => "Data Field: Environmental",
            Sensors::DataFieldAtmosphericPressure => "Data Field: Atmospheric Pressure",
            Sensors::DataFieldRelativeHumidity => "Data Field: Relative Humidity",
            Sensors::DataFieldTemperature => "Data Field: Temperature",
            Sensors::DataFieldWindDirection => "Data Field: Wind Direction",
            Sensors::DataFieldWindSpeed => "Data Field: Wind Speed",
            Sensors::DataFieldAirQualityIndex => "Data Field: Air Quality Index",
            Sensors::DataFieldEquivalentCO2 => "Data Field: Equivalent CO2",
            Sensors::DataFieldVolatileOrganicCompoundConcentration => "Data Field: Volatile Organic Compound Concentration",
            Sensors::DataFieldObjectPresence => "Data Field: Object Presence",
            Sensors::DataFieldObjectProximityRange => "Data Field: Object Proximity Range",
            Sensors::DataFieldObjectProximityOutofRange => "Data Field: Object Proximity Out of Range",
            Sensors::PropertyEnvironmental => "Property: Environmental",
            Sensors::PropertyReferencePressure => "Property: Reference Pressure",
            Sensors::DataFieldMotion => "Data Field: Motion",
            Sensors::DataFieldMotionState => "Data Field: Motion State",
            Sensors::DataFieldAcceleration => "Data Field: Acceleration",
            Sensors::DataFieldAccelerationAxisX => "Data Field: Acceleration Axis X",
            Sensors::DataFieldAccelerationAxisY => "Data Field: Acceleration Axis Y",
            Sensors::DataFieldAccelerationAxisZ => "Data Field: Acceleration Axis Z",
            Sensors::DataFieldAngularVelocity => "Data Field: Angular Velocity",
            Sensors::DataFieldAngularVelocityaboutXAxis => "Data Field: Angular Velocity about X Axis",
            Sensors::DataFieldAngularVelocityaboutYAxis => "Data Field: Angular Velocity about Y Axis",
            Sensors::DataFieldAngularVelocityaboutZAxis => "Data Field: Angular Velocity about Z Axis",
            Sensors::DataFieldAngularPosition => "Data Field: Angular Position",
            Sensors::DataFieldAngularPositionaboutXAxis => "Data Field: Angular Position about X Axis",
            Sensors::DataFieldAngularPositionaboutYAxis => "Data Field: Angular Position about Y Axis",
            Sensors::DataFieldAngularPositionaboutZAxis => "Data Field: Angular Position about Z Axis",
            Sensors::DataFieldMotionSpeed => "Data Field: Motion Speed",
            Sensors::DataFieldMotionIntensity => "Data Field: Motion Intensity",
            Sensors::DataFieldOrientation => "Data Field: Orientation",
            Sensors::DataFieldHeading => "Data Field: Heading",
            Sensors::DataFieldHeadingXAxis => "Data Field: Heading X Axis",
            Sensors::DataFieldHeadingYAxis => "Data Field: Heading Y Axis",
            Sensors::DataFieldHeadingZAxis => "Data Field: Heading Z Axis",
            Sensors::DataFieldHeadingCompensatedMagneticNorth => "Data Field: Heading Compensated Magnetic North",
            Sensors::DataFieldHeadingCompensatedTrueNorth => "Data Field: Heading Compensated True North",
            Sensors::DataFieldHeadingMagneticNorth => "Data Field: Heading Magnetic North",
            Sensors::DataFieldHeadingTrueNorth => "Data Field: Heading True North",
            Sensors::DataFieldDistance => "Data Field: Distance",
            Sensors::DataFieldDistanceXAxis => "Data Field: Distance X Axis",
            Sensors::DataFieldDistanceYAxis => "Data Field: Distance Y Axis",
            Sensors::DataFieldDistanceZAxis => "Data Field: Distance Z Axis",
            Sensors::DataFieldDistanceOutofRange => "Data Field: Distance Out-of-Range",
            Sensors::DataFieldTilt => "Data Field: Tilt",
            Sensors::DataFieldTiltXAxis => "Data Field: Tilt X Axis",
            Sensors::DataFieldTiltYAxis => "Data Field: Tilt Y Axis",
            Sensors::DataFieldTiltZAxis => "Data Field: Tilt Z Axis",
            Sensors::DataFieldRotationMatrix => "Data Field: Rotation Matrix",
            Sensors::DataFieldQuaternion => "Data Field: Quaternion",
            Sensors::DataFieldMagneticFlux => "Data Field: Magnetic Flux",
            Sensors::DataFieldMagneticFluxXAxis => "Data Field: Magnetic Flux X Axis",
            Sensors::DataFieldMagneticFluxYAxis => "Data Field: Magnetic Flux Y Axis",
            Sensors::DataFieldMagneticFluxZAxis => "Data Field: Magnetic Flux Z Axis",
            Sensors::DataFieldMagnetometerAccuracy => "Data Field: Magnetometer Accuracy",
            Sensors::DataFieldSimpleOrientationDirection => "Data Field: Simple Orientation Direction",
            Sensors::DataFieldMechanical => "Data Field: Mechanical",
            Sensors::DataFieldBooleanSwitchState => "Data Field: Boolean Switch State",
            Sensors::DataFieldBooleanSwitchArrayStates => "Data Field: Boolean Switch Array States",
            Sensors::DataFieldMultivalueSwitchValue => "Data Field: Multivalue Switch Value",
            Sensors::DataFieldForce => "Data Field: Force",
            Sensors::DataFieldAbsolutePressure => "Data Field: Absolute Pressure",
            Sensors::DataFieldGaugePressure => "Data Field: Gauge Pressure",
            Sensors::DataFieldStrain => "Data Field: Strain",
            Sensors::DataFieldWeight => "Data Field: Weight",
            Sensors::PropertyMechanical => "Property: Mechanical",
            Sensors::PropertyVibrationState => "Property: Vibration State",
            Sensors::PropertyForwardVibrationSpeed => "Property: Forward Vibration Speed",
            Sensors::PropertyBackwardVibrationSpeed => "Property: Backward Vibration Speed",
            Sensors::DataFieldBiometric => "Data Field: Biometric",
            Sensors::DataFieldHumanPresence => "Data Field: Human Presence",
            Sensors::DataFieldHumanProximityRange => "Data Field: Human Proximity Range",
            Sensors::DataFieldHumanProximityOutofRange => "Data Field: Human Proximity Out of Range",
            Sensors::DataFieldHumanTouchState => "Data Field: Human Touch State",
            Sensors::DataFieldBloodPressure => "Data Field: Blood Pressure",
            Sensors::DataFieldBloodPressureDiastolic => "Data Field: Blood Pressure Diastolic",
            Sensors::DataFieldBloodPressureSystolic => "Data Field: Blood Pressure Systolic",
            Sensors::DataFieldHeartRate => "Data Field: Heart Rate",
            Sensors::DataFieldRestingHeartRate => "Data Field: Resting Heart Rate",
            Sensors::DataFieldHeartbeatInterval => "Data Field: Heartbeat Interval",
            Sensors::DataFieldRespiratoryRate => "Data Field: Respiratory Rate",
            Sensors::DataFieldSpO2 => "Data Field: SpO2",
            Sensors::DataFieldHumanAttentionDetected => "Data Field: Human Attention Detected",
            Sensors::DataFieldHumanHeadAzimuth => "Data Field: Human Head Azimuth",
            Sensors::DataFieldHumanHeadAltitude => "Data Field: Human Head Altitude",
            Sensors::DataFieldHumanHeadRoll => "Data Field: Human Head Roll",
            Sensors::DataFieldHumanHeadPitch => "Data Field: Human Head Pitch",
            Sensors::DataFieldHumanHeadYaw => "Data Field: Human Head Yaw",
            Sensors::DataFieldHumanCorrelationId => "Data Field: Human Correlation Id",
            Sensors::DataFieldLight => "Data Field: Light",
            Sensors::DataFieldIlluminance => "Data Field: Illuminance",
            Sensors::DataFieldColorTemperature => "Data Field: Color Temperature",
            Sensors::DataFieldChromaticity => "Data Field: Chromaticity",
            Sensors::DataFieldChromaticityX => "Data Field: Chromaticity X",
            Sensors::DataFieldChromaticityY => "Data Field: Chromaticity Y",
            Sensors::DataFieldConsumerIRSentenceReceive => "Data Field: Consumer IR Sentence Receive",
            Sensors::DataFieldInfraredLight => "Data Field: Infrared Light",
            Sensors::DataFieldRedLight => "Data Field: Red Light",
            Sensors::DataFieldGreenLight => "Data Field: Green Light",
            Sensors::DataFieldBlueLight => "Data Field: Blue Light",
            Sensors::DataFieldUltravioletALight => "Data Field: Ultraviolet A Light",
            Sensors::DataFieldUltravioletBLight => "Data Field: Ultraviolet B Light",
            Sensors::DataFieldUltravioletIndex => "Data Field: Ultraviolet Index",
            Sensors::DataFieldNearInfraredLight => "Data Field: Near Infrared Light",
            Sensors::PropertyLight => "Property: Light",
            Sensors::PropertyConsumerIRSentenceSend => "Property: Consumer IR Sentence Send",
            Sensors::PropertyAutoBrightnessPreferred => "Property: Auto Brightness Preferred",
            Sensors::PropertyAutoColorPreferred => "Property: Auto Color Preferred",
            Sensors::DataFieldScanner => "Data Field: Scanner",
            Sensors::DataFieldRFIDTag40Bit => "Data Field: RFID Tag 40 Bit",
            Sensors::DataFieldNFCSentenceReceive => "Data Field: NFC Sentence Receive",
            Sensors::PropertyScanner => "Property: Scanner",
            Sensors::PropertyNFCSentenceSend => "Property: NFC Sentence Send",
            Sensors::DataFieldElectrical => "Data Field: Electrical",
            Sensors::DataFieldCapacitance => "Data Field: Capacitance",
            Sensors::DataFieldCurrent => "Data Field: Current",
            Sensors::DataFieldElectricalPower => "Data Field: Electrical Power",
            Sensors::DataFieldInductance => "Data Field: Inductance",
            Sensors::DataFieldResistance => "Data Field: Resistance",
            Sensors::DataFieldVoltage => "Data Field: Voltage",
            Sensors::DataFieldFrequency => "Data Field: Frequency",
            Sensors::DataFieldPeriod => "Data Field: Period",
            Sensors::DataFieldPercentofRange => "Data Field: Percent of Range",
            Sensors::DataFieldTime => "Data Field: Time",
            Sensors::DataFieldYear => "Data Field: Year",
            Sensors::DataFieldMonth => "Data Field: Month",
            Sensors::DataFieldDay => "Data Field: Day",
            Sensors::DataFieldDayofWeek => "Data Field: Day of Week",
            Sensors::DataFieldHour => "Data Field: Hour",
            Sensors::DataFieldMinute => "Data Field: Minute",
            Sensors::DataFieldSecond => "Data Field: Second",
            Sensors::DataFieldMillisecond => "Data Field: Millisecond",
            Sensors::DataFieldTimestamp => "Data Field: Timestamp",
            Sensors::DataFieldJulianDayofYear => "Data Field: Julian Day of Year",
            Sensors::DataFieldTimeSinceSystemBoot => "Data Field: Time Since System Boot",
            Sensors::PropertyTime => "Property: Time",
            Sensors::PropertyTimeZoneOffsetfromUTC => "Property: Time Zone Offset from UTC",
            Sensors::PropertyTimeZoneName => "Property: Time Zone Name",
            Sensors::PropertyDaylightSavingsTimeObserved => "Property: Daylight Savings Time Observed",
            Sensors::PropertyTimeTrimAdjustment => "Property: Time Trim Adjustment",
            Sensors::PropertyArmAlarm => "Property: Arm Alarm",
            Sensors::DataFieldCustom => "Data Field: Custom",
            Sensors::DataFieldCustomUsage => "Data Field: Custom Usage",
            Sensors::DataFieldCustomBooleanArray => "Data Field: Custom Boolean Array",
            Sensors::DataFieldCustomValue => "Data Field: Custom Value",
            Sensors::DataFieldCustomValue1 => "Data Field: Custom Value 1",
            Sensors::DataFieldCustomValue2 => "Data Field: Custom Value 2",
            Sensors::DataFieldCustomValue3 => "Data Field: Custom Value 3",
            Sensors::DataFieldCustomValue4 => "Data Field: Custom Value 4",
            Sensors::DataFieldCustomValue5 => "Data Field: Custom Value 5",
            Sensors::DataFieldCustomValue6 => "Data Field: Custom Value 6",
            Sensors::DataFieldCustomValue7 => "Data Field: Custom Value 7",
            Sensors::DataFieldCustomValue8 => "Data Field: Custom Value 8",
            Sensors::DataFieldCustomValue9 => "Data Field: Custom Value 9",
            Sensors::DataFieldCustomValue10 => "Data Field: Custom Value 10",
            Sensors::DataFieldCustomValue11 => "Data Field: Custom Value 11",
            Sensors::DataFieldCustomValue12 => "Data Field: Custom Value 12",
            Sensors::DataFieldCustomValue13 => "Data Field: Custom Value 13",
            Sensors::DataFieldCustomValue14 => "Data Field: Custom Value 14",
            Sensors::DataFieldCustomValue15 => "Data Field: Custom Value 15",
            Sensors::DataFieldCustomValue16 => "Data Field: Custom Value 16",
            Sensors::DataFieldCustomValue17 => "Data Field: Custom Value 17",
            Sensors::DataFieldCustomValue18 => "Data Field: Custom Value 18",
            Sensors::DataFieldCustomValue19 => "Data Field: Custom Value 19",
            Sensors::DataFieldCustomValue20 => "Data Field: Custom Value 20",
            Sensors::DataFieldCustomValue21 => "Data Field: Custom Value 21",
            Sensors::DataFieldCustomValue22 => "Data Field: Custom Value 22",
            Sensors::DataFieldCustomValue23 => "Data Field: Custom Value 23",
            Sensors::DataFieldCustomValue24 => "Data Field: Custom Value 24",
            Sensors::DataFieldCustomValue25 => "Data Field: Custom Value 25",
            Sensors::DataFieldCustomValue26 => "Data Field: Custom Value 26",
            Sensors::DataFieldCustomValue27 => "Data Field: Custom Value 27",
            Sensors::DataFieldCustomValue28 => "Data Field: Custom Value 28",
            Sensors::DataFieldGeneric => "Data Field: Generic",
            Sensors::DataFieldGenericGUIDorPROPERTYKEY => "Data Field: Generic GUID or PROPERTYKEY",
            Sensors::DataFieldGenericCategoryGUID => "Data Field: Generic Category GUID",
            Sensors::DataFieldGenericTypeGUID => "Data Field: Generic Type GUID",
            Sensors::DataFieldGenericEventPROPERTYKEY => "Data Field: Generic Event PROPERTYKEY",
            Sensors::DataFieldGenericPropertyPROPERTYKEY => "Data Field: Generic Property PROPERTYKEY",
            Sensors::DataFieldGenericDataFieldPROPERTYKEY => "Data Field: Generic Data Field PROPERTYKEY",
            Sensors::DataFieldGenericEvent => "Data Field: Generic Event",
            Sensors::DataFieldGenericProperty => "Data Field: Generic Property",
            Sensors::DataFieldGenericDataField => "Data Field: Generic Data Field",
            Sensors::DataFieldEnumeratorTableRowIndex => "Data Field: Enumerator Table Row Index",
            Sensors::DataFieldEnumeratorTableRowCount => "Data Field: Enumerator Table Row Count",
            Sensors::DataFieldGenericGUIDorPROPERTYKEYkind => "Data Field: Generic GUID or PROPERTYKEY kind",
            Sensors::DataFieldGenericGUID => "Data Field: Generic GUID",
            Sensors::DataFieldGenericPROPERTYKEY => "Data Field: Generic PROPERTYKEY",
            Sensors::DataFieldGenericTopLevelCollectionID => "Data Field: Generic Top Level Collection ID",
            Sensors::DataFieldGenericReportID => "Data Field: Generic Report ID",
            Sensors::DataFieldGenericReportItemPositionIndex => "Data Field: Generic Report Item Position Index",
            Sensors::DataFieldGenericFirmwareVARTYPE => "Data Field: Generic Firmware VARTYPE",
            Sensors::DataFieldGenericUnitofMeasure => "Data Field: Generic Unit of Measure",
            Sensors::DataFieldGenericUnitExponent => "Data Field: Generic Unit Exponent",
            Sensors::DataFieldGenericReportSize => "Data Field: Generic Report Size",
            Sensors::DataFieldGenericReportCount => "Data Field: Generic Report Count",
            Sensors::PropertyGeneric => "Property: Generic",
            Sensors::PropertyEnumeratorTableRowIndex => "Property: Enumerator Table Row Index",
            Sensors::PropertyEnumeratorTableRowCount => "Property: Enumerator Table Row Count",
            Sensors::DataFieldPersonalActivity => "Data Field: Personal Activity",
            Sensors::DataFieldActivityType => "Data Field: Activity Type",
            Sensors::DataFieldActivityState => "Data Field: Activity State",
            Sensors::DataFieldDevicePosition => "Data Field: Device Position",
            Sensors::DataFieldStepCount => "Data Field: Step Count",
            Sensors::DataFieldStepCountReset => "Data Field: Step Count Reset",
            Sensors::DataFieldStepDuration => "Data Field: Step Duration",
            Sensors::DataFieldStepType => "Data Field: Step Type",
            Sensors::PropertyMinimumActivityDetectionInterval => "Property: Minimum Activity Detection Interval",
            Sensors::PropertySupportedActivityTypes => "Property: Supported Activity Types",
            Sensors::PropertySubscribedActivityTypes => "Property: Subscribed Activity Types",
            Sensors::PropertySupportedStepTypes => "Property: Supported Step Types",
            Sensors::PropertySubscribedStepTypes => "Property: Subscribed Step Types",
            Sensors::PropertyFloorHeight => "Property: Floor Height",
            Sensors::DataFieldCustomTypeID => "Data Field: Custom Type ID",
            Sensors::PropertyCustom => "Property: Custom",
            Sensors::PropertyCustomValue1 => "Property: Custom Value 1",
            Sensors::PropertyCustomValue2 => "Property: Custom Value 2",
            Sensors::PropertyCustomValue3 => "Property: Custom Value 3",
            Sensors::PropertyCustomValue4 => "Property: Custom Value 4",
            Sensors::PropertyCustomValue5 => "Property: Custom Value 5",
            Sensors::PropertyCustomValue6 => "Property: Custom Value 6",
            Sensors::PropertyCustomValue7 => "Property: Custom Value 7",
            Sensors::PropertyCustomValue8 => "Property: Custom Value 8",
            Sensors::PropertyCustomValue9 => "Property: Custom Value 9",
            Sensors::PropertyCustomValue10 => "Property: Custom Value 10",
            Sensors::PropertyCustomValue11 => "Property: Custom Value 11",
            Sensors::PropertyCustomValue12 => "Property: Custom Value 12",
            Sensors::PropertyCustomValue13 => "Property: Custom Value 13",
            Sensors::PropertyCustomValue14 => "Property: Custom Value 14",
            Sensors::PropertyCustomValue15 => "Property: Custom Value 15",
            Sensors::PropertyCustomValue16 => "Property: Custom Value 16",
            Sensors::DataFieldHinge => "Data Field: Hinge",
            Sensors::DataFieldHingeAngle => "Data Field: Hinge Angle",
            Sensors::DataFieldGestureSensor => "Data Field: Gesture Sensor",
            Sensors::DataFieldGestureState => "Data Field: Gesture State",
            Sensors::DataFieldHingeFoldInitialAngle => "Data Field: Hinge Fold Initial Angle",
            Sensors::DataFieldHingeFoldFinalAngle => "Data Field: Hinge Fold Final Angle",
            Sensors::DataFieldHingeFoldContributingPanel => "Data Field: Hinge Fold Contributing Panel",
            Sensors::DataFieldHingeFoldType => "Data Field: Hinge Fold Type",
            Sensors::SensorStateUndefined => "Sensor State: Undefined",
            Sensors::SensorStateReady => "Sensor State: Ready",
            Sensors::SensorStateNotAvailable => "Sensor State: Not Available",
            Sensors::SensorStateNoData => "Sensor State: No Data",
            Sensors::SensorStateInitializing => "Sensor State: Initializing",
            Sensors::SensorStateAccessDenied => "Sensor State: Access Denied",
            Sensors::SensorStateError => "Sensor State: Error",
            Sensors::SensorEventUnknown => "Sensor Event: Unknown",
            Sensors::SensorEventStateChanged => "Sensor Event: State Changed",
            Sensors::SensorEventPropertyChanged => "Sensor Event: Property Changed",
            Sensors::SensorEventDataUpdated => "Sensor Event: Data Updated",
            Sensors::SensorEventPollResponse => "Sensor Event: Poll Response",
            Sensors::SensorEventChangeSensitivity => "Sensor Event: Change Sensitivity",
            Sensors::SensorEventRangeMaximumReached => "Sensor Event: Range Maximum Reached",
            Sensors::SensorEventRangeMinimumReached => "Sensor Event: Range Minimum Reached",
            Sensors::SensorEventHighThresholdCrossUpward => "Sensor Event: High Threshold Cross Upward",
            Sensors::SensorEventHighThresholdCrossDownward => "Sensor Event: High Threshold Cross Downward",
            Sensors::SensorEventLowThresholdCrossUpward => "Sensor Event: Low Threshold Cross Upward",
            Sensors::SensorEventLowThresholdCrossDownward => "Sensor Event: Low Threshold Cross Downward",
            Sensors::SensorEventZeroThresholdCrossUpward => "Sensor Event: Zero Threshold Cross Upward",
            Sensors::SensorEventZeroThresholdCrossDownward => "Sensor Event: Zero Threshold Cross Downward",
            Sensors::SensorEventPeriodExceeded => "Sensor Event: Period Exceeded",
            Sensors::SensorEventFrequencyExceeded => "Sensor Event: Frequency Exceeded",
            Sensors::SensorEventComplexTrigger => "Sensor Event: Complex Trigger",
            Sensors::ConnectionTypePCIntegrated => "Connection Type: PC Integrated",
            Sensors::ConnectionTypePCAttached => "Connection Type: PC Attached",
            Sensors::ConnectionTypePCExternal => "Connection Type: PC External",
            Sensors::ReportingStateReportNoEvents => "Reporting State: Report No Events",
            Sensors::ReportingStateReportAllEvents => "Reporting State: Report All Events",
            Sensors::ReportingStateReportThresholdEvents => "Reporting State: Report Threshold Events",
            Sensors::ReportingStateWakeOnNoEvents => "Reporting State: Wake On No Events",
            Sensors::ReportingStateWakeOnAllEvents => "Reporting State: Wake On All Events",
            Sensors::ReportingStateWakeOnThresholdEvents => "Reporting State: Wake On Threshold Events",
            Sensors::ReportingStateAnytime => "Reporting State: Anytime",
            Sensors::PowerStateUndefined => "Power State: Undefined",
            Sensors::PowerStateD0FullPower => "Power State: D0 Full Power",
            Sensors::PowerStateD1LowPower => "Power State: D1 Low Power",
            Sensors::PowerStateD2StandbyPowerwithWakeup => "Power State: D2 Standby Power with Wakeup",
            Sensors::PowerStateD3SleepwithWakeup => "Power State: D3 Sleep with Wakeup",
            Sensors::PowerStateD4PowerOff => "Power State: D4 Power Off",
            Sensors::AccuracyDefault => "Accuracy: Default",
            Sensors::AccuracyHigh => "Accuracy: High",
            Sensors::AccuracyMedium => "Accuracy: Medium",
            Sensors::AccuracyLow => "Accuracy: Low",
            Sensors::FixQualityNoFix => "Fix Quality: No Fix",
            Sensors::FixQualityGPS => "Fix Quality: GPS",
            Sensors::FixQualityDGPS => "Fix Quality: DGPS",
            Sensors::FixTypeNoFix => "Fix Type: No Fix",
            Sensors::FixTypeGPSSPSModeFixValid => "Fix Type: GPS SPS Mode, Fix Valid",
            Sensors::FixTypeDGPSSPSModeFixValid => "Fix Type: DGPS SPS Mode, Fix Valid",
            Sensors::FixTypeGPSPPSModeFixValid => "Fix Type: GPS PPS Mode, Fix Valid",
            Sensors::FixTypeRealTimeKinematic => "Fix Type: Real Time Kinematic",
            Sensors::FixTypeFloatRTK => "Fix Type: Float RTK",
            Sensors::FixTypeEstimateddeadreckoned => "Fix Type: Estimated (dead reckoned)",
            Sensors::FixTypeManualInputMode => "Fix Type: Manual Input Mode",
            Sensors::FixTypeSimulatorMode => "Fix Type: Simulator Mode",
            Sensors::GPSOperationModeManual => "GPS Operation Mode: Manual",
            Sensors::GPSOperationModeAutomatic => "GPS Operation Mode: Automatic",
            Sensors::GPSSelectionModeAutonomous => "GPS Selection Mode: Autonomous",
            Sensors::GPSSelectionModeDGPS => "GPS Selection Mode: DGPS",
            Sensors::GPSSelectionModeEstimateddeadreckoned => "GPS Selection Mode: Estimated (dead reckoned)",
            Sensors::GPSSelectionModeManualInput => "GPS Selection Mode: Manual Input",
            Sensors::GPSSelectionModeSimulator => "GPS Selection Mode: Simulator",
            Sensors::GPSSelectionModeDataNotValid => "GPS Selection Mode: Data Not Valid",
            Sensors::GPSStatusDataValid => "GPS Status Data: Valid",
            Sensors::GPSStatusDataNotValid => "GPS Status Data: Not Valid",
            Sensors::DayofWeekSunday => "Day of Week: Sunday",
            Sensors::DayofWeekMonday => "Day of Week: Monday",
            Sensors::DayofWeekTuesday => "Day of Week: Tuesday",
            Sensors::DayofWeekWednesday => "Day of Week: Wednesday",
            Sensors::DayofWeekThursday => "Day of Week: Thursday",
            Sensors::DayofWeekFriday => "Day of Week: Friday",
            Sensors::DayofWeekSaturday => "Day of Week: Saturday",
            Sensors::KindCategory => "Kind: Category",
            Sensors::KindType => "Kind: Type",
            Sensors::KindEvent => "Kind: Event",
            Sensors::KindProperty => "Kind: Property",
            Sensors::KindDataField => "Kind: Data Field",
            Sensors::MagnetometerAccuracyLow => "Magnetometer Accuracy: Low",
            Sensors::MagnetometerAccuracyMedium => "Magnetometer Accuracy: Medium",
            Sensors::MagnetometerAccuracyHigh => "Magnetometer Accuracy: High",
            Sensors::SimpleOrientationDirectionNotRotated => "Simple Orientation Direction: Not Rotated",
            Sensors::SimpleOrientationDirectionRotated90DegreesCCW => "Simple Orientation Direction: Rotated 90 Degrees CCW",
            Sensors::SimpleOrientationDirectionRotated180DegreesCCW => "Simple Orientation Direction: Rotated 180 Degrees CCW",
            Sensors::SimpleOrientationDirectionRotated270DegreesCCW => "Simple Orientation Direction: Rotated 270 Degrees CCW",
            Sensors::SimpleOrientationDirectionFaceUp => "Simple Orientation Direction: Face Up",
            Sensors::SimpleOrientationDirectionFaceDown => "Simple Orientation Direction: Face Down",
            Sensors::VT_NULL => "VT_NULL",
            Sensors::VT_BOOL => "VT_BOOL",
            Sensors::VT_UI1 => "VT_UI1",
            Sensors::VT_I1 => "VT_I1",
            Sensors::VT_UI2 => "VT_UI2",
            Sensors::VT_I2 => "VT_I2",
            Sensors::VT_UI4 => "VT_UI4",
            Sensors::VT_I4 => "VT_I4",
            Sensors::VT_UI8 => "VT_UI8",
            Sensors::VT_I8 => "VT_I8",
            Sensors::VT_R4 => "VT_R4",
            Sensors::VT_R8 => "VT_R8",
            Sensors::VT_WSTR => "VT_WSTR",
            Sensors::VT_STR => "VT_STR",
            Sensors::VT_CLSID => "VT_CLSID",
            Sensors::VT_VECTORVT_UI1 => "VT_VECTOR VT_UI1",
            Sensors::VT_F16E0 => "VT_F16E0",
            Sensors::VT_F16E1 => "VT_F16E1",
            Sensors::VT_F16E2 => "VT_F16E2",
            Sensors::VT_F16E3 => "VT_F16E3",
            Sensors::VT_F16E4 => "VT_F16E4",
            Sensors::VT_F16E5 => "VT_F16E5",
            Sensors::VT_F16E6 => "VT_F16E6",
            Sensors::VT_F16E7 => "VT_F16E7",
            Sensors::VT_F16E8 => "VT_F16E8",
            Sensors::VT_F16E9 => "VT_F16E9",
            Sensors::VT_F16EA => "VT_F16EA",
            Sensors::VT_F16EB => "VT_F16EB",
            Sensors::VT_F16EC => "VT_F16EC",
            Sensors::VT_F16ED => "VT_F16ED",
            Sensors::VT_F16EE => "VT_F16EE",
            Sensors::VT_F16EF => "VT_F16EF",
            Sensors::VT_F32E0 => "VT_F32E0",
            Sensors::VT_F32E1 => "VT_F32E1",
            Sensors::VT_F32E2 => "VT_F32E2",
            Sensors::VT_F32E3 => "VT_F32E3",
            Sensors::VT_F32E4 => "VT_F32E4",
            Sensors::VT_F32E5 => "VT_F32E5",
            Sensors::VT_F32E6 => "VT_F32E6",
            Sensors::VT_F32E7 => "VT_F32E7",
            Sensors::VT_F32E8 => "VT_F32E8",
            Sensors::VT_F32E9 => "VT_F32E9",
            Sensors::VT_F32EA => "VT_F32EA",
            Sensors::VT_F32EB => "VT_F32EB",
            Sensors::VT_F32EC => "VT_F32EC",
            Sensors::VT_F32ED => "VT_F32ED",
            Sensors::VT_F32EE => "VT_F32EE",
            Sensors::VT_F32EF => "VT_F32EF",
            Sensors::ActivityTypeUnknown => "Activity Type: Unknown",
            Sensors::ActivityTypeStationary => "Activity Type: Stationary",
            Sensors::ActivityTypeFidgeting => "Activity Type: Fidgeting",
            Sensors::ActivityTypeWalking => "Activity Type: Walking",
            Sensors::ActivityTypeRunning => "Activity Type: Running",
            Sensors::ActivityTypeInVehicle => "Activity Type: In Vehicle",
            Sensors::ActivityTypeBiking => "Activity Type: Biking",
            Sensors::ActivityTypeIdle => "Activity Type: Idle",
            Sensors::UnitNotSpecified => "Unit: Not Specified",
            Sensors::UnitLux => "Unit: Lux",
            Sensors::UnitDegreesKelvin => "Unit: Degrees Kelvin",
            Sensors::UnitDegreesCelsius => "Unit: Degrees Celsius",
            Sensors::UnitPascal => "Unit: Pascal",
            Sensors::UnitNewton => "Unit: Newton",
            Sensors::UnitMetersSecond => "Unit: Meters/Second",
            Sensors::UnitKilogram => "Unit: Kilogram",
            Sensors::UnitMeter => "Unit: Meter",
            Sensors::UnitMetersSecondSecond => "Unit: Meters/Second/Second",
            Sensors::UnitFarad => "Unit: Farad",
            Sensors::UnitAmpere => "Unit: Ampere",
            Sensors::UnitWatt => "Unit: Watt",
            Sensors::UnitHenry => "Unit: Henry",
            Sensors::UnitOhm => "Unit: Ohm",
            Sensors::UnitVolt => "Unit: Volt",
            Sensors::UnitHertz => "Unit: Hertz",
            Sensors::UnitBar => "Unit: Bar",
            Sensors::UnitDegreesAnticlockwise => "Unit: Degrees Anti-clockwise",
            Sensors::UnitDegreesClockwise => "Unit: Degrees Clockwise",
            Sensors::UnitDegrees => "Unit: Degrees",
            Sensors::UnitDegreesSecond => "Unit: Degrees/Second",
            Sensors::UnitDegreesSecondSecond => "Unit: Degrees/Second/Second",
            Sensors::UnitKnot => "Unit: Knot",
            Sensors::UnitPercent => "Unit: Percent",
            Sensors::UnitSecond => "Unit: Second",
            Sensors::UnitMillisecond => "Unit: Millisecond",
            Sensors::UnitG => "Unit: G",
            Sensors::UnitBytes => "Unit: Bytes",
            Sensors::UnitMilligauss => "Unit: Milligauss",
            Sensors::UnitBits => "Unit: Bits",
            Sensors::ActivityStateNoStateChange => "Activity State: No State Change",
            Sensors::ActivityStateStartActivity => "Activity State: Start Activity",
            Sensors::ActivityStateEndActivity => "Activity State: End Activity",
            Sensors::Exponent0 => "Exponent 0",
            Sensors::Exponent1 => "Exponent 1",
            Sensors::Exponent2 => "Exponent 2",
            Sensors::Exponent3 => "Exponent 3",
            Sensors::Exponent4 => "Exponent 4",
            Sensors::Exponent5 => "Exponent 5",
            Sensors::Exponent6 => "Exponent 6",
            Sensors::Exponent7 => "Exponent 7",
            Sensors::Exponent8 => "Exponent 8",
            Sensors::Exponent9 => "Exponent 9",
            Sensors::ExponentA => "Exponent A",
            Sensors::ExponentB => "Exponent B",
            Sensors::ExponentC => "Exponent C",
            Sensors::ExponentD => "Exponent D",
            Sensors::ExponentE => "Exponent E",
            Sensors::ExponentF => "Exponent F",
            Sensors::DevicePositionUnknown => "Device Position: Unknown",
            Sensors::DevicePositionUnchanged => "Device Position: Unchanged",
            Sensors::DevicePositionOnDesk => "Device Position: On Desk",
            Sensors::DevicePositionInHand => "Device Position: In Hand",
            Sensors::DevicePositionMovinginBag => "Device Position: Moving in Bag",
            Sensors::DevicePositionStationaryinBag => "Device Position: Stationary in Bag",
            Sensors::StepTypeUnknown => "Step Type: Unknown",
            Sensors::StepTypeWalking => "Step Type: Walking",
            Sensors::StepTypeRunning => "Step Type: Running",
            Sensors::GestureStateUnknown => "Gesture State: Unknown",
            Sensors::GestureStateStarted => "Gesture State: Started",
            Sensors::GestureStateCompleted => "Gesture State: Completed",
            Sensors::GestureStateCancelled => "Gesture State: Cancelled",
            Sensors::HingeFoldContributingPanelUnknown => "Hinge Fold Contributing Panel: Unknown",
            Sensors::HingeFoldContributingPanelPanel1 => "Hinge Fold Contributing Panel: Panel 1",
            Sensors::HingeFoldContributingPanelPanel2 => "Hinge Fold Contributing Panel: Panel 2",
            Sensors::HingeFoldContributingPanelBoth => "Hinge Fold Contributing Panel: Both",
            Sensors::HingeFoldTypeUnknown => "Hinge Fold Type: Unknown",
            Sensors::HingeFoldTypeIncreasing => "Hinge Fold Type: Increasing",
            Sensors::HingeFoldTypeDecreasing => "Hinge Fold Type: Decreasing",
            Sensors::HumanPresenceDetectionTypeVendorDefinedNonBiometric => "Human Presence Detection Type: Vendor-Defined Non-Biometric",
            Sensors::HumanPresenceDetectionTypeVendorDefinedBiometric => "Human Presence Detection Type: Vendor-Defined Biometric",
            Sensors::HumanPresenceDetectionTypeFacialBiometric => "Human Presence Detection Type: Facial Biometric",
            Sensors::HumanPresenceDetectionTypeAudioBiometric => "Human Presence Detection Type: Audio Biometric",
            Sensors::ModifierChangeSensitivityAbsolute => "Modifier: Change Sensitivity Absolute",
            Sensors::ModifierMaximum => "Modifier: Maximum",
            Sensors::ModifierMinimum => "Modifier: Minimum",
            Sensors::ModifierAccuracy => "Modifier: Accuracy",
            Sensors::ModifierResolution => "Modifier: Resolution",
            Sensors::ModifierThresholdHigh => "Modifier: Threshold High",
            Sensors::ModifierThresholdLow => "Modifier: Threshold Low",
            Sensors::ModifierCalibrationOffset => "Modifier: Calibration Offset",
            Sensors::ModifierCalibrationMultiplier => "Modifier: Calibration Multiplier",
            Sensors::ModifierReportInterval => "Modifier: Report Interval",
            Sensors::ModifierFrequencyMax => "Modifier: Frequency Max",
            Sensors::ModifierPeriodMax => "Modifier: Period Max",
            Sensors::ModifierChangeSensitivityPercentofRange => "Modifier: Change Sensitivity Percent of Range",
            Sensors::ModifierChangeSensitivityPercentRelative => "Modifier: Change Sensitivity Percent Relative",
            Sensors::ModifierVendorReserved => "Modifier: Vendor Reserved",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x40`: "Medical Instrument"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::MedicalInstrument { usage: MedicalInstrument::VCRAcquisition };
/// let u2 = Usage::new_from_page_and_id(0x40, 0x20).unwrap();
/// let u3 = Usage::from(MedicalInstrument::VCRAcquisition);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x40, u1.usage_page_value());
/// assert_eq!(0x20, u1.usage_id_value());
/// assert_eq!((0x40 << 16) | 0x20, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum MedicalInstrument {
    /// Usage ID `0x1`: "Medical Ultrasound"
    MedicalUltrasound,
    /// Usage ID `0x20`: "VCR/Acquisition"
    VCRAcquisition,
    /// Usage ID `0x21`: "Freeze/Thaw"
    FreezeThaw,
    /// Usage ID `0x22`: "Clip Store"
    ClipStore,
    /// Usage ID `0x23`: "Update"
    Update,
    /// Usage ID `0x24`: "Next"
    Next,
    /// Usage ID `0x25`: "Save"
    Save,
    /// Usage ID `0x26`: "Print"
    Print,
    /// Usage ID `0x27`: "Microphone Enable"
    MicrophoneEnable,
    /// Usage ID `0x40`: "Cine"
    Cine,
    /// Usage ID `0x41`: "Transmit Power"
    TransmitPower,
    /// Usage ID `0x42`: "Volume"
    Volume,
    /// Usage ID `0x43`: "Focus"
    Focus,
    /// Usage ID `0x44`: "Depth"
    Depth,
    /// Usage ID `0x60`: "Soft Step - Primary"
    SoftStepPrimary,
    /// Usage ID `0x61`: "Soft Step - Secondary"
    SoftStepSecondary,
    /// Usage ID `0x70`: "Depth Gain Compensation"
    DepthGainCompensation,
    /// Usage ID `0x80`: "Zoom Select"
    ZoomSelect,
    /// Usage ID `0x81`: "Zoom Adjust"
    ZoomAdjust,
    /// Usage ID `0x82`: "Spectral Doppler Mode Select"
    SpectralDopplerModeSelect,
    /// Usage ID `0x83`: "Spectral Doppler Adjust"
    SpectralDopplerAdjust,
    /// Usage ID `0x84`: "Color Doppler Mode Select"
    ColorDopplerModeSelect,
    /// Usage ID `0x85`: "Color Doppler Adjust"
    ColorDopplerAdjust,
    /// Usage ID `0x86`: "Motion Mode Select"
    MotionModeSelect,
    /// Usage ID `0x87`: "Motion Mode Adjust"
    MotionModeAdjust,
    /// Usage ID `0x88`: "2-D Mode Select"
    TwoDModeSelect,
    /// Usage ID `0x89`: "2-D Mode Adjust"
    TwoDModeAdjust,
    /// Usage ID `0xA0`: "Soft Control Select"
    SoftControlSelect,
    /// Usage ID `0xA1`: "Soft Control Adjust"
    SoftControlAdjust,
}

impl fmt::Display for MedicalInstrument {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            MedicalInstrument::MedicalUltrasound => "Medical Ultrasound",
            MedicalInstrument::VCRAcquisition => "VCR/Acquisition",
            MedicalInstrument::FreezeThaw => "Freeze/Thaw",
            MedicalInstrument::ClipStore => "Clip Store",
            MedicalInstrument::Update => "Update",
            MedicalInstrument::Next => "Next",
            MedicalInstrument::Save => "Save",
            MedicalInstrument::Print => "Print",
            MedicalInstrument::MicrophoneEnable => "Microphone Enable",
            MedicalInstrument::Cine => "Cine",
            MedicalInstrument::TransmitPower => "Transmit Power",
            MedicalInstrument::Volume => "Volume",
            MedicalInstrument::Focus => "Focus",
            MedicalInstrument::Depth => "Depth",
            MedicalInstrument::SoftStepPrimary => "Soft Step - Primary",
            MedicalInstrument::SoftStepSecondary => "Soft Step - Secondary",
            MedicalInstrument::DepthGainCompensation => "Depth Gain Compensation",
            MedicalInstrument::ZoomSelect => "Zoom Select",
            MedicalInstrument::ZoomAdjust => "Zoom Adjust",
            MedicalInstrument::SpectralDopplerModeSelect => "Spectral Doppler Mode Select",
            MedicalInstrument::SpectralDopplerAdjust => "Spectral Doppler Adjust",
            MedicalInstrument::ColorDopplerModeSelect => "Color Doppler Mode Select",
            MedicalInstrument::ColorDopplerAdjust => "Color Doppler Adjust",
            MedicalInstrument::MotionModeSelect => "Motion Mode Select",
            MedicalInstrument::MotionModeAdjust => "Motion Mode Adjust",
            MedicalInstrument::TwoDModeSelect => "2-D Mode Select",
            MedicalInstrument::TwoDModeAdjust => "2-D Mode Adjust",
            MedicalInstrument::SoftControlSelect => "Soft Control Select",
            MedicalInstrument::SoftControlAdjust => "Soft Control Adjust",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x41`: "Braille Display"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRow };
/// let u2 = Usage::new_from_page_and_id(0x41, 0x2).unwrap();
/// let u3 = Usage::from(BrailleDisplay::BrailleRow);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x41, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x41 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum BrailleDisplay {
    /// Usage ID `0x1`: "Braille Display"
    BrailleDisplay,
    /// Usage ID `0x2`: "Braille Row"
    BrailleRow,
    /// Usage ID `0x3`: "8 Dot Braille Cell"
    EightDotBrailleCell,
    /// Usage ID `0x4`: "6 Dot Braille Cell"
    SixDotBrailleCell,
    /// Usage ID `0x5`: "Number of Braille Cells"
    NumberofBrailleCells,
    /// Usage ID `0x6`: "Screen Reader Control"
    ScreenReaderControl,
    /// Usage ID `0x7`: "Screen Reader Identifier"
    ScreenReaderIdentifier,
    /// Usage ID `0xFA`: "Router Set 1"
    RouterSet1,
    /// Usage ID `0xFB`: "Router Set 2"
    RouterSet2,
    /// Usage ID `0xFC`: "Router Set 3"
    RouterSet3,
    /// Usage ID `0x100`: "Router Key"
    RouterKey,
    /// Usage ID `0x101`: "Row Router Key"
    RowRouterKey,
    /// Usage ID `0x200`: "Braille Buttons"
    BrailleButtons,
    /// Usage ID `0x201`: "Braille Keyboard Dot 1"
    BrailleKeyboardDot1,
    /// Usage ID `0x202`: "Braille Keyboard Dot 2"
    BrailleKeyboardDot2,
    /// Usage ID `0x203`: "Braille Keyboard Dot 3"
    BrailleKeyboardDot3,
    /// Usage ID `0x204`: "Braille Keyboard Dot 4"
    BrailleKeyboardDot4,
    /// Usage ID `0x205`: "Braille Keyboard Dot 5"
    BrailleKeyboardDot5,
    /// Usage ID `0x206`: "Braille Keyboard Dot 6"
    BrailleKeyboardDot6,
    /// Usage ID `0x207`: "Braille Keyboard Dot 7"
    BrailleKeyboardDot7,
    /// Usage ID `0x208`: "Braille Keyboard Dot 8"
    BrailleKeyboardDot8,
    /// Usage ID `0x209`: "Braille Keyboard Space"
    BrailleKeyboardSpace,
    /// Usage ID `0x20A`: "Braille Keyboard Left Space"
    BrailleKeyboardLeftSpace,
    /// Usage ID `0x20B`: "Braille Keyboard Right Space"
    BrailleKeyboardRightSpace,
    /// Usage ID `0x20C`: "Braille Face Controls"
    BrailleFaceControls,
    /// Usage ID `0x20D`: "Braille Left Controls"
    BrailleLeftControls,
    /// Usage ID `0x20E`: "Braille Right Controls"
    BrailleRightControls,
    /// Usage ID `0x20F`: "Braille Top Controls"
    BrailleTopControls,
    /// Usage ID `0x210`: "Braille Joystick Center"
    BrailleJoystickCenter,
    /// Usage ID `0x211`: "Braille Joystick Up"
    BrailleJoystickUp,
    /// Usage ID `0x212`: "Braille Joystick Down"
    BrailleJoystickDown,
    /// Usage ID `0x213`: "Braille Joystick Left"
    BrailleJoystickLeft,
    /// Usage ID `0x214`: "Braille Joystick Right"
    BrailleJoystickRight,
    /// Usage ID `0x215`: "Braille D-Pad Center"
    BrailleDPadCenter,
    /// Usage ID `0x216`: "Braille D-Pad Up"
    BrailleDPadUp,
    /// Usage ID `0x217`: "Braille D-Pad Down"
    BrailleDPadDown,
    /// Usage ID `0x218`: "Braille D-Pad Left"
    BrailleDPadLeft,
    /// Usage ID `0x219`: "Braille D-Pad Right"
    BrailleDPadRight,
    /// Usage ID `0x21A`: "Braille Pan Left"
    BraillePanLeft,
    /// Usage ID `0x21B`: "Braille Pan Right"
    BraillePanRight,
    /// Usage ID `0x21C`: "Braille Rocker Up"
    BrailleRockerUp,
    /// Usage ID `0x21D`: "Braille Rocker Down"
    BrailleRockerDown,
    /// Usage ID `0x21E`: "Braille Rocker Press"
    BrailleRockerPress,
}

impl fmt::Display for BrailleDisplay {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            BrailleDisplay::BrailleDisplay => "Braille Display",
            BrailleDisplay::BrailleRow => "Braille Row",
            BrailleDisplay::EightDotBrailleCell => "8 Dot Braille Cell",
            BrailleDisplay::SixDotBrailleCell => "6 Dot Braille Cell",
            BrailleDisplay::NumberofBrailleCells => "Number of Braille Cells",
            BrailleDisplay::ScreenReaderControl => "Screen Reader Control",
            BrailleDisplay::ScreenReaderIdentifier => "Screen Reader Identifier",
            BrailleDisplay::RouterSet1 => "Router Set 1",
            BrailleDisplay::RouterSet2 => "Router Set 2",
            BrailleDisplay::RouterSet3 => "Router Set 3",
            BrailleDisplay::RouterKey => "Router Key",
            BrailleDisplay::RowRouterKey => "Row Router Key",
            BrailleDisplay::BrailleButtons => "Braille Buttons",
            BrailleDisplay::BrailleKeyboardDot1 => "Braille Keyboard Dot 1",
            BrailleDisplay::BrailleKeyboardDot2 => "Braille Keyboard Dot 2",
            BrailleDisplay::BrailleKeyboardDot3 => "Braille Keyboard Dot 3",
            BrailleDisplay::BrailleKeyboardDot4 => "Braille Keyboard Dot 4",
            BrailleDisplay::BrailleKeyboardDot5 => "Braille Keyboard Dot 5",
            BrailleDisplay::BrailleKeyboardDot6 => "Braille Keyboard Dot 6",
            BrailleDisplay::BrailleKeyboardDot7 => "Braille Keyboard Dot 7",
            BrailleDisplay::BrailleKeyboardDot8 => "Braille Keyboard Dot 8",
            BrailleDisplay::BrailleKeyboardSpace => "Braille Keyboard Space",
            BrailleDisplay::BrailleKeyboardLeftSpace => "Braille Keyboard Left Space",
            BrailleDisplay::BrailleKeyboardRightSpace => "Braille Keyboard Right Space",
            BrailleDisplay::BrailleFaceControls => "Braille Face Controls",
            BrailleDisplay::BrailleLeftControls => "Braille Left Controls",
            BrailleDisplay::BrailleRightControls => "Braille Right Controls",
            BrailleDisplay::BrailleTopControls => "Braille Top Controls",
            BrailleDisplay::BrailleJoystickCenter => "Braille Joystick Center",
            BrailleDisplay::BrailleJoystickUp => "Braille Joystick Up",
            BrailleDisplay::BrailleJoystickDown => "Braille Joystick Down",
            BrailleDisplay::BrailleJoystickLeft => "Braille Joystick Left",
            BrailleDisplay::BrailleJoystickRight => "Braille Joystick Right",
            BrailleDisplay::BrailleDPadCenter => "Braille D-Pad Center",
            BrailleDisplay::BrailleDPadUp => "Braille D-Pad Up",
            BrailleDisplay::BrailleDPadDown => "Braille D-Pad Down",
            BrailleDisplay::BrailleDPadLeft => "Braille D-Pad Left",
            BrailleDisplay::BrailleDPadRight => "Braille D-Pad Right",
            BrailleDisplay::BraillePanLeft => "Braille Pan Left",
            BrailleDisplay::BraillePanRight => "Braille Pan Right",
            BrailleDisplay::BrailleRockerUp => "Braille Rocker Up",
            BrailleDisplay::BrailleRockerDown => "Braille Rocker Down",
            BrailleDisplay::BrailleRockerPress => "Braille Rocker Press",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x59`: "Lighting And Illumination"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArrayAttributesReport };
/// let u2 = Usage::new_from_page_and_id(0x59, 0x2).unwrap();
/// let u3 = Usage::from(LightingAndIllumination::LampArrayAttributesReport);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x59, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x59 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum LightingAndIllumination {
    /// Usage ID `0x1`: "LampArray"
    LampArray,
    /// Usage ID `0x2`: "LampArrayAttributesReport"
    LampArrayAttributesReport,
    /// Usage ID `0x3`: "LampCount"
    LampCount,
    /// Usage ID `0x4`: "BoundingBoxWidthInMicrometers"
    BoundingBoxWidthInMicrometers,
    /// Usage ID `0x5`: "BoundingBoxHeightInMicrometers"
    BoundingBoxHeightInMicrometers,
    /// Usage ID `0x6`: "BoundingBoxDepthInMicrometers"
    BoundingBoxDepthInMicrometers,
    /// Usage ID `0x7`: "LampArrayKind"
    LampArrayKind,
    /// Usage ID `0x8`: "MinUpdateIntervalInMicroseconds"
    MinUpdateIntervalInMicroseconds,
    /// Usage ID `0x20`: "LampAttributesRequestReport"
    LampAttributesRequestReport,
    /// Usage ID `0x21`: "LampId"
    LampId,
    /// Usage ID `0x22`: "LampAttributesResponseReport"
    LampAttributesResponseReport,
    /// Usage ID `0x23`: "PositionXInMicrometers"
    PositionXInMicrometers,
    /// Usage ID `0x24`: "PositionYInMicrometers"
    PositionYInMicrometers,
    /// Usage ID `0x25`: "PositionZInMicrometers"
    PositionZInMicrometers,
    /// Usage ID `0x26`: "LampPurposes"
    LampPurposes,
    /// Usage ID `0x27`: "UpdateLatencyInMicroseconds"
    UpdateLatencyInMicroseconds,
    /// Usage ID `0x28`: "RedLevelCount"
    RedLevelCount,
    /// Usage ID `0x29`: "GreenLevelCount"
    GreenLevelCount,
    /// Usage ID `0x2A`: "BlueLevelCount"
    BlueLevelCount,
    /// Usage ID `0x2B`: "IntensityLevelCount"
    IntensityLevelCount,
    /// Usage ID `0x2C`: "IsProgrammable"
    IsProgrammable,
    /// Usage ID `0x2D`: "InputBinding"
    InputBinding,
    /// Usage ID `0x50`: "LampMultiUpdateReport"
    LampMultiUpdateReport,
    /// Usage ID `0x51`: "RedUpdateChannel"
    RedUpdateChannel,
    /// Usage ID `0x52`: "GreenUpdateChannel"
    GreenUpdateChannel,
    /// Usage ID `0x53`: "BlueUpdateChannel"
    BlueUpdateChannel,
    /// Usage ID `0x54`: "IntensityUpdateChannel"
    IntensityUpdateChannel,
    /// Usage ID `0x55`: "LampUpdateFlags"
    LampUpdateFlags,
    /// Usage ID `0x60`: "LampRangeUpdateReport"
    LampRangeUpdateReport,
    /// Usage ID `0x61`: "LampIdStart"
    LampIdStart,
    /// Usage ID `0x62`: "LampIdEnd"
    LampIdEnd,
    /// Usage ID `0x70`: "LampArrayControlReport"
    LampArrayControlReport,
    /// Usage ID `0x71`: "AutonomousMode"
    AutonomousMode,
}

impl fmt::Display for LightingAndIllumination {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            LightingAndIllumination::LampArray => "LampArray",
            LightingAndIllumination::LampArrayAttributesReport => "LampArrayAttributesReport",
            LightingAndIllumination::LampCount => "LampCount",
            LightingAndIllumination::BoundingBoxWidthInMicrometers => "BoundingBoxWidthInMicrometers",
            LightingAndIllumination::BoundingBoxHeightInMicrometers => "BoundingBoxHeightInMicrometers",
            LightingAndIllumination::BoundingBoxDepthInMicrometers => "BoundingBoxDepthInMicrometers",
            LightingAndIllumination::LampArrayKind => "LampArrayKind",
            LightingAndIllumination::MinUpdateIntervalInMicroseconds => "MinUpdateIntervalInMicroseconds",
            LightingAndIllumination::LampAttributesRequestReport => "LampAttributesRequestReport",
            LightingAndIllumination::LampId => "LampId",
            LightingAndIllumination::LampAttributesResponseReport => "LampAttributesResponseReport",
            LightingAndIllumination::PositionXInMicrometers => "PositionXInMicrometers",
            LightingAndIllumination::PositionYInMicrometers => "PositionYInMicrometers",
            LightingAndIllumination::PositionZInMicrometers => "PositionZInMicrometers",
            LightingAndIllumination::LampPurposes => "LampPurposes",
            LightingAndIllumination::UpdateLatencyInMicroseconds => "UpdateLatencyInMicroseconds",
            LightingAndIllumination::RedLevelCount => "RedLevelCount",
            LightingAndIllumination::GreenLevelCount => "GreenLevelCount",
            LightingAndIllumination::BlueLevelCount => "BlueLevelCount",
            LightingAndIllumination::IntensityLevelCount => "IntensityLevelCount",
            LightingAndIllumination::IsProgrammable => "IsProgrammable",
            LightingAndIllumination::InputBinding => "InputBinding",
            LightingAndIllumination::LampMultiUpdateReport => "LampMultiUpdateReport",
            LightingAndIllumination::RedUpdateChannel => "RedUpdateChannel",
            LightingAndIllumination::GreenUpdateChannel => "GreenUpdateChannel",
            LightingAndIllumination::BlueUpdateChannel => "BlueUpdateChannel",
            LightingAndIllumination::IntensityUpdateChannel => "IntensityUpdateChannel",
            LightingAndIllumination::LampUpdateFlags => "LampUpdateFlags",
            LightingAndIllumination::LampRangeUpdateReport => "LampRangeUpdateReport",
            LightingAndIllumination::LampIdStart => "LampIdStart",
            LightingAndIllumination::LampIdEnd => "LampIdEnd",
            LightingAndIllumination::LampArrayControlReport => "LampArrayControlReport",
            LightingAndIllumination::AutonomousMode => "AutonomousMode",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x80`: "Monitor"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::Monitor { usage: Monitor::EDIDInformation };
/// let u2 = Usage::new_from_page_and_id(0x80, 0x2).unwrap();
/// let u3 = Usage::from(Monitor::EDIDInformation);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x80, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x80 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Monitor {
    /// Usage ID `0x1`: "Monitor Control"
    MonitorControl,
    /// Usage ID `0x2`: "EDID Information"
    EDIDInformation,
    /// Usage ID `0x3`: "VDIF Information"
    VDIFInformation,
    /// Usage ID `0x4`: "VESA Version"
    VESAVersion,
}

impl fmt::Display for Monitor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Monitor::MonitorControl => "Monitor Control",
            Monitor::EDIDInformation => "EDID Information",
            Monitor::VDIFInformation => "VDIF Information",
            Monitor::VESAVersion => "VESA Version",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x81`: "Monitor Enumerated"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
///
/// This Usage Page is generated, not defined, any Usage IDs in this Usage
/// Page are simply the enumerate number.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum MonitorEnumerated {
    MonitorEnumerated {
        enumerate: u16,
    }
}

impl fmt::Display for MonitorEnumerated {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            MonitorEnumerated::MonitorEnumerated { enumerate } => format!("Enumerate {enumerate}"),
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x82`: "VESA Virtual Controls"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::VESAVirtualControls { usage: VESAVirtualControls::Brightness };
/// let u2 = Usage::new_from_page_and_id(0x82, 0x10).unwrap();
/// let u3 = Usage::from(VESAVirtualControls::Brightness);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x82, u1.usage_page_value());
/// assert_eq!(0x10, u1.usage_id_value());
/// assert_eq!((0x82 << 16) | 0x10, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum VESAVirtualControls {
    /// Usage ID `0x1`: "Degauss"
    Degauss,
    /// Usage ID `0x10`: "Brightness"
    Brightness,
    /// Usage ID `0x12`: "Contrast"
    Contrast,
    /// Usage ID `0x16`: "Red Video Gain"
    RedVideoGain,
    /// Usage ID `0x18`: "Green Video Gain"
    GreenVideoGain,
    /// Usage ID `0x1A`: "Blue Video Gain"
    BlueVideoGain,
    /// Usage ID `0x1C`: "Focus"
    Focus,
    /// Usage ID `0x20`: "Horizontal Position"
    HorizontalPosition,
    /// Usage ID `0x22`: "Horizontal Size"
    HorizontalSize,
    /// Usage ID `0x24`: "Horizontal Pincushion"
    HorizontalPincushion,
    /// Usage ID `0x26`: "Horizontal Pincushion Balance"
    HorizontalPincushionBalance,
    /// Usage ID `0x28`: "Horizontal Misconvergence"
    HorizontalMisconvergence,
    /// Usage ID `0x2A`: "Horizontal Linearity"
    HorizontalLinearity,
    /// Usage ID `0x2C`: "Horizontal Linearity Balance"
    HorizontalLinearityBalance,
    /// Usage ID `0x30`: "Vertical Position"
    VerticalPosition,
    /// Usage ID `0x32`: "Vertical Size"
    VerticalSize,
    /// Usage ID `0x34`: "Vertical Pincushion"
    VerticalPincushion,
    /// Usage ID `0x36`: "Vertical Pincushion Balance"
    VerticalPincushionBalance,
    /// Usage ID `0x38`: "Vertical Misconvergence"
    VerticalMisconvergence,
    /// Usage ID `0x3A`: "Vertical Linearity"
    VerticalLinearity,
    /// Usage ID `0x3C`: "Vertical Linearity Balance"
    VerticalLinearityBalance,
    /// Usage ID `0x40`: "Parallelogram Distortion (Key Balance)"
    ParallelogramDistortionKeyBalance,
    /// Usage ID `0x42`: "Trapezoidal Distortion (Key)"
    TrapezoidalDistortionKey,
    /// Usage ID `0x44`: "Tilt (Rotation)"
    TiltRotation,
    /// Usage ID `0x46`: "Top Corner Distortion Control"
    TopCornerDistortionControl,
    /// Usage ID `0x48`: "Top Corner Distortion Balance"
    TopCornerDistortionBalance,
    /// Usage ID `0x4A`: "Bottom Corner Distortion Control"
    BottomCornerDistortionControl,
    /// Usage ID `0x4C`: "Bottom Corner Distortion Balance"
    BottomCornerDistortionBalance,
    /// Usage ID `0x56`: "Horizontal Moiré"
    HorizontalMoiré,
    /// Usage ID `0x58`: "Vertical Moiré"
    VerticalMoiré,
    /// Usage ID `0x5E`: "Input Level Select"
    InputLevelSelect,
    /// Usage ID `0x60`: "Input Source Select"
    InputSourceSelect,
    /// Usage ID `0x6C`: "Red Video Black Level"
    RedVideoBlackLevel,
    /// Usage ID `0x6E`: "Green Video Black Level"
    GreenVideoBlackLevel,
    /// Usage ID `0x70`: "Blue Video Black Level"
    BlueVideoBlackLevel,
    /// Usage ID `0xA2`: "Auto Size Center"
    AutoSizeCenter,
    /// Usage ID `0xA4`: "Polarity Horizontal Synchronization"
    PolarityHorizontalSynchronization,
    /// Usage ID `0xA6`: "Polarity Vertical Synchronization"
    PolarityVerticalSynchronization,
    /// Usage ID `0xA8`: "Synchronization Type"
    SynchronizationType,
    /// Usage ID `0xAA`: "Screen Orientation"
    ScreenOrientation,
    /// Usage ID `0xAC`: "Horizontal Frequency"
    HorizontalFrequency,
    /// Usage ID `0xAE`: "Vertical Frequency"
    VerticalFrequency,
    /// Usage ID `0xB0`: "Settings"
    Settings,
    /// Usage ID `0xCA`: "On Screen Display"
    OnScreenDisplay,
    /// Usage ID `0xD4`: "Stereo Mode"
    StereoMode,
}

impl fmt::Display for VESAVirtualControls {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            VESAVirtualControls::Degauss => "Degauss",
            VESAVirtualControls::Brightness => "Brightness",
            VESAVirtualControls::Contrast => "Contrast",
            VESAVirtualControls::RedVideoGain => "Red Video Gain",
            VESAVirtualControls::GreenVideoGain => "Green Video Gain",
            VESAVirtualControls::BlueVideoGain => "Blue Video Gain",
            VESAVirtualControls::Focus => "Focus",
            VESAVirtualControls::HorizontalPosition => "Horizontal Position",
            VESAVirtualControls::HorizontalSize => "Horizontal Size",
            VESAVirtualControls::HorizontalPincushion => "Horizontal Pincushion",
            VESAVirtualControls::HorizontalPincushionBalance => "Horizontal Pincushion Balance",
            VESAVirtualControls::HorizontalMisconvergence => "Horizontal Misconvergence",
            VESAVirtualControls::HorizontalLinearity => "Horizontal Linearity",
            VESAVirtualControls::HorizontalLinearityBalance => "Horizontal Linearity Balance",
            VESAVirtualControls::VerticalPosition => "Vertical Position",
            VESAVirtualControls::VerticalSize => "Vertical Size",
            VESAVirtualControls::VerticalPincushion => "Vertical Pincushion",
            VESAVirtualControls::VerticalPincushionBalance => "Vertical Pincushion Balance",
            VESAVirtualControls::VerticalMisconvergence => "Vertical Misconvergence",
            VESAVirtualControls::VerticalLinearity => "Vertical Linearity",
            VESAVirtualControls::VerticalLinearityBalance => "Vertical Linearity Balance",
            VESAVirtualControls::ParallelogramDistortionKeyBalance => "Parallelogram Distortion (Key Balance)",
            VESAVirtualControls::TrapezoidalDistortionKey => "Trapezoidal Distortion (Key)",
            VESAVirtualControls::TiltRotation => "Tilt (Rotation)",
            VESAVirtualControls::TopCornerDistortionControl => "Top Corner Distortion Control",
            VESAVirtualControls::TopCornerDistortionBalance => "Top Corner Distortion Balance",
            VESAVirtualControls::BottomCornerDistortionControl => "Bottom Corner Distortion Control",
            VESAVirtualControls::BottomCornerDistortionBalance => "Bottom Corner Distortion Balance",
            VESAVirtualControls::HorizontalMoiré => "Horizontal Moiré",
            VESAVirtualControls::VerticalMoiré => "Vertical Moiré",
            VESAVirtualControls::InputLevelSelect => "Input Level Select",
            VESAVirtualControls::InputSourceSelect => "Input Source Select",
            VESAVirtualControls::RedVideoBlackLevel => "Red Video Black Level",
            VESAVirtualControls::GreenVideoBlackLevel => "Green Video Black Level",
            VESAVirtualControls::BlueVideoBlackLevel => "Blue Video Black Level",
            VESAVirtualControls::AutoSizeCenter => "Auto Size Center",
            VESAVirtualControls::PolarityHorizontalSynchronization => "Polarity Horizontal Synchronization",
            VESAVirtualControls::PolarityVerticalSynchronization => "Polarity Vertical Synchronization",
            VESAVirtualControls::SynchronizationType => "Synchronization Type",
            VESAVirtualControls::ScreenOrientation => "Screen Orientation",
            VESAVirtualControls::HorizontalFrequency => "Horizontal Frequency",
            VESAVirtualControls::VerticalFrequency => "Vertical Frequency",
            VESAVirtualControls::Settings => "Settings",
            VESAVirtualControls::OnScreenDisplay => "On Screen Display",
            VESAVirtualControls::StereoMode => "Stereo Mode",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x84`: "Power"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::Power { usage: Power::PresentStatus };
/// let u2 = Usage::new_from_page_and_id(0x84, 0x2).unwrap();
/// let u3 = Usage::from(Power::PresentStatus);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x84, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x84 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Power {
    /// Usage ID `0x1`: "iName"
    iName,
    /// Usage ID `0x2`: "Present Status"
    PresentStatus,
    /// Usage ID `0x3`: "Changed Status"
    ChangedStatus,
    /// Usage ID `0x4`: "UPS"
    UPS,
    /// Usage ID `0x5`: "Power Supply"
    PowerSupply,
    /// Usage ID `0x10`: "Battery System"
    BatterySystem,
    /// Usage ID `0x11`: "Battery System Id"
    BatterySystemId,
    /// Usage ID `0x12`: "Battery"
    Battery,
    /// Usage ID `0x13`: "Battery Id"
    BatteryId,
    /// Usage ID `0x14`: "Charger"
    Charger,
    /// Usage ID `0x15`: "Charger Id"
    ChargerId,
    /// Usage ID `0x16`: "Power Converter"
    PowerConverter,
    /// Usage ID `0x17`: "Power Converter Id"
    PowerConverterId,
    /// Usage ID `0x18`: "Outlet System"
    OutletSystem,
    /// Usage ID `0x19`: "Outlet System Id"
    OutletSystemId,
    /// Usage ID `0x1A`: "Input"
    Input,
    /// Usage ID `0x1B`: "Input Id"
    InputId,
    /// Usage ID `0x1C`: "Output"
    Output,
    /// Usage ID `0x1D`: "Output Id"
    OutputId,
    /// Usage ID `0x1E`: "Flow"
    Flow,
    /// Usage ID `0x1F`: "Flow Id"
    FlowId,
    /// Usage ID `0x20`: "Outlet"
    Outlet,
    /// Usage ID `0x21`: "Outlet Id"
    OutletId,
    /// Usage ID `0x22`: "Gang"
    Gang,
    /// Usage ID `0x23`: "Gang Id"
    GangId,
    /// Usage ID `0x24`: "Power Summary"
    PowerSummary,
    /// Usage ID `0x25`: "Power Summary Id"
    PowerSummaryId,
    /// Usage ID `0x30`: "Voltage"
    Voltage,
    /// Usage ID `0x31`: "Current"
    Current,
    /// Usage ID `0x32`: "Frequency"
    Frequency,
    /// Usage ID `0x33`: "Apparent Power"
    ApparentPower,
    /// Usage ID `0x34`: "Active Power"
    ActivePower,
    /// Usage ID `0x35`: "Percent Load"
    PercentLoad,
    /// Usage ID `0x36`: "Temperature"
    Temperature,
    /// Usage ID `0x37`: "Humidity"
    Humidity,
    /// Usage ID `0x38`: "Bad Count"
    BadCount,
    /// Usage ID `0x40`: "Config Voltage"
    ConfigVoltage,
    /// Usage ID `0x41`: "Config Current"
    ConfigCurrent,
    /// Usage ID `0x42`: "Config Frequency"
    ConfigFrequency,
    /// Usage ID `0x43`: "Config Apparent Power"
    ConfigApparentPower,
    /// Usage ID `0x44`: "Config Active Power"
    ConfigActivePower,
    /// Usage ID `0x45`: "Config Percent Load"
    ConfigPercentLoad,
    /// Usage ID `0x46`: "Config Temperature"
    ConfigTemperature,
    /// Usage ID `0x47`: "Config Humidity"
    ConfigHumidity,
    /// Usage ID `0x50`: "Switch On Control"
    SwitchOnControl,
    /// Usage ID `0x51`: "Switch Off Control"
    SwitchOffControl,
    /// Usage ID `0x52`: "Toggle Control"
    ToggleControl,
    /// Usage ID `0x53`: "Low Voltage Transfer"
    LowVoltageTransfer,
    /// Usage ID `0x54`: "High Voltage Transfer"
    HighVoltageTransfer,
    /// Usage ID `0x55`: "Delay Before Reboot"
    DelayBeforeReboot,
    /// Usage ID `0x56`: "Delay Before Startup"
    DelayBeforeStartup,
    /// Usage ID `0x57`: "Delay Before Shutdown"
    DelayBeforeShutdown,
    /// Usage ID `0x58`: "Test"
    Test,
    /// Usage ID `0x59`: "Module Reset"
    ModuleReset,
    /// Usage ID `0x5A`: "Audible Alarm Control"
    AudibleAlarmControl,
    /// Usage ID `0x60`: "Present"
    Present,
    /// Usage ID `0x61`: "Good"
    Good,
    /// Usage ID `0x62`: "Internal Failure"
    InternalFailure,
    /// Usage ID `0x63`: "Voltag Out Of Range"
    VoltagOutOfRange,
    /// Usage ID `0x64`: "Frequency Out Of Range"
    FrequencyOutOfRange,
    /// Usage ID `0x65`: "Overload"
    Overload,
    /// Usage ID `0x66`: "Over Charged"
    OverCharged,
    /// Usage ID `0x67`: "Over Temperature"
    OverTemperature,
    /// Usage ID `0x68`: "Shutdown Requested"
    ShutdownRequested,
    /// Usage ID `0x69`: "Shutdown Imminent"
    ShutdownImminent,
    /// Usage ID `0x6B`: "Switch On/Off"
    SwitchOnOff,
    /// Usage ID `0x6C`: "Switchable"
    Switchable,
    /// Usage ID `0x6D`: "Used"
    Used,
    /// Usage ID `0x6E`: "Boost"
    Boost,
    /// Usage ID `0x6F`: "Buck"
    Buck,
    /// Usage ID `0x70`: "Initialized"
    Initialized,
    /// Usage ID `0x71`: "Tested"
    Tested,
    /// Usage ID `0x72`: "Awaiting Power"
    AwaitingPower,
    /// Usage ID `0x73`: "Communication Lost"
    CommunicationLost,
    /// Usage ID `0xFD`: "iManufacturer"
    iManufacturer,
    /// Usage ID `0xFE`: "iProduct"
    iProduct,
    /// Usage ID `0xFF`: "iSerialNumber"
    iSerialNumber,
}

impl fmt::Display for Power {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Power::iName => "iName",
            Power::PresentStatus => "Present Status",
            Power::ChangedStatus => "Changed Status",
            Power::UPS => "UPS",
            Power::PowerSupply => "Power Supply",
            Power::BatterySystem => "Battery System",
            Power::BatterySystemId => "Battery System Id",
            Power::Battery => "Battery",
            Power::BatteryId => "Battery Id",
            Power::Charger => "Charger",
            Power::ChargerId => "Charger Id",
            Power::PowerConverter => "Power Converter",
            Power::PowerConverterId => "Power Converter Id",
            Power::OutletSystem => "Outlet System",
            Power::OutletSystemId => "Outlet System Id",
            Power::Input => "Input",
            Power::InputId => "Input Id",
            Power::Output => "Output",
            Power::OutputId => "Output Id",
            Power::Flow => "Flow",
            Power::FlowId => "Flow Id",
            Power::Outlet => "Outlet",
            Power::OutletId => "Outlet Id",
            Power::Gang => "Gang",
            Power::GangId => "Gang Id",
            Power::PowerSummary => "Power Summary",
            Power::PowerSummaryId => "Power Summary Id",
            Power::Voltage => "Voltage",
            Power::Current => "Current",
            Power::Frequency => "Frequency",
            Power::ApparentPower => "Apparent Power",
            Power::ActivePower => "Active Power",
            Power::PercentLoad => "Percent Load",
            Power::Temperature => "Temperature",
            Power::Humidity => "Humidity",
            Power::BadCount => "Bad Count",
            Power::ConfigVoltage => "Config Voltage",
            Power::ConfigCurrent => "Config Current",
            Power::ConfigFrequency => "Config Frequency",
            Power::ConfigApparentPower => "Config Apparent Power",
            Power::ConfigActivePower => "Config Active Power",
            Power::ConfigPercentLoad => "Config Percent Load",
            Power::ConfigTemperature => "Config Temperature",
            Power::ConfigHumidity => "Config Humidity",
            Power::SwitchOnControl => "Switch On Control",
            Power::SwitchOffControl => "Switch Off Control",
            Power::ToggleControl => "Toggle Control",
            Power::LowVoltageTransfer => "Low Voltage Transfer",
            Power::HighVoltageTransfer => "High Voltage Transfer",
            Power::DelayBeforeReboot => "Delay Before Reboot",
            Power::DelayBeforeStartup => "Delay Before Startup",
            Power::DelayBeforeShutdown => "Delay Before Shutdown",
            Power::Test => "Test",
            Power::ModuleReset => "Module Reset",
            Power::AudibleAlarmControl => "Audible Alarm Control",
            Power::Present => "Present",
            Power::Good => "Good",
            Power::InternalFailure => "Internal Failure",
            Power::VoltagOutOfRange => "Voltag Out Of Range",
            Power::FrequencyOutOfRange => "Frequency Out Of Range",
            Power::Overload => "Overload",
            Power::OverCharged => "Over Charged",
            Power::OverTemperature => "Over Temperature",
            Power::ShutdownRequested => "Shutdown Requested",
            Power::ShutdownImminent => "Shutdown Imminent",
            Power::SwitchOnOff => "Switch On/Off",
            Power::Switchable => "Switchable",
            Power::Used => "Used",
            Power::Boost => "Boost",
            Power::Buck => "Buck",
            Power::Initialized => "Initialized",
            Power::Tested => "Tested",
            Power::AwaitingPower => "Awaiting Power",
            Power::CommunicationLost => "Communication Lost",
            Power::iManufacturer => "iManufacturer",
            Power::iProduct => "iProduct",
            Power::iSerialNumber => "iSerialNumber",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x85`: "Battery System"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::BatterySystem { usage: BatterySystem::SmartBatteryBatteryStatus };
/// let u2 = Usage::new_from_page_and_id(0x85, 0x2).unwrap();
/// let u3 = Usage::from(BatterySystem::SmartBatteryBatteryStatus);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x85, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x85 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum BatterySystem {
    /// Usage ID `0x1`: "Smart Battery Battery Mode"
    SmartBatteryBatteryMode,
    /// Usage ID `0x2`: "Smart Battery Battery Status"
    SmartBatteryBatteryStatus,
    /// Usage ID `0x3`: "Smart Battery Alarm Warning"
    SmartBatteryAlarmWarning,
    /// Usage ID `0x4`: "Smart Battery Charger Mode"
    SmartBatteryChargerMode,
    /// Usage ID `0x5`: "Smart Battery Charger Status"
    SmartBatteryChargerStatus,
    /// Usage ID `0x6`: "Smart Battery Charger Spec Info"
    SmartBatteryChargerSpecInfo,
    /// Usage ID `0x7`: "Smart Battery Selector State"
    SmartBatterySelectorState,
    /// Usage ID `0x8`: "Smart Battery Selector Presets"
    SmartBatterySelectorPresets,
    /// Usage ID `0x9`: "Smart Battery Selector Info"
    SmartBatterySelectorInfo,
    /// Usage ID `0x10`: "Optional Mfg Function 1"
    OptionalMfgFunction1,
    /// Usage ID `0x11`: "Optional Mfg Function 2"
    OptionalMfgFunction2,
    /// Usage ID `0x12`: "Optional Mfg Function 3"
    OptionalMfgFunction3,
    /// Usage ID `0x13`: "Optional Mfg Function 4"
    OptionalMfgFunction4,
    /// Usage ID `0x14`: "Optional Mfg Function 5"
    OptionalMfgFunction5,
    /// Usage ID `0x15`: "Connection To SM Bus"
    ConnectionToSMBus,
    /// Usage ID `0x16`: "Output Connection"
    OutputConnection,
    /// Usage ID `0x17`: "Charger Connection"
    ChargerConnection,
    /// Usage ID `0x18`: "Battery Insertion"
    BatteryInsertion,
    /// Usage ID `0x19`: "Use Next"
    UseNext,
    /// Usage ID `0x1A`: "OK To Use"
    OKToUse,
    /// Usage ID `0x1B`: "Battery Supported"
    BatterySupported,
    /// Usage ID `0x1C`: "Selector Revision"
    SelectorRevision,
    /// Usage ID `0x1D`: "Charging Indicator"
    ChargingIndicator,
    /// Usage ID `0x28`: "Manufacturer Access"
    ManufacturerAccess,
    /// Usage ID `0x29`: "Remaining Capacity Limit"
    RemainingCapacityLimit,
    /// Usage ID `0x2A`: "Remaining Time Limit"
    RemainingTimeLimit,
    /// Usage ID `0x2B`: "At Rate"
    AtRate,
    /// Usage ID `0x2C`: "Capacity Mode"
    CapacityMode,
    /// Usage ID `0x2D`: "Broadcast To Charger"
    BroadcastToCharger,
    /// Usage ID `0x2E`: "Primary Battery"
    PrimaryBattery,
    /// Usage ID `0x2F`: "Charge Controller"
    ChargeController,
    /// Usage ID `0x40`: "Terminate Charge"
    TerminateCharge,
    /// Usage ID `0x41`: "Terminate Discharge"
    TerminateDischarge,
    /// Usage ID `0x42`: "Below Remaining Capacity Limit"
    BelowRemainingCapacityLimit,
    /// Usage ID `0x43`: "Remaining Time Limit Expired"
    RemainingTimeLimitExpired,
    /// Usage ID `0x44`: "Charging"
    Charging,
    /// Usage ID `0x45`: "Discharging"
    Discharging,
    /// Usage ID `0x46`: "Fully Charged"
    FullyCharged,
    /// Usage ID `0x47`: "Fully Discharged"
    FullyDischarged,
    /// Usage ID `0x48`: "Conditioning Flag"
    ConditioningFlag,
    /// Usage ID `0x49`: "At Rate OK"
    AtRateOK,
    /// Usage ID `0x4A`: "Smart Battery Error Code"
    SmartBatteryErrorCode,
    /// Usage ID `0x4B`: "Need Replacement"
    NeedReplacement,
    /// Usage ID `0x60`: "At Rate Time To Full"
    AtRateTimeToFull,
    /// Usage ID `0x61`: "At Rate Time To Empty"
    AtRateTimeToEmpty,
    /// Usage ID `0x62`: "Average Current"
    AverageCurrent,
    /// Usage ID `0x63`: "Max Error"
    MaxError,
    /// Usage ID `0x64`: "Relative State Of Charge"
    RelativeStateOfCharge,
    /// Usage ID `0x65`: "Absolute State Of Charge"
    AbsoluteStateOfCharge,
    /// Usage ID `0x66`: "Remaining Capacity"
    RemainingCapacity,
    /// Usage ID `0x67`: "Full Charge Capacity"
    FullChargeCapacity,
    /// Usage ID `0x68`: "Run Time To Empty"
    RunTimeToEmpty,
    /// Usage ID `0x69`: "Average Time To Empty"
    AverageTimeToEmpty,
    /// Usage ID `0x6A`: "Average Time To Full"
    AverageTimeToFull,
    /// Usage ID `0x6B`: "Cycle Count"
    CycleCount,
    /// Usage ID `0x80`: "Battery Pack Model Level"
    BatteryPackModelLevel,
    /// Usage ID `0x81`: "Internal Charge Controller"
    InternalChargeController,
    /// Usage ID `0x82`: "Primary Battery Support"
    PrimaryBatterySupport,
    /// Usage ID `0x83`: "Design Capacity"
    DesignCapacity,
    /// Usage ID `0x84`: "Specification Info"
    SpecificationInfo,
    /// Usage ID `0x85`: "Manufacture Date"
    ManufactureDate,
    /// Usage ID `0x86`: "Serial Number"
    SerialNumber,
    /// Usage ID `0x87`: "iManufacturer Name"
    iManufacturerName,
    /// Usage ID `0x88`: "iDevice Name"
    iDeviceName,
    /// Usage ID `0x89`: "iDevice Chemistry"
    iDeviceChemistry,
    /// Usage ID `0x8A`: "Manufacturer Data"
    ManufacturerData,
    /// Usage ID `0x8B`: "Rechargable"
    Rechargable,
    /// Usage ID `0x8C`: "Warning Capacity Limit"
    WarningCapacityLimit,
    /// Usage ID `0x8D`: "Capacity Granularity 1"
    CapacityGranularity1,
    /// Usage ID `0x8E`: "Capacity Granularity 2"
    CapacityGranularity2,
    /// Usage ID `0x8F`: "iOEM Information"
    iOEMInformation,
    /// Usage ID `0xC0`: "Inhibit Charge"
    InhibitCharge,
    /// Usage ID `0xC1`: "Enable Polling"
    EnablePolling,
    /// Usage ID `0xC2`: "Reset To Zero"
    ResetToZero,
    /// Usage ID `0xD0`: "AC Present"
    ACPresent,
    /// Usage ID `0xD1`: "Battery Present"
    BatteryPresent,
    /// Usage ID `0xD2`: "Power Fail"
    PowerFail,
    /// Usage ID `0xD3`: "Alarm Inhibited"
    AlarmInhibited,
    /// Usage ID `0xD4`: "Thermistor Under Range"
    ThermistorUnderRange,
    /// Usage ID `0xD5`: "Thermistor Hot"
    ThermistorHot,
    /// Usage ID `0xD6`: "Thermistor Cold"
    ThermistorCold,
    /// Usage ID `0xD7`: "Thermistor Over Range"
    ThermistorOverRange,
    /// Usage ID `0xD8`: "Voltage Out Of Range"
    VoltageOutOfRange,
    /// Usage ID `0xD9`: "Current Out Of Range"
    CurrentOutOfRange,
    /// Usage ID `0xDA`: "Current Not Regulated"
    CurrentNotRegulated,
    /// Usage ID `0xDB`: "Voltage Not Regulated"
    VoltageNotRegulated,
    /// Usage ID `0xDC`: "Master Mode"
    MasterMode,
    /// Usage ID `0xF0`: "Charger Selector Support"
    ChargerSelectorSupport,
    /// Usage ID `0xF1`: "Charger Spec"
    ChargerSpec,
    /// Usage ID `0xF2`: "Level 2"
    Level2,
    /// Usage ID `0xF3`: "Level 3"
    Level3,
}

impl fmt::Display for BatterySystem {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            BatterySystem::SmartBatteryBatteryMode => "Smart Battery Battery Mode",
            BatterySystem::SmartBatteryBatteryStatus => "Smart Battery Battery Status",
            BatterySystem::SmartBatteryAlarmWarning => "Smart Battery Alarm Warning",
            BatterySystem::SmartBatteryChargerMode => "Smart Battery Charger Mode",
            BatterySystem::SmartBatteryChargerStatus => "Smart Battery Charger Status",
            BatterySystem::SmartBatteryChargerSpecInfo => "Smart Battery Charger Spec Info",
            BatterySystem::SmartBatterySelectorState => "Smart Battery Selector State",
            BatterySystem::SmartBatterySelectorPresets => "Smart Battery Selector Presets",
            BatterySystem::SmartBatterySelectorInfo => "Smart Battery Selector Info",
            BatterySystem::OptionalMfgFunction1 => "Optional Mfg Function 1",
            BatterySystem::OptionalMfgFunction2 => "Optional Mfg Function 2",
            BatterySystem::OptionalMfgFunction3 => "Optional Mfg Function 3",
            BatterySystem::OptionalMfgFunction4 => "Optional Mfg Function 4",
            BatterySystem::OptionalMfgFunction5 => "Optional Mfg Function 5",
            BatterySystem::ConnectionToSMBus => "Connection To SM Bus",
            BatterySystem::OutputConnection => "Output Connection",
            BatterySystem::ChargerConnection => "Charger Connection",
            BatterySystem::BatteryInsertion => "Battery Insertion",
            BatterySystem::UseNext => "Use Next",
            BatterySystem::OKToUse => "OK To Use",
            BatterySystem::BatterySupported => "Battery Supported",
            BatterySystem::SelectorRevision => "Selector Revision",
            BatterySystem::ChargingIndicator => "Charging Indicator",
            BatterySystem::ManufacturerAccess => "Manufacturer Access",
            BatterySystem::RemainingCapacityLimit => "Remaining Capacity Limit",
            BatterySystem::RemainingTimeLimit => "Remaining Time Limit",
            BatterySystem::AtRate => "At Rate",
            BatterySystem::CapacityMode => "Capacity Mode",
            BatterySystem::BroadcastToCharger => "Broadcast To Charger",
            BatterySystem::PrimaryBattery => "Primary Battery",
            BatterySystem::ChargeController => "Charge Controller",
            BatterySystem::TerminateCharge => "Terminate Charge",
            BatterySystem::TerminateDischarge => "Terminate Discharge",
            BatterySystem::BelowRemainingCapacityLimit => "Below Remaining Capacity Limit",
            BatterySystem::RemainingTimeLimitExpired => "Remaining Time Limit Expired",
            BatterySystem::Charging => "Charging",
            BatterySystem::Discharging => "Discharging",
            BatterySystem::FullyCharged => "Fully Charged",
            BatterySystem::FullyDischarged => "Fully Discharged",
            BatterySystem::ConditioningFlag => "Conditioning Flag",
            BatterySystem::AtRateOK => "At Rate OK",
            BatterySystem::SmartBatteryErrorCode => "Smart Battery Error Code",
            BatterySystem::NeedReplacement => "Need Replacement",
            BatterySystem::AtRateTimeToFull => "At Rate Time To Full",
            BatterySystem::AtRateTimeToEmpty => "At Rate Time To Empty",
            BatterySystem::AverageCurrent => "Average Current",
            BatterySystem::MaxError => "Max Error",
            BatterySystem::RelativeStateOfCharge => "Relative State Of Charge",
            BatterySystem::AbsoluteStateOfCharge => "Absolute State Of Charge",
            BatterySystem::RemainingCapacity => "Remaining Capacity",
            BatterySystem::FullChargeCapacity => "Full Charge Capacity",
            BatterySystem::RunTimeToEmpty => "Run Time To Empty",
            BatterySystem::AverageTimeToEmpty => "Average Time To Empty",
            BatterySystem::AverageTimeToFull => "Average Time To Full",
            BatterySystem::CycleCount => "Cycle Count",
            BatterySystem::BatteryPackModelLevel => "Battery Pack Model Level",
            BatterySystem::InternalChargeController => "Internal Charge Controller",
            BatterySystem::PrimaryBatterySupport => "Primary Battery Support",
            BatterySystem::DesignCapacity => "Design Capacity",
            BatterySystem::SpecificationInfo => "Specification Info",
            BatterySystem::ManufactureDate => "Manufacture Date",
            BatterySystem::SerialNumber => "Serial Number",
            BatterySystem::iManufacturerName => "iManufacturer Name",
            BatterySystem::iDeviceName => "iDevice Name",
            BatterySystem::iDeviceChemistry => "iDevice Chemistry",
            BatterySystem::ManufacturerData => "Manufacturer Data",
            BatterySystem::Rechargable => "Rechargable",
            BatterySystem::WarningCapacityLimit => "Warning Capacity Limit",
            BatterySystem::CapacityGranularity1 => "Capacity Granularity 1",
            BatterySystem::CapacityGranularity2 => "Capacity Granularity 2",
            BatterySystem::iOEMInformation => "iOEM Information",
            BatterySystem::InhibitCharge => "Inhibit Charge",
            BatterySystem::EnablePolling => "Enable Polling",
            BatterySystem::ResetToZero => "Reset To Zero",
            BatterySystem::ACPresent => "AC Present",
            BatterySystem::BatteryPresent => "Battery Present",
            BatterySystem::PowerFail => "Power Fail",
            BatterySystem::AlarmInhibited => "Alarm Inhibited",
            BatterySystem::ThermistorUnderRange => "Thermistor Under Range",
            BatterySystem::ThermistorHot => "Thermistor Hot",
            BatterySystem::ThermistorCold => "Thermistor Cold",
            BatterySystem::ThermistorOverRange => "Thermistor Over Range",
            BatterySystem::VoltageOutOfRange => "Voltage Out Of Range",
            BatterySystem::CurrentOutOfRange => "Current Out Of Range",
            BatterySystem::CurrentNotRegulated => "Current Not Regulated",
            BatterySystem::VoltageNotRegulated => "Voltage Not Regulated",
            BatterySystem::MasterMode => "Master Mode",
            BatterySystem::ChargerSelectorSupport => "Charger Selector Support",
            BatterySystem::ChargerSpec => "Charger Spec",
            BatterySystem::Level2 => "Level 2",
            BatterySystem::Level3 => "Level 3",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x8C`: "Barcode Scanner"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::BarcodeScanner { usage: BarcodeScanner::BarcodeScanner };
/// let u2 = Usage::new_from_page_and_id(0x8C, 0x2).unwrap();
/// let u3 = Usage::from(BarcodeScanner::BarcodeScanner);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x8C, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x8C << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum BarcodeScanner {
    /// Usage ID `0x1`: "Barcode Badge Reader"
    BarcodeBadgeReader,
    /// Usage ID `0x2`: "Barcode Scanner"
    BarcodeScanner,
    /// Usage ID `0x3`: "Dumb Bar Code Scanner"
    DumbBarCodeScanner,
    /// Usage ID `0x4`: "Cordless Scanner Base"
    CordlessScannerBase,
    /// Usage ID `0x5`: "Bar Code Scanner Cradle"
    BarCodeScannerCradle,
    /// Usage ID `0x10`: "Attribute Report"
    AttributeReport,
    /// Usage ID `0x11`: "Settings Report"
    SettingsReport,
    /// Usage ID `0x12`: "Scanned Data Report"
    ScannedDataReport,
    /// Usage ID `0x13`: "Raw Scanned Data Report"
    RawScannedDataReport,
    /// Usage ID `0x14`: "Trigger Report"
    TriggerReport,
    /// Usage ID `0x15`: "Status Report"
    StatusReport,
    /// Usage ID `0x16`: "UPC/EAN Control Report"
    UPCEANControlReport,
    /// Usage ID `0x17`: "EAN 2/3 Label Control Report"
    EAN23LabelControlReport,
    /// Usage ID `0x18`: "Code 39 Control Report"
    Code39ControlReport,
    /// Usage ID `0x19`: "Interleaved 2 of 5 Control Report"
    Interleaved2of5ControlReport,
    /// Usage ID `0x1A`: "Standard 2 of 5 Control Report"
    Standard2of5ControlReport,
    /// Usage ID `0x1B`: "MSI Plessey Control Report"
    MSIPlesseyControlReport,
    /// Usage ID `0x1C`: "Codabar Control Report"
    CodabarControlReport,
    /// Usage ID `0x1D`: "Code 128 Control Report"
    Code128ControlReport,
    /// Usage ID `0x1E`: "Misc 1D Control Report"
    Misc1DControlReport,
    /// Usage ID `0x1F`: "2D Control Report"
    TwoDControlReport,
    /// Usage ID `0x30`: "Aiming/Pointer Mode"
    AimingPointerMode,
    /// Usage ID `0x31`: "Bar Code Present Sensor"
    BarCodePresentSensor,
    /// Usage ID `0x32`: "Class 1A Laser"
    Class1ALaser,
    /// Usage ID `0x33`: "Class 2 Laser"
    Class2Laser,
    /// Usage ID `0x34`: "Heater Present"
    HeaterPresent,
    /// Usage ID `0x35`: "Contact Scanner"
    ContactScanner,
    /// Usage ID `0x36`: "Electronic Article Surveillance Notification"
    ElectronicArticleSurveillanceNotification,
    /// Usage ID `0x37`: "Constant Electronic Article Surveillance"
    ConstantElectronicArticleSurveillance,
    /// Usage ID `0x38`: "Error Indication"
    ErrorIndication,
    /// Usage ID `0x39`: "Fixed Beeper"
    FixedBeeper,
    /// Usage ID `0x3A`: "Good Decode Indication"
    GoodDecodeIndication,
    /// Usage ID `0x3B`: "Hands Free Scanning"
    HandsFreeScanning,
    /// Usage ID `0x3C`: "Intrinsically Safe"
    IntrinsicallySafe,
    /// Usage ID `0x3D`: "Klasse Eins Laser"
    KlasseEinsLaser,
    /// Usage ID `0x3E`: "Long Range Scanner"
    LongRangeScanner,
    /// Usage ID `0x3F`: "Mirror Speed Control"
    MirrorSpeedControl,
    /// Usage ID `0x40`: "Not On File Indication"
    NotOnFileIndication,
    /// Usage ID `0x41`: "Programmable Beeper"
    ProgrammableBeeper,
    /// Usage ID `0x42`: "Triggerless"
    Triggerless,
    /// Usage ID `0x43`: "Wand"
    Wand,
    /// Usage ID `0x44`: "Water Resistant"
    WaterResistant,
    /// Usage ID `0x45`: "Multi-Range Scanner"
    MultiRangeScanner,
    /// Usage ID `0x46`: "Proximity Sensor"
    ProximitySensor,
    /// Usage ID `0x4D`: "Fragment Decoding"
    FragmentDecoding,
    /// Usage ID `0x4E`: "Scanner Read Confidence"
    ScannerReadConfidence,
    /// Usage ID `0x4F`: "Data Prefix"
    DataPrefix,
    /// Usage ID `0x50`: "Prefix AIMI"
    PrefixAIMI,
    /// Usage ID `0x51`: "Prefix None"
    PrefixNone,
    /// Usage ID `0x52`: "Prefix Proprietary"
    PrefixProprietary,
    /// Usage ID `0x55`: "Active Time"
    ActiveTime,
    /// Usage ID `0x56`: "Aiming Laser Pattern"
    AimingLaserPattern,
    /// Usage ID `0x57`: "Bar Code Present"
    BarCodePresent,
    /// Usage ID `0x58`: "Beeper State"
    BeeperState,
    /// Usage ID `0x59`: "Laser On Time"
    LaserOnTime,
    /// Usage ID `0x5A`: "Laser State"
    LaserState,
    /// Usage ID `0x5B`: "Lockout Time"
    LockoutTime,
    /// Usage ID `0x5C`: "Motor State"
    MotorState,
    /// Usage ID `0x5D`: "Motor Timeout"
    MotorTimeout,
    /// Usage ID `0x5E`: "Power On Reset Scanner"
    PowerOnResetScanner,
    /// Usage ID `0x5F`: "Prevent Read of Barcodes"
    PreventReadofBarcodes,
    /// Usage ID `0x60`: "Initiate Barcode Read"
    InitiateBarcodeRead,
    /// Usage ID `0x61`: "Trigger State"
    TriggerState,
    /// Usage ID `0x62`: "Trigger Mode"
    TriggerMode,
    /// Usage ID `0x63`: "Trigger Mode Blinking Laser On"
    TriggerModeBlinkingLaserOn,
    /// Usage ID `0x64`: "Trigger Mode Continuous Laser On"
    TriggerModeContinuousLaserOn,
    /// Usage ID `0x65`: "Trigger Mode Laser on while Pulled"
    TriggerModeLaseronwhilePulled,
    /// Usage ID `0x66`: "Trigger Mode Laser stays on after release"
    TriggerModeLaserstaysonafterrelease,
    /// Usage ID `0x6D`: "Commit Parameters to NVM"
    CommitParameterstoNVM,
    /// Usage ID `0x6E`: "Parameter Scanning"
    ParameterScanning,
    /// Usage ID `0x6F`: "Parameters Changed"
    ParametersChanged,
    /// Usage ID `0x70`: "Set parameter default values"
    Setparameterdefaultvalues,
    /// Usage ID `0x75`: "Scanner In Cradle"
    ScannerInCradle,
    /// Usage ID `0x76`: "Scanner In Range"
    ScannerInRange,
    /// Usage ID `0x7A`: "Aim Duration"
    AimDuration,
    /// Usage ID `0x7B`: "Good Read Lamp Duration"
    GoodReadLampDuration,
    /// Usage ID `0x7C`: "Good Read Lamp Intensity"
    GoodReadLampIntensity,
    /// Usage ID `0x7D`: "Good Read LED"
    GoodReadLED,
    /// Usage ID `0x7E`: "Good Read Tone Frequency"
    GoodReadToneFrequency,
    /// Usage ID `0x7F`: "Good Read Tone Length"
    GoodReadToneLength,
    /// Usage ID `0x80`: "Good Read Tone Volume"
    GoodReadToneVolume,
    /// Usage ID `0x82`: "No Read Message"
    NoReadMessage,
    /// Usage ID `0x83`: "Not on File Volume"
    NotonFileVolume,
    /// Usage ID `0x84`: "Powerup Beep"
    PowerupBeep,
    /// Usage ID `0x85`: "Sound Error Beep"
    SoundErrorBeep,
    /// Usage ID `0x86`: "Sound Good Read Beep"
    SoundGoodReadBeep,
    /// Usage ID `0x87`: "Sound Not On File Beep"
    SoundNotOnFileBeep,
    /// Usage ID `0x88`: "Good Read When to Write"
    GoodReadWhentoWrite,
    /// Usage ID `0x89`: "GRWTI After Decode"
    GRWTIAfterDecode,
    /// Usage ID `0x8A`: "GRWTI Beep/Lamp after transmit"
    GRWTIBeepLampaftertransmit,
    /// Usage ID `0x8B`: "GRWTI No Beep/Lamp use at all"
    GRWTINoBeepLampuseatall,
    /// Usage ID `0x91`: "Bookland EAN"
    BooklandEAN,
    /// Usage ID `0x92`: "Convert EAN 8 to 13 Type"
    ConvertEAN8to13Type,
    /// Usage ID `0x93`: "Convert UPC A to EAN-13"
    ConvertUPCAtoEAN13,
    /// Usage ID `0x94`: "Convert UPC-E to A"
    ConvertUPCEtoA,
    /// Usage ID `0x95`: "EAN-13"
    EAN13,
    /// Usage ID `0x96`: "EAN-8"
    EAN8,
    /// Usage ID `0x97`: "EAN-99 128 Mandatory"
    EAN99128Mandatory,
    /// Usage ID `0x98`: "EAN-99 P5/128 Optional"
    EAN99P5128Optional,
    /// Usage ID `0x99`: "Enable EAN Two Label"
    EnableEANTwoLabel,
    /// Usage ID `0x9A`: "UPC/EAN"
    UPCEAN,
    /// Usage ID `0x9B`: "UPC/EAN Coupon Code"
    UPCEANCouponCode,
    /// Usage ID `0x9C`: "UPC/EAN Periodicals"
    UPCEANPeriodicals,
    /// Usage ID `0x9D`: "UPC-A"
    UPCA,
    /// Usage ID `0x9E`: "UPC-A with 128 Mandatory"
    UPCAwith128Mandatory,
    /// Usage ID `0x9F`: "UPC-A with 128 Optional"
    UPCAwith128Optional,
    /// Usage ID `0xA0`: "UPC-A with P5 Optional"
    UPCAwithP5Optional,
    /// Usage ID `0xA1`: "UPC-E"
    UPCE,
    /// Usage ID `0xA2`: "UPC-E1"
    UPCE1,
    /// Usage ID `0xA9`: "Periodical"
    Periodical,
    /// Usage ID `0xAA`: "Periodical Auto-Discriminate +2"
    PeriodicalAutoDiscriminatePlus2,
    /// Usage ID `0xAB`: "Periodical Only Decode with +2"
    PeriodicalOnlyDecodewithPlus2,
    /// Usage ID `0xAC`: "Periodical Ignore +2"
    PeriodicalIgnorePlus2,
    /// Usage ID `0xAD`: "Periodical Auto-Discriminate +5"
    PeriodicalAutoDiscriminatePlus5,
    /// Usage ID `0xAE`: "Periodical Only Decode with +5"
    PeriodicalOnlyDecodewithPlus5,
    /// Usage ID `0xAF`: "Periodical Ignore +5"
    PeriodicalIgnorePlus5,
    /// Usage ID `0xB0`: "Check"
    Check,
    /// Usage ID `0xB1`: "Check Disable Price"
    CheckDisablePrice,
    /// Usage ID `0xB2`: "Check Enable 4 digit Price"
    CheckEnable4digitPrice,
    /// Usage ID `0xB3`: "Check Enable 5 digit Price"
    CheckEnable5digitPrice,
    /// Usage ID `0xB4`: "Check Enable European 4 digit Price"
    CheckEnableEuropean4digitPrice,
    /// Usage ID `0xB5`: "Check Enable European 5 digit Price"
    CheckEnableEuropean5digitPrice,
    /// Usage ID `0xB7`: "EAN Two Label"
    EANTwoLabel,
    /// Usage ID `0xB8`: "EAN Three Label"
    EANThreeLabel,
    /// Usage ID `0xB9`: "EAN 8 Flag Digit 1"
    EAN8FlagDigit1,
    /// Usage ID `0xBA`: "EAN 8 Flag Digit 2"
    EAN8FlagDigit2,
    /// Usage ID `0xBB`: "EAN 8 Flag Digit 3"
    EAN8FlagDigit3,
    /// Usage ID `0xBC`: "EAN 13 Flag Digit 1"
    EAN13FlagDigit1,
    /// Usage ID `0xBD`: "EAN 13 Flag Digit 2"
    EAN13FlagDigit2,
    /// Usage ID `0xBE`: "EAN 13 Flag Digit 3"
    EAN13FlagDigit3,
    /// Usage ID `0xBF`: "Add EAN 2/3 Label Definition"
    AddEAN23LabelDefinition,
    /// Usage ID `0xC0`: "Clear all EAN 2/3 Label Definitions"
    ClearallEAN23LabelDefinitions,
    /// Usage ID `0xC3`: "Codabar"
    Codabar,
    /// Usage ID `0xC4`: "Code 128"
    Code128,
    /// Usage ID `0xC7`: "Code 39"
    Code39,
    /// Usage ID `0xC8`: "Code 93"
    Code93,
    /// Usage ID `0xC9`: "Full ASCII Conversion"
    FullASCIIConversion,
    /// Usage ID `0xCA`: "Interleaved 2 of 5"
    Interleaved2of5,
    /// Usage ID `0xCB`: "Italian Pharmacy Code"
    ItalianPharmacyCode,
    /// Usage ID `0xCC`: "MSI/Plessey"
    MSIPlessey,
    /// Usage ID `0xCD`: "Standard 2 of 5 IATA"
    Standard2of5IATA,
    /// Usage ID `0xCE`: "Standard 2 of 5"
    Standard2of5,
    /// Usage ID `0xD3`: "Transmit Start/Stop"
    TransmitStartStop,
    /// Usage ID `0xD4`: "Tri-Optic"
    TriOptic,
    /// Usage ID `0xD5`: "UCC/EAN-128"
    UCCEAN128,
    /// Usage ID `0xD6`: "Check Digit"
    CheckDigit,
    /// Usage ID `0xD7`: "Check Digit Disable"
    CheckDigitDisable,
    /// Usage ID `0xD8`: "Check Digit Enable Interleaved 2 of 5 OPCC"
    CheckDigitEnableInterleaved2of5OPCC,
    /// Usage ID `0xD9`: "Check Digit Enable Interleaved 2 of 5 USS"
    CheckDigitEnableInterleaved2of5USS,
    /// Usage ID `0xDA`: "Check Digit Enable Standard 2 of 5 OPCC"
    CheckDigitEnableStandard2of5OPCC,
    /// Usage ID `0xDB`: "Check Digit Enable Standard 2 of 5 USS"
    CheckDigitEnableStandard2of5USS,
    /// Usage ID `0xDC`: "Check Digit Enable One MSI Plessey"
    CheckDigitEnableOneMSIPlessey,
    /// Usage ID `0xDD`: "Check Digit Enable Two MSI Plessey"
    CheckDigitEnableTwoMSIPlessey,
    /// Usage ID `0xDE`: "Check Digit Codabar Enable"
    CheckDigitCodabarEnable,
    /// Usage ID `0xDF`: "Check Digit Code 39 Enable"
    CheckDigitCode39Enable,
    /// Usage ID `0xF0`: "Transmit Check Digit"
    TransmitCheckDigit,
    /// Usage ID `0xF1`: "Disable Check Digit Transmit"
    DisableCheckDigitTransmit,
    /// Usage ID `0xF2`: "Enable Check Digit Transmit"
    EnableCheckDigitTransmit,
    /// Usage ID `0xFB`: "Symbology Identifier 1"
    SymbologyIdentifier1,
    /// Usage ID `0xFC`: "Symbology Identifier 2"
    SymbologyIdentifier2,
    /// Usage ID `0xFD`: "Symbology Identifier 3"
    SymbologyIdentifier3,
    /// Usage ID `0xFE`: "Decoded Data"
    DecodedData,
    /// Usage ID `0xFF`: "Decode Data Continued"
    DecodeDataContinued,
    /// Usage ID `0x100`: "Bar Space Data"
    BarSpaceData,
    /// Usage ID `0x101`: "Scanner Data Accuracy"
    ScannerDataAccuracy,
    /// Usage ID `0x102`: "Raw Data Polarity"
    RawDataPolarity,
    /// Usage ID `0x103`: "Polarity Inverted Bar Code"
    PolarityInvertedBarCode,
    /// Usage ID `0x104`: "Polarity Normal Bar Code"
    PolarityNormalBarCode,
    /// Usage ID `0x106`: "Minimum Length to Decode"
    MinimumLengthtoDecode,
    /// Usage ID `0x107`: "Maximum Length to Decode"
    MaximumLengthtoDecode,
    /// Usage ID `0x108`: "Discrete Length to Decode 1"
    DiscreteLengthtoDecode1,
    /// Usage ID `0x109`: "Discrete Length to Decode 2"
    DiscreteLengthtoDecode2,
    /// Usage ID `0x10A`: "Data Length Method"
    DataLengthMethod,
    /// Usage ID `0x10B`: "DL Method Read any"
    DLMethodReadany,
    /// Usage ID `0x10C`: "DL Method Check in Range"
    DLMethodCheckinRange,
    /// Usage ID `0x10D`: "DL Method Check for Discrete"
    DLMethodCheckforDiscrete,
    /// Usage ID `0x110`: "Aztec Code"
    AztecCode,
    /// Usage ID `0x111`: "BC412"
    BC412,
    /// Usage ID `0x112`: "Channel Code"
    ChannelCode,
    /// Usage ID `0x113`: "Code 16"
    Code16,
    /// Usage ID `0x114`: "Code 32"
    Code32,
    /// Usage ID `0x115`: "Code 49"
    Code49,
    /// Usage ID `0x116`: "Code One"
    CodeOne,
    /// Usage ID `0x117`: "Colorcode"
    Colorcode,
    /// Usage ID `0x118`: "Data Matrix"
    DataMatrix,
    /// Usage ID `0x119`: "MaxiCode"
    MaxiCode,
    /// Usage ID `0x11A`: "MicroPDF"
    MicroPDF,
    /// Usage ID `0x11B`: "PDF-417"
    PDF417,
    /// Usage ID `0x11C`: "PosiCode"
    PosiCode,
    /// Usage ID `0x11D`: "QR Code"
    QRCode,
    /// Usage ID `0x11E`: "SuperCode"
    SuperCode,
    /// Usage ID `0x11F`: "UltraCode"
    UltraCode,
    /// Usage ID `0x120`: "USD-5 (Slug Code)"
    USD5SlugCode,
    /// Usage ID `0x121`: "VeriCode"
    VeriCode,
}

impl fmt::Display for BarcodeScanner {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            BarcodeScanner::BarcodeBadgeReader => "Barcode Badge Reader",
            BarcodeScanner::BarcodeScanner => "Barcode Scanner",
            BarcodeScanner::DumbBarCodeScanner => "Dumb Bar Code Scanner",
            BarcodeScanner::CordlessScannerBase => "Cordless Scanner Base",
            BarcodeScanner::BarCodeScannerCradle => "Bar Code Scanner Cradle",
            BarcodeScanner::AttributeReport => "Attribute Report",
            BarcodeScanner::SettingsReport => "Settings Report",
            BarcodeScanner::ScannedDataReport => "Scanned Data Report",
            BarcodeScanner::RawScannedDataReport => "Raw Scanned Data Report",
            BarcodeScanner::TriggerReport => "Trigger Report",
            BarcodeScanner::StatusReport => "Status Report",
            BarcodeScanner::UPCEANControlReport => "UPC/EAN Control Report",
            BarcodeScanner::EAN23LabelControlReport => "EAN 2/3 Label Control Report",
            BarcodeScanner::Code39ControlReport => "Code 39 Control Report",
            BarcodeScanner::Interleaved2of5ControlReport => "Interleaved 2 of 5 Control Report",
            BarcodeScanner::Standard2of5ControlReport => "Standard 2 of 5 Control Report",
            BarcodeScanner::MSIPlesseyControlReport => "MSI Plessey Control Report",
            BarcodeScanner::CodabarControlReport => "Codabar Control Report",
            BarcodeScanner::Code128ControlReport => "Code 128 Control Report",
            BarcodeScanner::Misc1DControlReport => "Misc 1D Control Report",
            BarcodeScanner::TwoDControlReport => "2D Control Report",
            BarcodeScanner::AimingPointerMode => "Aiming/Pointer Mode",
            BarcodeScanner::BarCodePresentSensor => "Bar Code Present Sensor",
            BarcodeScanner::Class1ALaser => "Class 1A Laser",
            BarcodeScanner::Class2Laser => "Class 2 Laser",
            BarcodeScanner::HeaterPresent => "Heater Present",
            BarcodeScanner::ContactScanner => "Contact Scanner",
            BarcodeScanner::ElectronicArticleSurveillanceNotification => "Electronic Article Surveillance Notification",
            BarcodeScanner::ConstantElectronicArticleSurveillance => "Constant Electronic Article Surveillance",
            BarcodeScanner::ErrorIndication => "Error Indication",
            BarcodeScanner::FixedBeeper => "Fixed Beeper",
            BarcodeScanner::GoodDecodeIndication => "Good Decode Indication",
            BarcodeScanner::HandsFreeScanning => "Hands Free Scanning",
            BarcodeScanner::IntrinsicallySafe => "Intrinsically Safe",
            BarcodeScanner::KlasseEinsLaser => "Klasse Eins Laser",
            BarcodeScanner::LongRangeScanner => "Long Range Scanner",
            BarcodeScanner::MirrorSpeedControl => "Mirror Speed Control",
            BarcodeScanner::NotOnFileIndication => "Not On File Indication",
            BarcodeScanner::ProgrammableBeeper => "Programmable Beeper",
            BarcodeScanner::Triggerless => "Triggerless",
            BarcodeScanner::Wand => "Wand",
            BarcodeScanner::WaterResistant => "Water Resistant",
            BarcodeScanner::MultiRangeScanner => "Multi-Range Scanner",
            BarcodeScanner::ProximitySensor => "Proximity Sensor",
            BarcodeScanner::FragmentDecoding => "Fragment Decoding",
            BarcodeScanner::ScannerReadConfidence => "Scanner Read Confidence",
            BarcodeScanner::DataPrefix => "Data Prefix",
            BarcodeScanner::PrefixAIMI => "Prefix AIMI",
            BarcodeScanner::PrefixNone => "Prefix None",
            BarcodeScanner::PrefixProprietary => "Prefix Proprietary",
            BarcodeScanner::ActiveTime => "Active Time",
            BarcodeScanner::AimingLaserPattern => "Aiming Laser Pattern",
            BarcodeScanner::BarCodePresent => "Bar Code Present",
            BarcodeScanner::BeeperState => "Beeper State",
            BarcodeScanner::LaserOnTime => "Laser On Time",
            BarcodeScanner::LaserState => "Laser State",
            BarcodeScanner::LockoutTime => "Lockout Time",
            BarcodeScanner::MotorState => "Motor State",
            BarcodeScanner::MotorTimeout => "Motor Timeout",
            BarcodeScanner::PowerOnResetScanner => "Power On Reset Scanner",
            BarcodeScanner::PreventReadofBarcodes => "Prevent Read of Barcodes",
            BarcodeScanner::InitiateBarcodeRead => "Initiate Barcode Read",
            BarcodeScanner::TriggerState => "Trigger State",
            BarcodeScanner::TriggerMode => "Trigger Mode",
            BarcodeScanner::TriggerModeBlinkingLaserOn => "Trigger Mode Blinking Laser On",
            BarcodeScanner::TriggerModeContinuousLaserOn => "Trigger Mode Continuous Laser On",
            BarcodeScanner::TriggerModeLaseronwhilePulled => "Trigger Mode Laser on while Pulled",
            BarcodeScanner::TriggerModeLaserstaysonafterrelease => "Trigger Mode Laser stays on after release",
            BarcodeScanner::CommitParameterstoNVM => "Commit Parameters to NVM",
            BarcodeScanner::ParameterScanning => "Parameter Scanning",
            BarcodeScanner::ParametersChanged => "Parameters Changed",
            BarcodeScanner::Setparameterdefaultvalues => "Set parameter default values",
            BarcodeScanner::ScannerInCradle => "Scanner In Cradle",
            BarcodeScanner::ScannerInRange => "Scanner In Range",
            BarcodeScanner::AimDuration => "Aim Duration",
            BarcodeScanner::GoodReadLampDuration => "Good Read Lamp Duration",
            BarcodeScanner::GoodReadLampIntensity => "Good Read Lamp Intensity",
            BarcodeScanner::GoodReadLED => "Good Read LED",
            BarcodeScanner::GoodReadToneFrequency => "Good Read Tone Frequency",
            BarcodeScanner::GoodReadToneLength => "Good Read Tone Length",
            BarcodeScanner::GoodReadToneVolume => "Good Read Tone Volume",
            BarcodeScanner::NoReadMessage => "No Read Message",
            BarcodeScanner::NotonFileVolume => "Not on File Volume",
            BarcodeScanner::PowerupBeep => "Powerup Beep",
            BarcodeScanner::SoundErrorBeep => "Sound Error Beep",
            BarcodeScanner::SoundGoodReadBeep => "Sound Good Read Beep",
            BarcodeScanner::SoundNotOnFileBeep => "Sound Not On File Beep",
            BarcodeScanner::GoodReadWhentoWrite => "Good Read When to Write",
            BarcodeScanner::GRWTIAfterDecode => "GRWTI After Decode",
            BarcodeScanner::GRWTIBeepLampaftertransmit => "GRWTI Beep/Lamp after transmit",
            BarcodeScanner::GRWTINoBeepLampuseatall => "GRWTI No Beep/Lamp use at all",
            BarcodeScanner::BooklandEAN => "Bookland EAN",
            BarcodeScanner::ConvertEAN8to13Type => "Convert EAN 8 to 13 Type",
            BarcodeScanner::ConvertUPCAtoEAN13 => "Convert UPC A to EAN-13",
            BarcodeScanner::ConvertUPCEtoA => "Convert UPC-E to A",
            BarcodeScanner::EAN13 => "EAN-13",
            BarcodeScanner::EAN8 => "EAN-8",
            BarcodeScanner::EAN99128Mandatory => "EAN-99 128 Mandatory",
            BarcodeScanner::EAN99P5128Optional => "EAN-99 P5/128 Optional",
            BarcodeScanner::EnableEANTwoLabel => "Enable EAN Two Label",
            BarcodeScanner::UPCEAN => "UPC/EAN",
            BarcodeScanner::UPCEANCouponCode => "UPC/EAN Coupon Code",
            BarcodeScanner::UPCEANPeriodicals => "UPC/EAN Periodicals",
            BarcodeScanner::UPCA => "UPC-A",
            BarcodeScanner::UPCAwith128Mandatory => "UPC-A with 128 Mandatory",
            BarcodeScanner::UPCAwith128Optional => "UPC-A with 128 Optional",
            BarcodeScanner::UPCAwithP5Optional => "UPC-A with P5 Optional",
            BarcodeScanner::UPCE => "UPC-E",
            BarcodeScanner::UPCE1 => "UPC-E1",
            BarcodeScanner::Periodical => "Periodical",
            BarcodeScanner::PeriodicalAutoDiscriminatePlus2 => "Periodical Auto-Discriminate +2",
            BarcodeScanner::PeriodicalOnlyDecodewithPlus2 => "Periodical Only Decode with +2",
            BarcodeScanner::PeriodicalIgnorePlus2 => "Periodical Ignore +2",
            BarcodeScanner::PeriodicalAutoDiscriminatePlus5 => "Periodical Auto-Discriminate +5",
            BarcodeScanner::PeriodicalOnlyDecodewithPlus5 => "Periodical Only Decode with +5",
            BarcodeScanner::PeriodicalIgnorePlus5 => "Periodical Ignore +5",
            BarcodeScanner::Check => "Check",
            BarcodeScanner::CheckDisablePrice => "Check Disable Price",
            BarcodeScanner::CheckEnable4digitPrice => "Check Enable 4 digit Price",
            BarcodeScanner::CheckEnable5digitPrice => "Check Enable 5 digit Price",
            BarcodeScanner::CheckEnableEuropean4digitPrice => "Check Enable European 4 digit Price",
            BarcodeScanner::CheckEnableEuropean5digitPrice => "Check Enable European 5 digit Price",
            BarcodeScanner::EANTwoLabel => "EAN Two Label",
            BarcodeScanner::EANThreeLabel => "EAN Three Label",
            BarcodeScanner::EAN8FlagDigit1 => "EAN 8 Flag Digit 1",
            BarcodeScanner::EAN8FlagDigit2 => "EAN 8 Flag Digit 2",
            BarcodeScanner::EAN8FlagDigit3 => "EAN 8 Flag Digit 3",
            BarcodeScanner::EAN13FlagDigit1 => "EAN 13 Flag Digit 1",
            BarcodeScanner::EAN13FlagDigit2 => "EAN 13 Flag Digit 2",
            BarcodeScanner::EAN13FlagDigit3 => "EAN 13 Flag Digit 3",
            BarcodeScanner::AddEAN23LabelDefinition => "Add EAN 2/3 Label Definition",
            BarcodeScanner::ClearallEAN23LabelDefinitions => "Clear all EAN 2/3 Label Definitions",
            BarcodeScanner::Codabar => "Codabar",
            BarcodeScanner::Code128 => "Code 128",
            BarcodeScanner::Code39 => "Code 39",
            BarcodeScanner::Code93 => "Code 93",
            BarcodeScanner::FullASCIIConversion => "Full ASCII Conversion",
            BarcodeScanner::Interleaved2of5 => "Interleaved 2 of 5",
            BarcodeScanner::ItalianPharmacyCode => "Italian Pharmacy Code",
            BarcodeScanner::MSIPlessey => "MSI/Plessey",
            BarcodeScanner::Standard2of5IATA => "Standard 2 of 5 IATA",
            BarcodeScanner::Standard2of5 => "Standard 2 of 5",
            BarcodeScanner::TransmitStartStop => "Transmit Start/Stop",
            BarcodeScanner::TriOptic => "Tri-Optic",
            BarcodeScanner::UCCEAN128 => "UCC/EAN-128",
            BarcodeScanner::CheckDigit => "Check Digit",
            BarcodeScanner::CheckDigitDisable => "Check Digit Disable",
            BarcodeScanner::CheckDigitEnableInterleaved2of5OPCC => "Check Digit Enable Interleaved 2 of 5 OPCC",
            BarcodeScanner::CheckDigitEnableInterleaved2of5USS => "Check Digit Enable Interleaved 2 of 5 USS",
            BarcodeScanner::CheckDigitEnableStandard2of5OPCC => "Check Digit Enable Standard 2 of 5 OPCC",
            BarcodeScanner::CheckDigitEnableStandard2of5USS => "Check Digit Enable Standard 2 of 5 USS",
            BarcodeScanner::CheckDigitEnableOneMSIPlessey => "Check Digit Enable One MSI Plessey",
            BarcodeScanner::CheckDigitEnableTwoMSIPlessey => "Check Digit Enable Two MSI Plessey",
            BarcodeScanner::CheckDigitCodabarEnable => "Check Digit Codabar Enable",
            BarcodeScanner::CheckDigitCode39Enable => "Check Digit Code 39 Enable",
            BarcodeScanner::TransmitCheckDigit => "Transmit Check Digit",
            BarcodeScanner::DisableCheckDigitTransmit => "Disable Check Digit Transmit",
            BarcodeScanner::EnableCheckDigitTransmit => "Enable Check Digit Transmit",
            BarcodeScanner::SymbologyIdentifier1 => "Symbology Identifier 1",
            BarcodeScanner::SymbologyIdentifier2 => "Symbology Identifier 2",
            BarcodeScanner::SymbologyIdentifier3 => "Symbology Identifier 3",
            BarcodeScanner::DecodedData => "Decoded Data",
            BarcodeScanner::DecodeDataContinued => "Decode Data Continued",
            BarcodeScanner::BarSpaceData => "Bar Space Data",
            BarcodeScanner::ScannerDataAccuracy => "Scanner Data Accuracy",
            BarcodeScanner::RawDataPolarity => "Raw Data Polarity",
            BarcodeScanner::PolarityInvertedBarCode => "Polarity Inverted Bar Code",
            BarcodeScanner::PolarityNormalBarCode => "Polarity Normal Bar Code",
            BarcodeScanner::MinimumLengthtoDecode => "Minimum Length to Decode",
            BarcodeScanner::MaximumLengthtoDecode => "Maximum Length to Decode",
            BarcodeScanner::DiscreteLengthtoDecode1 => "Discrete Length to Decode 1",
            BarcodeScanner::DiscreteLengthtoDecode2 => "Discrete Length to Decode 2",
            BarcodeScanner::DataLengthMethod => "Data Length Method",
            BarcodeScanner::DLMethodReadany => "DL Method Read any",
            BarcodeScanner::DLMethodCheckinRange => "DL Method Check in Range",
            BarcodeScanner::DLMethodCheckforDiscrete => "DL Method Check for Discrete",
            BarcodeScanner::AztecCode => "Aztec Code",
            BarcodeScanner::BC412 => "BC412",
            BarcodeScanner::ChannelCode => "Channel Code",
            BarcodeScanner::Code16 => "Code 16",
            BarcodeScanner::Code32 => "Code 32",
            BarcodeScanner::Code49 => "Code 49",
            BarcodeScanner::CodeOne => "Code One",
            BarcodeScanner::Colorcode => "Colorcode",
            BarcodeScanner::DataMatrix => "Data Matrix",
            BarcodeScanner::MaxiCode => "MaxiCode",
            BarcodeScanner::MicroPDF => "MicroPDF",
            BarcodeScanner::PDF417 => "PDF-417",
            BarcodeScanner::PosiCode => "PosiCode",
            BarcodeScanner::QRCode => "QR Code",
            BarcodeScanner::SuperCode => "SuperCode",
            BarcodeScanner::UltraCode => "UltraCode",
            BarcodeScanner::USD5SlugCode => "USD-5 (Slug Code)",
            BarcodeScanner::VeriCode => "VeriCode",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x8D`: "Scales"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::Scales { usage: Scales::ScaleDevice };
/// let u2 = Usage::new_from_page_and_id(0x8D, 0x20).unwrap();
/// let u3 = Usage::from(Scales::ScaleDevice);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x8D, u1.usage_page_value());
/// assert_eq!(0x20, u1.usage_id_value());
/// assert_eq!((0x8D << 16) | 0x20, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Scales {
    /// Usage ID `0x1`: "Scales"
    Scales,
    /// Usage ID `0x20`: "Scale Device"
    ScaleDevice,
    /// Usage ID `0x21`: "Scale Class"
    ScaleClass,
    /// Usage ID `0x22`: "Scale Class I Metric"
    ScaleClassIMetric,
    /// Usage ID `0x23`: "Scale Class II Metric"
    ScaleClassIIMetric,
    /// Usage ID `0x24`: "Scale Class III Metric"
    ScaleClassIIIMetric,
    /// Usage ID `0x25`: "Scale Class IIIL Metric"
    ScaleClassIIILMetric,
    /// Usage ID `0x26`: "Scale Class IV Metric"
    ScaleClassIVMetric,
    /// Usage ID `0x27`: "Scale Class III English"
    ScaleClassIIIEnglish,
    /// Usage ID `0x28`: "Scale Class IIIL English"
    ScaleClassIIILEnglish,
    /// Usage ID `0x29`: "Scale Class IV English"
    ScaleClassIVEnglish,
    /// Usage ID `0x2A`: "Scale Class Generic"
    ScaleClassGeneric,
    /// Usage ID `0x30`: "Scale Attribute Report"
    ScaleAttributeReport,
    /// Usage ID `0x31`: "Scale Control Report"
    ScaleControlReport,
    /// Usage ID `0x32`: "Scale Data Report"
    ScaleDataReport,
    /// Usage ID `0x33`: "Scale Status Report"
    ScaleStatusReport,
    /// Usage ID `0x34`: "Scale Weight Limit Report"
    ScaleWeightLimitReport,
    /// Usage ID `0x35`: "Scale Statistics Report"
    ScaleStatisticsReport,
    /// Usage ID `0x40`: "Data Weight"
    DataWeight,
    /// Usage ID `0x41`: "Data Scaling"
    DataScaling,
    /// Usage ID `0x50`: "Weight Unit"
    WeightUnit,
    /// Usage ID `0x51`: "Weight Unit Milligram"
    WeightUnitMilligram,
    /// Usage ID `0x52`: "Weight Unit Gram"
    WeightUnitGram,
    /// Usage ID `0x53`: "Weight Unit Kilogram"
    WeightUnitKilogram,
    /// Usage ID `0x54`: "Weight Unit Carats"
    WeightUnitCarats,
    /// Usage ID `0x55`: "Weight Unit Taels"
    WeightUnitTaels,
    /// Usage ID `0x56`: "Weight Unit Grains"
    WeightUnitGrains,
    /// Usage ID `0x57`: "Weight Unit Pennyweights"
    WeightUnitPennyweights,
    /// Usage ID `0x58`: "Weight Unit Metric Ton"
    WeightUnitMetricTon,
    /// Usage ID `0x59`: "Weight Unit Avoir Ton"
    WeightUnitAvoirTon,
    /// Usage ID `0x5A`: "Weight Unit Troy Ounce"
    WeightUnitTroyOunce,
    /// Usage ID `0x5B`: "Weight Unit Ounce"
    WeightUnitOunce,
    /// Usage ID `0x5C`: "Weight Unit Pound"
    WeightUnitPound,
    /// Usage ID `0x60`: "Calibration Count"
    CalibrationCount,
    /// Usage ID `0x61`: "Re-Zero Count"
    ReZeroCount,
    /// Usage ID `0x70`: "Scale Status"
    ScaleStatus,
    /// Usage ID `0x71`: "Scale Status Fault"
    ScaleStatusFault,
    /// Usage ID `0x72`: "Scale Status Stable at Center of Zero"
    ScaleStatusStableatCenterofZero,
    /// Usage ID `0x73`: "Scale Status In Motion"
    ScaleStatusInMotion,
    /// Usage ID `0x74`: "Scale Status Weight Stable"
    ScaleStatusWeightStable,
    /// Usage ID `0x75`: "Scale Status Under Zero"
    ScaleStatusUnderZero,
    /// Usage ID `0x76`: "Scale Status Over Weight Limit"
    ScaleStatusOverWeightLimit,
    /// Usage ID `0x77`: "Scale Status Requires Calibration"
    ScaleStatusRequiresCalibration,
    /// Usage ID `0x78`: "Scale Status Requires Rezeroing"
    ScaleStatusRequiresRezeroing,
    /// Usage ID `0x80`: "Zero Scale"
    ZeroScale,
    /// Usage ID `0x81`: "Enforced Zero Return"
    EnforcedZeroReturn,
}

impl fmt::Display for Scales {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Scales::Scales => "Scales",
            Scales::ScaleDevice => "Scale Device",
            Scales::ScaleClass => "Scale Class",
            Scales::ScaleClassIMetric => "Scale Class I Metric",
            Scales::ScaleClassIIMetric => "Scale Class II Metric",
            Scales::ScaleClassIIIMetric => "Scale Class III Metric",
            Scales::ScaleClassIIILMetric => "Scale Class IIIL Metric",
            Scales::ScaleClassIVMetric => "Scale Class IV Metric",
            Scales::ScaleClassIIIEnglish => "Scale Class III English",
            Scales::ScaleClassIIILEnglish => "Scale Class IIIL English",
            Scales::ScaleClassIVEnglish => "Scale Class IV English",
            Scales::ScaleClassGeneric => "Scale Class Generic",
            Scales::ScaleAttributeReport => "Scale Attribute Report",
            Scales::ScaleControlReport => "Scale Control Report",
            Scales::ScaleDataReport => "Scale Data Report",
            Scales::ScaleStatusReport => "Scale Status Report",
            Scales::ScaleWeightLimitReport => "Scale Weight Limit Report",
            Scales::ScaleStatisticsReport => "Scale Statistics Report",
            Scales::DataWeight => "Data Weight",
            Scales::DataScaling => "Data Scaling",
            Scales::WeightUnit => "Weight Unit",
            Scales::WeightUnitMilligram => "Weight Unit Milligram",
            Scales::WeightUnitGram => "Weight Unit Gram",
            Scales::WeightUnitKilogram => "Weight Unit Kilogram",
            Scales::WeightUnitCarats => "Weight Unit Carats",
            Scales::WeightUnitTaels => "Weight Unit Taels",
            Scales::WeightUnitGrains => "Weight Unit Grains",
            Scales::WeightUnitPennyweights => "Weight Unit Pennyweights",
            Scales::WeightUnitMetricTon => "Weight Unit Metric Ton",
            Scales::WeightUnitAvoirTon => "Weight Unit Avoir Ton",
            Scales::WeightUnitTroyOunce => "Weight Unit Troy Ounce",
            Scales::WeightUnitOunce => "Weight Unit Ounce",
            Scales::WeightUnitPound => "Weight Unit Pound",
            Scales::CalibrationCount => "Calibration Count",
            Scales::ReZeroCount => "Re-Zero Count",
            Scales::ScaleStatus => "Scale Status",
            Scales::ScaleStatusFault => "Scale Status Fault",
            Scales::ScaleStatusStableatCenterofZero => "Scale Status Stable at Center of Zero",
            Scales::ScaleStatusInMotion => "Scale Status In Motion",
            Scales::ScaleStatusWeightStable => "Scale Status Weight Stable",
            Scales::ScaleStatusUnderZero => "Scale Status Under Zero",
            Scales::ScaleStatusOverWeightLimit => "Scale Status Over Weight Limit",
            Scales::ScaleStatusRequiresCalibration => "Scale Status Requires Calibration",
            Scales::ScaleStatusRequiresRezeroing => "Scale Status Requires Rezeroing",
            Scales::ZeroScale => "Zero Scale",
            Scales::EnforcedZeroReturn => "Enforced Zero Return",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x8E`: "Magnetic Stripe Reader"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::MagneticStripeReader { usage: MagneticStripeReader::Track1Length };
/// let u2 = Usage::new_from_page_and_id(0x8E, 0x11).unwrap();
/// let u3 = Usage::from(MagneticStripeReader::Track1Length);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x8E, u1.usage_page_value());
/// assert_eq!(0x11, u1.usage_id_value());
/// assert_eq!((0x8E << 16) | 0x11, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum MagneticStripeReader {
    /// Usage ID `0x1`: "MSR Device Read-Only"
    MSRDeviceReadOnly,
    /// Usage ID `0x11`: "Track 1 Length"
    Track1Length,
    /// Usage ID `0x12`: "Track 2 Length"
    Track2Length,
    /// Usage ID `0x13`: "Track 3 Length"
    Track3Length,
    /// Usage ID `0x14`: "Track JIS Length"
    TrackJISLength,
    /// Usage ID `0x20`: "Track Data"
    TrackData,
    /// Usage ID `0x21`: "Track 1 Data"
    Track1Data,
    /// Usage ID `0x22`: "Track 2 Data"
    Track2Data,
    /// Usage ID `0x23`: "Track 3 Data"
    Track3Data,
    /// Usage ID `0x24`: "Track JIS Data"
    TrackJISData,
}

impl fmt::Display for MagneticStripeReader {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            MagneticStripeReader::MSRDeviceReadOnly => "MSR Device Read-Only",
            MagneticStripeReader::Track1Length => "Track 1 Length",
            MagneticStripeReader::Track2Length => "Track 2 Length",
            MagneticStripeReader::Track3Length => "Track 3 Length",
            MagneticStripeReader::TrackJISLength => "Track JIS Length",
            MagneticStripeReader::TrackData => "Track Data",
            MagneticStripeReader::Track1Data => "Track 1 Data",
            MagneticStripeReader::Track2Data => "Track 2 Data",
            MagneticStripeReader::Track3Data => "Track 3 Data",
            MagneticStripeReader::TrackJISData => "Track JIS Data",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x90`: "Camera Control"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::CameraControl { usage: CameraControl::CameraShutter };
/// let u2 = Usage::new_from_page_and_id(0x90, 0x21).unwrap();
/// let u3 = Usage::from(CameraControl::CameraShutter);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x90, u1.usage_page_value());
/// assert_eq!(0x21, u1.usage_id_value());
/// assert_eq!((0x90 << 16) | 0x21, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum CameraControl {
    /// Usage ID `0x20`: "Camera Auto-focus"
    CameraAutofocus,
    /// Usage ID `0x21`: "Camera Shutter"
    CameraShutter,
}

impl fmt::Display for CameraControl {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            CameraControl::CameraAutofocus => "Camera Auto-focus",
            CameraControl::CameraShutter => "Camera Shutter",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0x91`: "Arcade"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::Arcade { usage: Arcade::CoinDoor };
/// let u2 = Usage::new_from_page_and_id(0x91, 0x2).unwrap();
/// let u3 = Usage::from(Arcade::CoinDoor);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x91, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!((0x91 << 16) | 0x2, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Arcade {
    /// Usage ID `0x1`: "General Purpose IO Card"
    GeneralPurposeIOCard,
    /// Usage ID `0x2`: "Coin Door"
    CoinDoor,
    /// Usage ID `0x3`: "Watchdog Timer"
    WatchdogTimer,
    /// Usage ID `0x30`: "General Purpose Analog Input State"
    GeneralPurposeAnalogInputState,
    /// Usage ID `0x31`: "General Purpose Digital Input State"
    GeneralPurposeDigitalInputState,
    /// Usage ID `0x32`: "General Purpose Optical Input State"
    GeneralPurposeOpticalInputState,
    /// Usage ID `0x33`: "General Purpose Digital Output State"
    GeneralPurposeDigitalOutputState,
    /// Usage ID `0x34`: "Number of Coin Doors"
    NumberofCoinDoors,
    /// Usage ID `0x35`: "Coin Drawer Drop Count"
    CoinDrawerDropCount,
    /// Usage ID `0x36`: "Coin Drawer Start"
    CoinDrawerStart,
    /// Usage ID `0x37`: "Coin Drawer Service"
    CoinDrawerService,
    /// Usage ID `0x38`: "Coin Drawer Tilt"
    CoinDrawerTilt,
    /// Usage ID `0x39`: "Coin Door Test"
    CoinDoorTest,
    /// Usage ID `0x40`: "Coin Door Lockout"
    CoinDoorLockout,
    /// Usage ID `0x41`: "Watchdog Timeout"
    WatchdogTimeout,
    /// Usage ID `0x42`: "Watchdog Action"
    WatchdogAction,
    /// Usage ID `0x43`: "Watchdog Reboot"
    WatchdogReboot,
    /// Usage ID `0x44`: "Watchdog Restart"
    WatchdogRestart,
    /// Usage ID `0x45`: "Alarm Input"
    AlarmInput,
    /// Usage ID `0x46`: "Coin Door Counter"
    CoinDoorCounter,
    /// Usage ID `0x47`: "I/O Direction Mapping"
    IODirectionMapping,
    /// Usage ID `0x48`: "Set I/O Direction Mapping"
    SetIODirectionMapping,
    /// Usage ID `0x49`: "Extended Optical Input State"
    ExtendedOpticalInputState,
    /// Usage ID `0x4A`: "Pin Pad Input State"
    PinPadInputState,
    /// Usage ID `0x4B`: "Pin Pad Status"
    PinPadStatus,
    /// Usage ID `0x4C`: "Pin Pad Output"
    PinPadOutput,
    /// Usage ID `0x4D`: "Pin Pad Command"
    PinPadCommand,
}

impl fmt::Display for Arcade {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Arcade::GeneralPurposeIOCard => "General Purpose IO Card",
            Arcade::CoinDoor => "Coin Door",
            Arcade::WatchdogTimer => "Watchdog Timer",
            Arcade::GeneralPurposeAnalogInputState => "General Purpose Analog Input State",
            Arcade::GeneralPurposeDigitalInputState => "General Purpose Digital Input State",
            Arcade::GeneralPurposeOpticalInputState => "General Purpose Optical Input State",
            Arcade::GeneralPurposeDigitalOutputState => "General Purpose Digital Output State",
            Arcade::NumberofCoinDoors => "Number of Coin Doors",
            Arcade::CoinDrawerDropCount => "Coin Drawer Drop Count",
            Arcade::CoinDrawerStart => "Coin Drawer Start",
            Arcade::CoinDrawerService => "Coin Drawer Service",
            Arcade::CoinDrawerTilt => "Coin Drawer Tilt",
            Arcade::CoinDoorTest => "Coin Door Test",
            Arcade::CoinDoorLockout => "Coin Door Lockout",
            Arcade::WatchdogTimeout => "Watchdog Timeout",
            Arcade::WatchdogAction => "Watchdog Action",
            Arcade::WatchdogReboot => "Watchdog Reboot",
            Arcade::WatchdogRestart => "Watchdog Restart",
            Arcade::AlarmInput => "Alarm Input",
            Arcade::CoinDoorCounter => "Coin Door Counter",
            Arcade::IODirectionMapping => "I/O Direction Mapping",
            Arcade::SetIODirectionMapping => "Set I/O Direction Mapping",
            Arcade::ExtendedOpticalInputState => "Extended Optical Input State",
            Arcade::PinPadInputState => "Pin Pad Input State",
            Arcade::PinPadStatus => "Pin Pad Status",
            Arcade::PinPadOutput => "Pin Pad Output",
            Arcade::PinPadCommand => "Pin Pad Command",
        };
        write!(f, "{name}")
    }
}

/// *Usage Page `0xF1D0`: "FIDO Alliance"*
///
/// **This enum is autogenerated from the HID Usage Tables**.
/// ```
/// # use hut::*;
/// let u1 = Usage::FIDOAlliance { usage: FIDOAlliance::InputReportData };
/// let u2 = Usage::new_from_page_and_id(0xF1D0, 0x20).unwrap();
/// let u3 = Usage::from(FIDOAlliance::InputReportData);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0xF1D0, u1.usage_page_value());
/// assert_eq!(0x20, u1.usage_id_value());
/// assert_eq!((0xF1D0 << 16) | 0x20, u1.usage_value());
/// ```
///
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum FIDOAlliance {
    /// Usage ID `0x1`: "U2F Authenticator Device"
    U2FAuthenticatorDevice,
    /// Usage ID `0x20`: "Input Report Data"
    InputReportData,
    /// Usage ID `0x21`: "Output Report Data"
    OutputReportData,
}

impl fmt::Display for FIDOAlliance {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            FIDOAlliance::U2FAuthenticatorDevice => "U2F Authenticator Device",
            FIDOAlliance::InputReportData => "Input Report Data",
            FIDOAlliance::OutputReportData => "Output Report Data",
        };
        write!(f, "{name}")
    }
}


impl AsUsage for GenericDesktop {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for GenericDesktop {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x1` for [GenericDesktop]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&GenericDesktop> for u16 {
    fn from(up: &GenericDesktop) -> u16 {
        match *up {
            GenericDesktop::Pointer => 1,
            GenericDesktop::Mouse => 2,
            GenericDesktop::Joystick => 4,
            GenericDesktop::Gamepad => 5,
            GenericDesktop::Keyboard => 6,
            GenericDesktop::Keypad => 7,
            GenericDesktop::MultiaxisController => 8,
            GenericDesktop::TabletPCSystemControls => 9,
            GenericDesktop::WaterCoolingDevice => 10,
            GenericDesktop::ComputerChassisDevice => 11,
            GenericDesktop::WirelessRadioControls => 12,
            GenericDesktop::PortableDeviceControl => 13,
            GenericDesktop::SystemMultiAxisController => 14,
            GenericDesktop::SpatialController => 15,
            GenericDesktop::AssistiveControl => 16,
            GenericDesktop::DeviceDock => 17,
            GenericDesktop::DockableDevice => 18,
            GenericDesktop::CallStateManagementControl => 19,
            GenericDesktop::X => 48,
            GenericDesktop::Y => 49,
            GenericDesktop::Z => 50,
            GenericDesktop::Rx => 51,
            GenericDesktop::Ry => 52,
            GenericDesktop::Rz => 53,
            GenericDesktop::Slider => 54,
            GenericDesktop::Dial => 55,
            GenericDesktop::Wheel => 56,
            GenericDesktop::HatSwitch => 57,
            GenericDesktop::CountedBuffer => 58,
            GenericDesktop::ByteCount => 59,
            GenericDesktop::MotionWakeup => 60,
            GenericDesktop::Start => 61,
            GenericDesktop::Select => 62,
            GenericDesktop::Vx => 64,
            GenericDesktop::Vy => 65,
            GenericDesktop::Vz => 66,
            GenericDesktop::Vbrx => 67,
            GenericDesktop::Vbry => 68,
            GenericDesktop::Vbrz => 69,
            GenericDesktop::Vno => 70,
            GenericDesktop::FeatureNotification => 71,
            GenericDesktop::ResolutionMultiplier => 72,
            GenericDesktop::Qx => 73,
            GenericDesktop::Qy => 74,
            GenericDesktop::Qz => 75,
            GenericDesktop::Qw => 76,
            GenericDesktop::SystemControl => 128,
            GenericDesktop::SystemPowerDown => 129,
            GenericDesktop::SystemSleep => 130,
            GenericDesktop::SystemWakeUp => 131,
            GenericDesktop::SystemContextMenu => 132,
            GenericDesktop::SystemMainMenu => 133,
            GenericDesktop::SystemAppMenu => 134,
            GenericDesktop::SystemMenuHelp => 135,
            GenericDesktop::SystemMenuExit => 136,
            GenericDesktop::SystemMenuSelect => 137,
            GenericDesktop::SystemMenuRight => 138,
            GenericDesktop::SystemMenuLeft => 139,
            GenericDesktop::SystemMenuUp => 140,
            GenericDesktop::SystemMenuDown => 141,
            GenericDesktop::SystemColdRestart => 142,
            GenericDesktop::SystemWarmRestart => 143,
            GenericDesktop::DpadUp => 144,
            GenericDesktop::DpadDown => 145,
            GenericDesktop::DpadRight => 146,
            GenericDesktop::DpadLeft => 147,
            GenericDesktop::IndexTrigger => 148,
            GenericDesktop::PalmTrigger => 149,
            GenericDesktop::Thumbstick => 150,
            GenericDesktop::SystemFunctionShift => 151,
            GenericDesktop::SystemFunctionShiftLock => 152,
            GenericDesktop::SystemFunctionShiftLockIndicator => 153,
            GenericDesktop::SystemDismissNotification => 154,
            GenericDesktop::SystemDoNotDisturb => 155,
            GenericDesktop::SystemDock => 160,
            GenericDesktop::SystemUndock => 161,
            GenericDesktop::SystemSetup => 162,
            GenericDesktop::SystemBreak => 163,
            GenericDesktop::SystemDebuggerBreak => 164,
            GenericDesktop::ApplicationBreak => 165,
            GenericDesktop::ApplicationDebuggerBreak => 166,
            GenericDesktop::SystemSpeakerMute => 167,
            GenericDesktop::SystemHibernate => 168,
            GenericDesktop::SystemMicrophoneMute => 169,
            GenericDesktop::SystemDisplayInvert => 176,
            GenericDesktop::SystemDisplayInternal => 177,
            GenericDesktop::SystemDisplayExternal => 178,
            GenericDesktop::SystemDisplayBoth => 179,
            GenericDesktop::SystemDisplayDual => 180,
            GenericDesktop::SystemDisplayToggleIntExtMode => 181,
            GenericDesktop::SystemDisplaySwapPrimarySecondary => 182,
            GenericDesktop::SystemDisplayToggleLCDAutoscale => 183,
            GenericDesktop::SensorZone => 192,
            GenericDesktop::RPM => 193,
            GenericDesktop::CoolantLevel => 194,
            GenericDesktop::CoolantCriticalLevel => 195,
            GenericDesktop::CoolantPump => 196,
            GenericDesktop::ChassisEnclosure => 197,
            GenericDesktop::WirelessRadioButton => 198,
            GenericDesktop::WirelessRadioLED => 199,
            GenericDesktop::WirelessRadioSliderSwitch => 200,
            GenericDesktop::SystemDisplayRotationLockButton => 201,
            GenericDesktop::SystemDisplayRotationLockSliderSwitch => 202,
            GenericDesktop::ControlEnable => 203,
            GenericDesktop::DockableDeviceUniqueID => 208,
            GenericDesktop::DockableDeviceVendorID => 209,
            GenericDesktop::DockableDevicePrimaryUsagePage => 210,
            GenericDesktop::DockableDevicePrimaryUsageID => 211,
            GenericDesktop::DockableDeviceDockingState => 212,
            GenericDesktop::DockableDeviceDisplayOcclusion => 213,
            GenericDesktop::DockableDeviceObjectType => 214,
            GenericDesktop::CallActiveLED => 224,
            GenericDesktop::CallMuteToggle => 225,
            GenericDesktop::CallMuteLED => 226,
        }
    }
}

impl From<GenericDesktop> for u16 {
    fn from(up: GenericDesktop) -> u16 {
        u16::from(&up)
    }
}

impl From<&GenericDesktop> for u32 {
    fn from(usage: &GenericDesktop) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&GenericDesktop> for UsagePage {
    fn from(_up: &GenericDesktop) -> UsagePage {
        UsagePage::GenericDesktop
    }
}

impl From<GenericDesktop> for UsagePage {
    fn from(up: GenericDesktop) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&GenericDesktop> for Usage {
    fn from(u: &GenericDesktop) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<GenericDesktop> for Usage {
    fn from(u: GenericDesktop) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for GenericDesktop {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for SimulationControls {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for SimulationControls {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x2` for [SimulationControls]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&SimulationControls> for u16 {
    fn from(up: &SimulationControls) -> u16 {
        match *up {
            SimulationControls::FlightSimulationDevice => 1,
            SimulationControls::AutomobileSimulationDevice => 2,
            SimulationControls::TankSimulationDevice => 3,
            SimulationControls::SpaceshipSimulationDevice => 4,
            SimulationControls::SubmarineSimulationDevice => 5,
            SimulationControls::SailingSimulationDevice => 6,
            SimulationControls::MotorcycleSimulationDevice => 7,
            SimulationControls::SportsSimulationDevice => 8,
            SimulationControls::AirplaneSimulationDevice => 9,
            SimulationControls::HelicopterSimulationDevice => 10,
            SimulationControls::MagicCarpetSimulationDevice => 11,
            SimulationControls::BicycleSimulationDevice => 12,
            SimulationControls::FlightControlStick => 32,
            SimulationControls::FlightStick => 33,
            SimulationControls::CyclicControl => 34,
            SimulationControls::CyclicTrim => 35,
            SimulationControls::FlightYoke => 36,
            SimulationControls::TrackControl => 37,
            SimulationControls::Aileron => 176,
            SimulationControls::AileronTrim => 177,
            SimulationControls::AntiTorqueControl => 178,
            SimulationControls::AutopilotEnable => 179,
            SimulationControls::ChaffRelease => 180,
            SimulationControls::CollectiveControl => 181,
            SimulationControls::DiveBrake => 182,
            SimulationControls::ElectronicCountermeasures => 183,
            SimulationControls::Elevator => 184,
            SimulationControls::ElevatorTrim => 185,
            SimulationControls::Rudder => 186,
            SimulationControls::Throttle => 187,
            SimulationControls::FlightCommunications => 188,
            SimulationControls::FlareRelease => 189,
            SimulationControls::LandingGear => 190,
            SimulationControls::ToeBrake => 191,
            SimulationControls::Trigger => 192,
            SimulationControls::WeaponsArm => 193,
            SimulationControls::WeaponsSelect => 194,
            SimulationControls::WingFlaps => 195,
            SimulationControls::Accelerator => 196,
            SimulationControls::Brake => 197,
            SimulationControls::Clutch => 198,
            SimulationControls::Shifter => 199,
            SimulationControls::Steering => 200,
            SimulationControls::TurretDirection => 201,
            SimulationControls::BarrelElevation => 202,
            SimulationControls::DivePlane => 203,
            SimulationControls::Ballast => 204,
            SimulationControls::BicycleCrank => 205,
            SimulationControls::HandleBars => 206,
            SimulationControls::FrontBrake => 207,
            SimulationControls::RearBrake => 208,
        }
    }
}

impl From<SimulationControls> for u16 {
    fn from(up: SimulationControls) -> u16 {
        u16::from(&up)
    }
}

impl From<&SimulationControls> for u32 {
    fn from(usage: &SimulationControls) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&SimulationControls> for UsagePage {
    fn from(_up: &SimulationControls) -> UsagePage {
        UsagePage::SimulationControls
    }
}

impl From<SimulationControls> for UsagePage {
    fn from(up: SimulationControls) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&SimulationControls> for Usage {
    fn from(u: &SimulationControls) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<SimulationControls> for Usage {
    fn from(u: SimulationControls) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for SimulationControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for VRControls {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for VRControls {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x3` for [VRControls]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&VRControls> for u16 {
    fn from(up: &VRControls) -> u16 {
        match *up {
            VRControls::Belt => 1,
            VRControls::BodySuit => 2,
            VRControls::Flexor => 3,
            VRControls::Glove => 4,
            VRControls::HeadTracker => 5,
            VRControls::HeadMountedDisplay => 6,
            VRControls::HandTracker => 7,
            VRControls::Oculometer => 8,
            VRControls::Vest => 9,
            VRControls::AnimatronicDevice => 10,
            VRControls::StereoEnable => 32,
            VRControls::DisplayEnable => 33,
        }
    }
}

impl From<VRControls> for u16 {
    fn from(up: VRControls) -> u16 {
        u16::from(&up)
    }
}

impl From<&VRControls> for u32 {
    fn from(usage: &VRControls) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&VRControls> for UsagePage {
    fn from(_up: &VRControls) -> UsagePage {
        UsagePage::VRControls
    }
}

impl From<VRControls> for UsagePage {
    fn from(up: VRControls) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&VRControls> for Usage {
    fn from(u: &VRControls) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<VRControls> for Usage {
    fn from(u: VRControls) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for VRControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for SportControls {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for SportControls {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x4` for [SportControls]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&SportControls> for u16 {
    fn from(up: &SportControls) -> u16 {
        match *up {
            SportControls::BaseballBat => 1,
            SportControls::GolfClub => 2,
            SportControls::RowingMachine => 3,
            SportControls::Treadmill => 4,
            SportControls::Oar => 48,
            SportControls::Slope => 49,
            SportControls::Rate => 50,
            SportControls::StickSpeed => 51,
            SportControls::StickFaceAngle => 52,
            SportControls::StickHeelToe => 53,
            SportControls::StickFollowThrough => 54,
            SportControls::StickTempo => 55,
            SportControls::StickType => 56,
            SportControls::StickHeight => 57,
            SportControls::Putter => 80,
            SportControls::OneIron => 81,
            SportControls::TwoIron => 82,
            SportControls::ThreeIron => 83,
            SportControls::FourIron => 84,
            SportControls::FiveIron => 85,
            SportControls::SixIron => 86,
            SportControls::SevenIron => 87,
            SportControls::EightIron => 88,
            SportControls::NineIron => 89,
            SportControls::One0Iron => 90,
            SportControls::One1Iron => 91,
            SportControls::SandWedge => 92,
            SportControls::LoftWedge => 93,
            SportControls::PowerWedge => 94,
            SportControls::OneWood => 95,
            SportControls::ThreeWood => 96,
            SportControls::FiveWood => 97,
            SportControls::SevenWood => 98,
            SportControls::NineWood => 99,
        }
    }
}

impl From<SportControls> for u16 {
    fn from(up: SportControls) -> u16 {
        u16::from(&up)
    }
}

impl From<&SportControls> for u32 {
    fn from(usage: &SportControls) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&SportControls> for UsagePage {
    fn from(_up: &SportControls) -> UsagePage {
        UsagePage::SportControls
    }
}

impl From<SportControls> for UsagePage {
    fn from(up: SportControls) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&SportControls> for Usage {
    fn from(u: &SportControls) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<SportControls> for Usage {
    fn from(u: SportControls) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for SportControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for GameControls {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for GameControls {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x5` for [GameControls]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&GameControls> for u16 {
    fn from(up: &GameControls) -> u16 {
        match *up {
            GameControls::ThreeDGameController => 1,
            GameControls::PinballDevice => 2,
            GameControls::GunDevice => 3,
            GameControls::PointofView => 32,
            GameControls::TurnRightLeft => 33,
            GameControls::PitchForwardBackward => 34,
            GameControls::RollRightLeft => 35,
            GameControls::MoveRightLeft => 36,
            GameControls::MoveForwardBackward => 37,
            GameControls::MoveUpDown => 38,
            GameControls::LeanRightLeft => 39,
            GameControls::LeanForwardBackward => 40,
            GameControls::HeightofPOV => 41,
            GameControls::Flipper => 42,
            GameControls::SecondaryFlipper => 43,
            GameControls::Bump => 44,
            GameControls::NewGame => 45,
            GameControls::ShootBall => 46,
            GameControls::Player => 47,
            GameControls::GunBolt => 48,
            GameControls::GunClip => 49,
            GameControls::GunSelector => 50,
            GameControls::GunSingleShot => 51,
            GameControls::GunBurst => 52,
            GameControls::GunAutomatic => 53,
            GameControls::GunSafety => 54,
            GameControls::GamepadFireJump => 55,
            GameControls::GamepadTrigger => 57,
            GameControls::FormfittingGamepad => 58,
        }
    }
}

impl From<GameControls> for u16 {
    fn from(up: GameControls) -> u16 {
        u16::from(&up)
    }
}

impl From<&GameControls> for u32 {
    fn from(usage: &GameControls) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&GameControls> for UsagePage {
    fn from(_up: &GameControls) -> UsagePage {
        UsagePage::GameControls
    }
}

impl From<GameControls> for UsagePage {
    fn from(up: GameControls) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&GameControls> for Usage {
    fn from(u: &GameControls) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<GameControls> for Usage {
    fn from(u: GameControls) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for GameControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for GenericDeviceControls {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for GenericDeviceControls {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x6` for [GenericDeviceControls]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&GenericDeviceControls> for u16 {
    fn from(up: &GenericDeviceControls) -> u16 {
        match *up {
            GenericDeviceControls::BackgroundNonuserControls => 1,
            GenericDeviceControls::BatteryStrength => 32,
            GenericDeviceControls::WirelessChannel => 33,
            GenericDeviceControls::WirelessID => 34,
            GenericDeviceControls::DiscoverWirelessControl => 35,
            GenericDeviceControls::SecurityCodeCharacterEntered => 36,
            GenericDeviceControls::SecurityCodeCharacterErased => 37,
            GenericDeviceControls::SecurityCodeCleared => 38,
            GenericDeviceControls::SequenceID => 39,
            GenericDeviceControls::SequenceIDReset => 40,
            GenericDeviceControls::RFSignalStrength => 41,
            GenericDeviceControls::SoftwareVersion => 42,
            GenericDeviceControls::ProtocolVersion => 43,
            GenericDeviceControls::HardwareVersion => 44,
            GenericDeviceControls::Major => 45,
            GenericDeviceControls::Minor => 46,
            GenericDeviceControls::Revision => 47,
            GenericDeviceControls::Handedness => 48,
            GenericDeviceControls::EitherHand => 49,
            GenericDeviceControls::LeftHand => 50,
            GenericDeviceControls::RightHand => 51,
            GenericDeviceControls::BothHands => 52,
            GenericDeviceControls::GripPoseOffset => 64,
            GenericDeviceControls::PointerPoseOffset => 65,
        }
    }
}

impl From<GenericDeviceControls> for u16 {
    fn from(up: GenericDeviceControls) -> u16 {
        u16::from(&up)
    }
}

impl From<&GenericDeviceControls> for u32 {
    fn from(usage: &GenericDeviceControls) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&GenericDeviceControls> for UsagePage {
    fn from(_up: &GenericDeviceControls) -> UsagePage {
        UsagePage::GenericDeviceControls
    }
}

impl From<GenericDeviceControls> for UsagePage {
    fn from(up: GenericDeviceControls) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&GenericDeviceControls> for Usage {
    fn from(u: &GenericDeviceControls) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<GenericDeviceControls> for Usage {
    fn from(u: GenericDeviceControls) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for GenericDeviceControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for KeyboardKeypad {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for KeyboardKeypad {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x7` for [KeyboardKeypad]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&KeyboardKeypad> for u16 {
    fn from(up: &KeyboardKeypad) -> u16 {
        match *up {
            KeyboardKeypad::ErrorRollOver => 1,
            KeyboardKeypad::POSTFail => 2,
            KeyboardKeypad::ErrorUndefined => 3,
            KeyboardKeypad::KeyboardA => 4,
            KeyboardKeypad::KeyboardB => 5,
            KeyboardKeypad::KeyboardC => 6,
            KeyboardKeypad::KeyboardD => 7,
            KeyboardKeypad::KeyboardE => 8,
            KeyboardKeypad::KeyboardF => 9,
            KeyboardKeypad::KeyboardG => 10,
            KeyboardKeypad::KeyboardH => 11,
            KeyboardKeypad::KeyboardI => 12,
            KeyboardKeypad::KeyboardJ => 13,
            KeyboardKeypad::KeyboardK => 14,
            KeyboardKeypad::KeyboardL => 15,
            KeyboardKeypad::KeyboardM => 16,
            KeyboardKeypad::KeyboardN => 17,
            KeyboardKeypad::KeyboardO => 18,
            KeyboardKeypad::KeyboardP => 19,
            KeyboardKeypad::KeyboardQ => 20,
            KeyboardKeypad::KeyboardR => 21,
            KeyboardKeypad::KeyboardS => 22,
            KeyboardKeypad::KeyboardT => 23,
            KeyboardKeypad::KeyboardU => 24,
            KeyboardKeypad::KeyboardV => 25,
            KeyboardKeypad::KeyboardW => 26,
            KeyboardKeypad::KeyboardX => 27,
            KeyboardKeypad::KeyboardY => 28,
            KeyboardKeypad::KeyboardZ => 29,
            KeyboardKeypad::Keyboard1andBang => 30,
            KeyboardKeypad::Keyboard2andAt => 31,
            KeyboardKeypad::Keyboard3andHash => 32,
            KeyboardKeypad::Keyboard4andDollar => 33,
            KeyboardKeypad::Keyboard5andPercent => 34,
            KeyboardKeypad::Keyboard6andCaret => 35,
            KeyboardKeypad::Keyboard7andAmpersand => 36,
            KeyboardKeypad::Keyboard8andStar => 37,
            KeyboardKeypad::Keyboard9andLeftBracket => 38,
            KeyboardKeypad::Keyboard0andRightBracket => 39,
            KeyboardKeypad::KeyboardReturnEnter => 40,
            KeyboardKeypad::KeyboardEscape => 41,
            KeyboardKeypad::KeyboardDelete => 42,
            KeyboardKeypad::KeyboardTab => 43,
            KeyboardKeypad::KeyboardSpacebar => 44,
            KeyboardKeypad::KeyboardDashandUnderscore => 45,
            KeyboardKeypad::KeyboardEqualsandPlus => 46,
            KeyboardKeypad::KeyboardLeftBrace => 47,
            KeyboardKeypad::KeyboardRightBrace => 48,
            KeyboardKeypad::KeyboardBackslashandPipe => 49,
            KeyboardKeypad::KeyboardNonUSHashandTilde => 50,
            KeyboardKeypad::KeyboardSemiColonandColon => 51,
            KeyboardKeypad::KeyboardLeftAposandDouble => 52,
            KeyboardKeypad::KeyboardGraveAccentandTilde => 53,
            KeyboardKeypad::KeyboardCommaandLessThan => 54,
            KeyboardKeypad::KeyboardPeriodandGreaterThan => 55,
            KeyboardKeypad::KeyboardForwardSlashandQuestionMark => 56,
            KeyboardKeypad::KeyboardCapsLock => 57,
            KeyboardKeypad::KeyboardF1 => 58,
            KeyboardKeypad::KeyboardF2 => 59,
            KeyboardKeypad::KeyboardF3 => 60,
            KeyboardKeypad::KeyboardF4 => 61,
            KeyboardKeypad::KeyboardF5 => 62,
            KeyboardKeypad::KeyboardF6 => 63,
            KeyboardKeypad::KeyboardF7 => 64,
            KeyboardKeypad::KeyboardF8 => 65,
            KeyboardKeypad::KeyboardF9 => 66,
            KeyboardKeypad::KeyboardF10 => 67,
            KeyboardKeypad::KeyboardF11 => 68,
            KeyboardKeypad::KeyboardF12 => 69,
            KeyboardKeypad::KeyboardPrintScreen => 70,
            KeyboardKeypad::KeyboardScrollLock => 71,
            KeyboardKeypad::KeyboardPause => 72,
            KeyboardKeypad::KeyboardInsert => 73,
            KeyboardKeypad::KeyboardHome => 74,
            KeyboardKeypad::KeyboardPageUp => 75,
            KeyboardKeypad::KeyboardDeleteForward => 76,
            KeyboardKeypad::KeyboardEnd => 77,
            KeyboardKeypad::KeyboardPageDown => 78,
            KeyboardKeypad::KeyboardRightArrow => 79,
            KeyboardKeypad::KeyboardLeftArrow => 80,
            KeyboardKeypad::KeyboardDownArrow => 81,
            KeyboardKeypad::KeyboardUpArrow => 82,
            KeyboardKeypad::KeypadNumLockandClear => 83,
            KeyboardKeypad::KeypadForwardSlash => 84,
            KeyboardKeypad::KeypadStar => 85,
            KeyboardKeypad::KeypadDash => 86,
            KeyboardKeypad::KeypadPlus => 87,
            KeyboardKeypad::KeypadENTER => 88,
            KeyboardKeypad::Keypad1andEnd => 89,
            KeyboardKeypad::Keypad2andDownArrow => 90,
            KeyboardKeypad::Keypad3andPageDn => 91,
            KeyboardKeypad::Keypad4andLeftArrow => 92,
            KeyboardKeypad::Keypad5 => 93,
            KeyboardKeypad::Keypad6andRightArrow => 94,
            KeyboardKeypad::Keypad7andHome => 95,
            KeyboardKeypad::Keypad8andUpArrow => 96,
            KeyboardKeypad::Keypad9andPageUp => 97,
            KeyboardKeypad::Keypad0andInsert => 98,
            KeyboardKeypad::KeypadPeriodandDelete => 99,
            KeyboardKeypad::KeyboardNonUSBackslashandPipe => 100,
            KeyboardKeypad::KeyboardApplication => 101,
            KeyboardKeypad::KeyboardPower => 102,
            KeyboardKeypad::KeypadEquals => 103,
            KeyboardKeypad::KeyboardF13 => 104,
            KeyboardKeypad::KeyboardF14 => 105,
            KeyboardKeypad::KeyboardF15 => 106,
            KeyboardKeypad::KeyboardF16 => 107,
            KeyboardKeypad::KeyboardF17 => 108,
            KeyboardKeypad::KeyboardF18 => 109,
            KeyboardKeypad::KeyboardF19 => 110,
            KeyboardKeypad::KeyboardF20 => 111,
            KeyboardKeypad::KeyboardF21 => 112,
            KeyboardKeypad::KeyboardF22 => 113,
            KeyboardKeypad::KeyboardF23 => 114,
            KeyboardKeypad::KeyboardF24 => 115,
            KeyboardKeypad::KeyboardExecute => 116,
            KeyboardKeypad::KeyboardHelp => 117,
            KeyboardKeypad::KeyboardMenu => 118,
            KeyboardKeypad::KeyboardSelect => 119,
            KeyboardKeypad::KeyboardStop => 120,
            KeyboardKeypad::KeyboardAgain => 121,
            KeyboardKeypad::KeyboardUndo => 122,
            KeyboardKeypad::KeyboardCut => 123,
            KeyboardKeypad::KeyboardCopy => 124,
            KeyboardKeypad::KeyboardPaste => 125,
            KeyboardKeypad::KeyboardFind => 126,
            KeyboardKeypad::KeyboardMute => 127,
            KeyboardKeypad::KeyboardVolumeUp => 128,
            KeyboardKeypad::KeyboardVolumeDown => 129,
            KeyboardKeypad::KeyboardLockingCapsLock => 130,
            KeyboardKeypad::KeyboardLockingNumLock => 131,
            KeyboardKeypad::KeyboardLockingScrollLock => 132,
            KeyboardKeypad::KeypadComma => 133,
            KeyboardKeypad::KeypadEqualSign => 134,
            KeyboardKeypad::KeyboardInternational1 => 135,
            KeyboardKeypad::KeyboardInternational2 => 136,
            KeyboardKeypad::KeyboardInternational3 => 137,
            KeyboardKeypad::KeyboardInternational4 => 138,
            KeyboardKeypad::KeyboardInternational5 => 139,
            KeyboardKeypad::KeyboardInternational6 => 140,
            KeyboardKeypad::KeyboardInternational7 => 141,
            KeyboardKeypad::KeyboardInternational8 => 142,
            KeyboardKeypad::KeyboardInternational9 => 143,
            KeyboardKeypad::KeyboardLANG1 => 144,
            KeyboardKeypad::KeyboardLANG2 => 145,
            KeyboardKeypad::KeyboardLANG3 => 146,
            KeyboardKeypad::KeyboardLANG4 => 147,
            KeyboardKeypad::KeyboardLANG5 => 148,
            KeyboardKeypad::KeyboardLANG6 => 149,
            KeyboardKeypad::KeyboardLANG7 => 150,
            KeyboardKeypad::KeyboardLANG8 => 151,
            KeyboardKeypad::KeyboardLANG9 => 152,
            KeyboardKeypad::KeyboardAlternateErase => 153,
            KeyboardKeypad::KeyboardSysReqAttention => 154,
            KeyboardKeypad::KeyboardCancel => 155,
            KeyboardKeypad::KeyboardClear => 156,
            KeyboardKeypad::KeyboardPrior => 157,
            KeyboardKeypad::KeyboardReturn => 158,
            KeyboardKeypad::KeyboardSeparator => 159,
            KeyboardKeypad::KeyboardOut => 160,
            KeyboardKeypad::KeyboardOper => 161,
            KeyboardKeypad::KeyboardClearAgain => 162,
            KeyboardKeypad::KeyboardCrSelProps => 163,
            KeyboardKeypad::KeyboardExSel => 164,
            KeyboardKeypad::KeypadDouble0 => 176,
            KeyboardKeypad::KeypadTriple0 => 177,
            KeyboardKeypad::ThousandsSeparator => 178,
            KeyboardKeypad::DecimalSeparator => 179,
            KeyboardKeypad::CurrencyUnit => 180,
            KeyboardKeypad::CurrencySubunit => 181,
            KeyboardKeypad::KeypadLeftBracket => 182,
            KeyboardKeypad::KeypadRightBracket => 183,
            KeyboardKeypad::KeypadLeftBrace => 184,
            KeyboardKeypad::KeypadRightBrace => 185,
            KeyboardKeypad::KeypadTab => 186,
            KeyboardKeypad::KeypadBackspace => 187,
            KeyboardKeypad::KeypadA => 188,
            KeyboardKeypad::KeypadB => 189,
            KeyboardKeypad::KeypadC => 190,
            KeyboardKeypad::KeypadD => 191,
            KeyboardKeypad::KeypadE => 192,
            KeyboardKeypad::KeypadF => 193,
            KeyboardKeypad::KeypadXOR => 194,
            KeyboardKeypad::KeypadCaret => 195,
            KeyboardKeypad::KeypadPercentage => 196,
            KeyboardKeypad::KeypadLess => 197,
            KeyboardKeypad::KeypadGreater => 198,
            KeyboardKeypad::KeypadAmpersand => 199,
            KeyboardKeypad::KeypadDoubleAmpersand => 200,
            KeyboardKeypad::KeypadBar => 201,
            KeyboardKeypad::KeypadDoubleBar => 202,
            KeyboardKeypad::KeypadColon => 203,
            KeyboardKeypad::KeypadHash => 204,
            KeyboardKeypad::KeypadSpace => 205,
            KeyboardKeypad::KeypadAt => 206,
            KeyboardKeypad::KeypadBang => 207,
            KeyboardKeypad::KeypadMemoryStore => 208,
            KeyboardKeypad::KeypadMemoryRecall => 209,
            KeyboardKeypad::KeypadMemoryClear => 210,
            KeyboardKeypad::KeypadMemoryAdd => 211,
            KeyboardKeypad::KeypadMemorySubtract => 212,
            KeyboardKeypad::KeypadMemoryMultiply => 213,
            KeyboardKeypad::KeypadMemoryDivide => 214,
            KeyboardKeypad::KeypadPlusMinus => 215,
            KeyboardKeypad::KeypadClear => 216,
            KeyboardKeypad::KeypadClearEntry => 217,
            KeyboardKeypad::KeypadBinary => 218,
            KeyboardKeypad::KeypadOctal => 219,
            KeyboardKeypad::KeypadDecimal => 220,
            KeyboardKeypad::KeypadHexadecimal => 221,
            KeyboardKeypad::KeyboardLeftControl => 224,
            KeyboardKeypad::KeyboardLeftShift => 225,
            KeyboardKeypad::KeyboardLeftAlt => 226,
            KeyboardKeypad::KeyboardLeftGUI => 227,
            KeyboardKeypad::KeyboardRightControl => 228,
            KeyboardKeypad::KeyboardRightShift => 229,
            KeyboardKeypad::KeyboardRightAlt => 230,
            KeyboardKeypad::KeyboardRightGUI => 231,
        }
    }
}

impl From<KeyboardKeypad> for u16 {
    fn from(up: KeyboardKeypad) -> u16 {
        u16::from(&up)
    }
}

impl From<&KeyboardKeypad> for u32 {
    fn from(usage: &KeyboardKeypad) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&KeyboardKeypad> for UsagePage {
    fn from(_up: &KeyboardKeypad) -> UsagePage {
        UsagePage::KeyboardKeypad
    }
}

impl From<KeyboardKeypad> for UsagePage {
    fn from(up: KeyboardKeypad) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&KeyboardKeypad> for Usage {
    fn from(u: &KeyboardKeypad) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<KeyboardKeypad> for Usage {
    fn from(u: KeyboardKeypad) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for KeyboardKeypad {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for LED {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for LED {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x8` for [LED]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&LED> for u16 {
    fn from(up: &LED) -> u16 {
        match *up {
            LED::NumLock => 1,
            LED::CapsLock => 2,
            LED::ScrollLock => 3,
            LED::Compose => 4,
            LED::Kana => 5,
            LED::Power => 6,
            LED::Shift => 7,
            LED::DoNotDisturb => 8,
            LED::Mute => 9,
            LED::ToneEnable => 10,
            LED::HighCutFilter => 11,
            LED::LowCutFilter => 12,
            LED::EqualizerEnable => 13,
            LED::SoundFieldOn => 14,
            LED::SurroundOn => 15,
            LED::Repeat => 16,
            LED::Stereo => 17,
            LED::SamplingRateDetect => 18,
            LED::Spinning => 19,
            LED::CAV => 20,
            LED::CLV => 21,
            LED::RecordingFormatDetect => 22,
            LED::OffHook => 23,
            LED::Ring => 24,
            LED::MessageWaiting => 25,
            LED::DataMode => 26,
            LED::BatteryOperation => 27,
            LED::BatteryOK => 28,
            LED::BatteryLow => 29,
            LED::Speaker => 30,
            LED::Headset => 31,
            LED::Hold => 32,
            LED::Microphone => 33,
            LED::Coverage => 34,
            LED::NightMode => 35,
            LED::SendCalls => 36,
            LED::CallPickup => 37,
            LED::Conference => 38,
            LED::Standby => 39,
            LED::CameraOn => 40,
            LED::CameraOff => 41,
            LED::OnLine => 42,
            LED::OffLine => 43,
            LED::Busy => 44,
            LED::Ready => 45,
            LED::PaperOut => 46,
            LED::PaperJam => 47,
            LED::Remote => 48,
            LED::Forward => 49,
            LED::Reverse => 50,
            LED::Stop => 51,
            LED::Rewind => 52,
            LED::FastForward => 53,
            LED::Play => 54,
            LED::Pause => 55,
            LED::Record => 56,
            LED::Error => 57,
            LED::UsageSelectedIndicator => 58,
            LED::UsageInUseIndicator => 59,
            LED::UsageMultiModeIndicator => 60,
            LED::IndicatorOn => 61,
            LED::IndicatorFlash => 62,
            LED::IndicatorSlowBlink => 63,
            LED::IndicatorFastBlink => 64,
            LED::IndicatorOff => 65,
            LED::FlashOnTime => 66,
            LED::SlowBlinkOnTime => 67,
            LED::SlowBlinkOffTime => 68,
            LED::FastBlinkOnTime => 69,
            LED::FastBlinkOffTime => 70,
            LED::UsageIndicatorColor => 71,
            LED::IndicatorRed => 72,
            LED::IndicatorGreen => 73,
            LED::IndicatorAmber => 74,
            LED::GenericIndicator => 75,
            LED::SystemSuspend => 76,
            LED::ExternalPowerConnected => 77,
            LED::IndicatorBlue => 78,
            LED::IndicatorOrange => 79,
            LED::GoodStatus => 80,
            LED::WarningStatus => 81,
            LED::RGBLED => 82,
            LED::RedLEDChannel => 83,
            LED::BlueLEDChannel => 84,
            LED::GreenLEDChannel => 85,
            LED::LEDIntensity => 86,
            LED::SystemMicrophoneMute => 87,
            LED::PlayerIndicator => 96,
            LED::Player1 => 97,
            LED::Player2 => 98,
            LED::Player3 => 99,
            LED::Player4 => 100,
            LED::Player5 => 101,
            LED::Player6 => 102,
            LED::Player7 => 103,
            LED::Player8 => 104,
        }
    }
}

impl From<LED> for u16 {
    fn from(up: LED) -> u16 {
        u16::from(&up)
    }
}

impl From<&LED> for u32 {
    fn from(usage: &LED) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&LED> for UsagePage {
    fn from(_up: &LED) -> UsagePage {
        UsagePage::LED
    }
}

impl From<LED> for UsagePage {
    fn from(up: LED) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&LED> for Usage {
    fn from(u: &LED) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<LED> for Usage {
    fn from(u: LED) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for LED {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Button {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Button {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x9` for [Button]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Button> for u16 {
    fn from(up: &Button) -> u16 {
        match *up {
            Button::Button { button } => button,
        }
    }
}

impl From<Button> for u16 {
    fn from(up: Button) -> u16 {
        u16::from(&up)
    }
}

impl From<&Button> for u32 {
    fn from(usage: &Button) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Button> for UsagePage {
    fn from(_up: &Button) -> UsagePage {
        UsagePage::Button
    }
}

impl From<Button> for UsagePage {
    fn from(up: Button) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Button> for Usage {
    fn from(u: &Button) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Button> for Usage {
    fn from(u: Button) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Button {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Ordinal {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Ordinal {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0xA` for [Ordinal]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Ordinal> for u16 {
    fn from(up: &Ordinal) -> u16 {
        match *up {
            Ordinal::Ordinal { instance } => instance,
        }
    }
}

impl From<Ordinal> for u16 {
    fn from(up: Ordinal) -> u16 {
        u16::from(&up)
    }
}

impl From<&Ordinal> for u32 {
    fn from(usage: &Ordinal) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Ordinal> for UsagePage {
    fn from(_up: &Ordinal) -> UsagePage {
        UsagePage::Ordinal
    }
}

impl From<Ordinal> for UsagePage {
    fn from(up: Ordinal) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Ordinal> for Usage {
    fn from(u: &Ordinal) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Ordinal> for Usage {
    fn from(u: Ordinal) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Ordinal {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for TelephonyDevice {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for TelephonyDevice {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0xB` for [TelephonyDevice]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&TelephonyDevice> for u16 {
    fn from(up: &TelephonyDevice) -> u16 {
        match *up {
            TelephonyDevice::Phone => 1,
            TelephonyDevice::AnsweringMachine => 2,
            TelephonyDevice::MessageControls => 3,
            TelephonyDevice::Handset => 4,
            TelephonyDevice::Headset => 5,
            TelephonyDevice::TelephonyKeyPad => 6,
            TelephonyDevice::ProgrammableButton => 7,
            TelephonyDevice::HookSwitch => 32,
            TelephonyDevice::Flash => 33,
            TelephonyDevice::Feature => 34,
            TelephonyDevice::Hold => 35,
            TelephonyDevice::Redial => 36,
            TelephonyDevice::Transfer => 37,
            TelephonyDevice::Drop => 38,
            TelephonyDevice::Park => 39,
            TelephonyDevice::ForwardCalls => 40,
            TelephonyDevice::AlternateFunction => 41,
            TelephonyDevice::Line => 42,
            TelephonyDevice::SpeakerPhone => 43,
            TelephonyDevice::Conference => 44,
            TelephonyDevice::RingEnable => 45,
            TelephonyDevice::RingSelect => 46,
            TelephonyDevice::PhoneMute => 47,
            TelephonyDevice::CallerID => 48,
            TelephonyDevice::Send => 49,
            TelephonyDevice::SpeedDial => 80,
            TelephonyDevice::StoreNumber => 81,
            TelephonyDevice::RecallNumber => 82,
            TelephonyDevice::PhoneDirectory => 83,
            TelephonyDevice::VoiceMail => 112,
            TelephonyDevice::ScreenCalls => 113,
            TelephonyDevice::DoNotDisturb => 114,
            TelephonyDevice::Message => 115,
            TelephonyDevice::AnswerOnOff => 116,
            TelephonyDevice::InsideDialTone => 144,
            TelephonyDevice::OutsideDialTone => 145,
            TelephonyDevice::InsideRingTone => 146,
            TelephonyDevice::OutsideRingTone => 147,
            TelephonyDevice::PriorityRingTone => 148,
            TelephonyDevice::InsideRingback => 149,
            TelephonyDevice::PriorityRingback => 150,
            TelephonyDevice::LineBusyTone => 151,
            TelephonyDevice::ReorderTone => 152,
            TelephonyDevice::CallWaitingTone => 153,
            TelephonyDevice::ConfirmationTone1 => 154,
            TelephonyDevice::ConfirmationTone2 => 155,
            TelephonyDevice::TonesOff => 156,
            TelephonyDevice::OutsideRingback => 157,
            TelephonyDevice::Ringer => 158,
            TelephonyDevice::PhoneKey0 => 176,
            TelephonyDevice::PhoneKey1 => 177,
            TelephonyDevice::PhoneKey2 => 178,
            TelephonyDevice::PhoneKey3 => 179,
            TelephonyDevice::PhoneKey4 => 180,
            TelephonyDevice::PhoneKey5 => 181,
            TelephonyDevice::PhoneKey6 => 182,
            TelephonyDevice::PhoneKey7 => 183,
            TelephonyDevice::PhoneKey8 => 184,
            TelephonyDevice::PhoneKey9 => 185,
            TelephonyDevice::PhoneKeyStar => 186,
            TelephonyDevice::PhoneKeyPound => 187,
            TelephonyDevice::PhoneKeyA => 188,
            TelephonyDevice::PhoneKeyB => 189,
            TelephonyDevice::PhoneKeyC => 190,
            TelephonyDevice::PhoneKeyD => 191,
            TelephonyDevice::PhoneCallHistoryKey => 192,
            TelephonyDevice::PhoneCallerIDKey => 193,
            TelephonyDevice::PhoneSettingsKey => 194,
            TelephonyDevice::HostControl => 240,
            TelephonyDevice::HostAvailable => 241,
            TelephonyDevice::HostCallActive => 242,
            TelephonyDevice::ActivateHandsetAudio => 243,
            TelephonyDevice::RingType => 244,
            TelephonyDevice::RedialablePhoneNumber => 245,
            TelephonyDevice::StopRingTone => 248,
            TelephonyDevice::PSTNRingTone => 249,
            TelephonyDevice::HostRingTone => 250,
            TelephonyDevice::AlertSoundError => 251,
            TelephonyDevice::AlertSoundConfirm => 252,
            TelephonyDevice::AlertSoundNotification => 253,
            TelephonyDevice::SilentRing => 254,
            TelephonyDevice::EmailMessageWaiting => 264,
            TelephonyDevice::VoicemailMessageWaiting => 265,
            TelephonyDevice::HostHold => 266,
            TelephonyDevice::IncomingCallHistoryCount => 272,
            TelephonyDevice::OutgoingCallHistoryCount => 273,
            TelephonyDevice::IncomingCallHistory => 274,
            TelephonyDevice::OutgoingCallHistory => 275,
            TelephonyDevice::PhoneLocale => 276,
            TelephonyDevice::PhoneTimeSecond => 320,
            TelephonyDevice::PhoneTimeMinute => 321,
            TelephonyDevice::PhoneTimeHour => 322,
            TelephonyDevice::PhoneDateDay => 323,
            TelephonyDevice::PhoneDateMonth => 324,
            TelephonyDevice::PhoneDateYear => 325,
            TelephonyDevice::HandsetNickname => 326,
            TelephonyDevice::AddressBookID => 327,
            TelephonyDevice::CallDuration => 330,
            TelephonyDevice::DualModePhone => 331,
        }
    }
}

impl From<TelephonyDevice> for u16 {
    fn from(up: TelephonyDevice) -> u16 {
        u16::from(&up)
    }
}

impl From<&TelephonyDevice> for u32 {
    fn from(usage: &TelephonyDevice) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&TelephonyDevice> for UsagePage {
    fn from(_up: &TelephonyDevice) -> UsagePage {
        UsagePage::TelephonyDevice
    }
}

impl From<TelephonyDevice> for UsagePage {
    fn from(up: TelephonyDevice) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&TelephonyDevice> for Usage {
    fn from(u: &TelephonyDevice) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<TelephonyDevice> for Usage {
    fn from(u: TelephonyDevice) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for TelephonyDevice {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Consumer {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Consumer {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0xC` for [Consumer]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Consumer> for u16 {
    fn from(up: &Consumer) -> u16 {
        match *up {
            Consumer::ConsumerControl => 1,
            Consumer::NumericKeyPad => 2,
            Consumer::ProgrammableButtons => 3,
            Consumer::Microphone => 4,
            Consumer::Headphone => 5,
            Consumer::GraphicEqualizer => 6,
            Consumer::Plus10 => 32,
            Consumer::Plus100 => 33,
            Consumer::AMPM => 34,
            Consumer::Power => 48,
            Consumer::Reset => 49,
            Consumer::Sleep => 50,
            Consumer::SleepAfter => 51,
            Consumer::SleepMode => 52,
            Consumer::Illumination => 53,
            Consumer::FunctionButtons => 54,
            Consumer::Menu => 64,
            Consumer::MenuPick => 65,
            Consumer::MenuUp => 66,
            Consumer::MenuDown => 67,
            Consumer::MenuLeft => 68,
            Consumer::MenuRight => 69,
            Consumer::MenuEscape => 70,
            Consumer::MenuValueIncrease => 71,
            Consumer::MenuValueDecrease => 72,
            Consumer::DataOnScreen => 96,
            Consumer::ClosedCaption => 97,
            Consumer::ClosedCaptionSelect => 98,
            Consumer::VCRTV => 99,
            Consumer::BroadcastMode => 100,
            Consumer::Snapshot => 101,
            Consumer::Still => 102,
            Consumer::PictureinPictureToggle => 103,
            Consumer::PictureinPictureSwap => 104,
            Consumer::RedMenuButton => 105,
            Consumer::GreenMenuButton => 106,
            Consumer::BlueMenuButton => 107,
            Consumer::YellowMenuButton => 108,
            Consumer::Aspect => 109,
            Consumer::ThreeDModeSelect => 110,
            Consumer::DisplayBrightnessIncrement => 111,
            Consumer::DisplayBrightnessDecrement => 112,
            Consumer::DisplayBrightness => 113,
            Consumer::DisplayBacklightToggle => 114,
            Consumer::DisplaySetBrightnesstoMinimum => 115,
            Consumer::DisplaySetBrightnesstoMaximum => 116,
            Consumer::DisplaySetAutoBrightness => 117,
            Consumer::CameraAccessEnabled => 118,
            Consumer::CameraAccessDisabled => 119,
            Consumer::CameraAccessToggle => 120,
            Consumer::KeyboardBrightnessIncrement => 121,
            Consumer::KeyboardBrightnessDecrement => 122,
            Consumer::KeyboardBacklightSetLevel => 123,
            Consumer::KeyboardBacklightOOC => 124,
            Consumer::KeyboardBacklightSetMinimum => 125,
            Consumer::KeyboardBacklightSetMaximum => 126,
            Consumer::KeyboardBacklightAuto => 127,
            Consumer::Selection => 128,
            Consumer::AssignSelection => 129,
            Consumer::ModeStep => 130,
            Consumer::RecallLast => 131,
            Consumer::EnterChannel => 132,
            Consumer::OrderMovie => 133,
            Consumer::Channel => 134,
            Consumer::MediaSelection => 135,
            Consumer::MediaSelectComputer => 136,
            Consumer::MediaSelectTV => 137,
            Consumer::MediaSelectWWW => 138,
            Consumer::MediaSelectDVD => 139,
            Consumer::MediaSelectTelephone => 140,
            Consumer::MediaSelectProgramGuide => 141,
            Consumer::MediaSelectVideoPhone => 142,
            Consumer::MediaSelectGames => 143,
            Consumer::MediaSelectMessages => 144,
            Consumer::MediaSelectCD => 145,
            Consumer::MediaSelectVCR => 146,
            Consumer::MediaSelectTuner => 147,
            Consumer::Quit => 148,
            Consumer::Help => 149,
            Consumer::MediaSelectTape => 150,
            Consumer::MediaSelectCable => 151,
            Consumer::MediaSelectSatellite => 152,
            Consumer::MediaSelectSecurity => 153,
            Consumer::MediaSelectHome => 154,
            Consumer::MediaSelectCall => 155,
            Consumer::ChannelIncrement => 156,
            Consumer::ChannelDecrement => 157,
            Consumer::MediaSelectSAP => 158,
            Consumer::VCRPlus => 160,
            Consumer::Once => 161,
            Consumer::Daily => 162,
            Consumer::Weekly => 163,
            Consumer::Monthly => 164,
            Consumer::Play => 176,
            Consumer::Pause => 177,
            Consumer::Record => 178,
            Consumer::FastForward => 179,
            Consumer::Rewind => 180,
            Consumer::ScanNextTrack => 181,
            Consumer::ScanPreviousTrack => 182,
            Consumer::Stop => 183,
            Consumer::Eject => 184,
            Consumer::RandomPlay => 185,
            Consumer::SelectDisc => 186,
            Consumer::EnterDisc => 187,
            Consumer::Repeat => 188,
            Consumer::Tracking => 189,
            Consumer::TrackNormal => 190,
            Consumer::SlowTracking => 191,
            Consumer::FrameForward => 192,
            Consumer::FrameBack => 193,
            Consumer::Mark => 194,
            Consumer::ClearMark => 195,
            Consumer::RepeatFromMark => 196,
            Consumer::ReturnToMark => 197,
            Consumer::SearchMarkForward => 198,
            Consumer::SearchMarkBackwards => 199,
            Consumer::CounterReset => 200,
            Consumer::ShowCounter => 201,
            Consumer::TrackingIncrement => 202,
            Consumer::TrackingDecrement => 203,
            Consumer::StopEject => 204,
            Consumer::PlayPause => 205,
            Consumer::PlaySkip => 206,
            Consumer::VoiceCommand => 207,
            Consumer::InvokeCaptureInterface => 208,
            Consumer::StartorStopGameRecording => 209,
            Consumer::HistoricalGameCapture => 210,
            Consumer::CaptureGameScreenshot => 211,
            Consumer::ShoworHideRecordingIndicator => 212,
            Consumer::StartorStopMicrophoneCapture => 213,
            Consumer::StartorStopCameraCapture => 214,
            Consumer::StartorStopGameBroadcast => 215,
            Consumer::StartorStopVoiceDictationSession => 216,
            Consumer::InvokeDismissEmojiPicker => 217,
            Consumer::Volume => 224,
            Consumer::Balance => 225,
            Consumer::Mute => 226,
            Consumer::Bass => 227,
            Consumer::Treble => 228,
            Consumer::BassBoost => 229,
            Consumer::SurroundMode => 230,
            Consumer::Loudness => 231,
            Consumer::MPX => 232,
            Consumer::VolumeIncrement => 233,
            Consumer::VolumeDecrement => 234,
            Consumer::SpeedSelect => 240,
            Consumer::PlaybackSpeed => 241,
            Consumer::StandardPlay => 242,
            Consumer::LongPlay => 243,
            Consumer::ExtendedPlay => 244,
            Consumer::Slow => 245,
            Consumer::FanEnable => 256,
            Consumer::FanSpeed => 257,
            Consumer::LightEnable => 258,
            Consumer::LightIlluminationLevel => 259,
            Consumer::ClimateControlEnable => 260,
            Consumer::RoomTemperature => 261,
            Consumer::SecurityEnable => 262,
            Consumer::FireAlarm => 263,
            Consumer::PoliceAlarm => 264,
            Consumer::Proximity => 265,
            Consumer::Motion => 266,
            Consumer::DuressAlarm => 267,
            Consumer::HoldupAlarm => 268,
            Consumer::MedicalAlarm => 269,
            Consumer::BalanceRight => 336,
            Consumer::BalanceLeft => 337,
            Consumer::BassIncrement => 338,
            Consumer::BassDecrement => 339,
            Consumer::TrebleIncrement => 340,
            Consumer::TrebleDecrement => 341,
            Consumer::SpeakerSystem => 352,
            Consumer::ChannelLeft => 353,
            Consumer::ChannelRight => 354,
            Consumer::ChannelCenter => 355,
            Consumer::ChannelFront => 356,
            Consumer::ChannelCenterFront => 357,
            Consumer::ChannelSide => 358,
            Consumer::ChannelSurround => 359,
            Consumer::ChannelLowFrequencyEnhancement => 360,
            Consumer::ChannelTop => 361,
            Consumer::ChannelUnknown => 362,
            Consumer::Subchannel => 368,
            Consumer::SubchannelIncrement => 369,
            Consumer::SubchannelDecrement => 370,
            Consumer::AlternateAudioIncrement => 371,
            Consumer::AlternateAudioDecrement => 372,
            Consumer::ApplicationLaunchButtons => 384,
            Consumer::ALLaunchButtonConfigurationTool => 385,
            Consumer::ALProgrammableButtonConfiguration => 386,
            Consumer::ALConsumerControlConfiguration => 387,
            Consumer::ALWordProcessor => 388,
            Consumer::ALTextEditor => 389,
            Consumer::ALSpreadsheet => 390,
            Consumer::ALGraphicsEditor => 391,
            Consumer::ALPresentationApp => 392,
            Consumer::ALDatabaseApp => 393,
            Consumer::ALEmailReader => 394,
            Consumer::ALNewsreader => 395,
            Consumer::ALVoicemail => 396,
            Consumer::ALContactsAddressBook => 397,
            Consumer::ALCalendarSchedule => 398,
            Consumer::ALTaskProjectManager => 399,
            Consumer::ALLogJournalTimecard => 400,
            Consumer::ALCheckbookFinance => 401,
            Consumer::ALCalculator => 402,
            Consumer::ALAVCapturePlayback => 403,
            Consumer::ALLocalMachineBrowser => 404,
            Consumer::ALLANWANBrowser => 405,
            Consumer::ALInternetBrowser => 406,
            Consumer::ALRemoteNetworkingISPConnect => 407,
            Consumer::ALNetworkConference => 408,
            Consumer::ALNetworkChat => 409,
            Consumer::ALTelephonyDialer => 410,
            Consumer::ALLogon => 411,
            Consumer::ALLogoff => 412,
            Consumer::ALLogonLogoff => 413,
            Consumer::ALTerminalLockScreensaver => 414,
            Consumer::ALControlPanel => 415,
            Consumer::ALCommandLineProcessorRun => 416,
            Consumer::ALProcessTaskManager => 417,
            Consumer::ALSelectTaskApplication => 418,
            Consumer::ALNextTaskApplication => 419,
            Consumer::ALPreviousTaskApplication => 420,
            Consumer::ALPreemptiveHaltTaskApplication => 421,
            Consumer::ALIntegratedHelpCenter => 422,
            Consumer::ALDocuments => 423,
            Consumer::ALThesaurus => 424,
            Consumer::ALDictionary => 425,
            Consumer::ALDesktop => 426,
            Consumer::ALSpellCheck => 427,
            Consumer::ALGrammarCheck => 428,
            Consumer::ALWirelessStatus => 429,
            Consumer::ALKeyboardLayout => 430,
            Consumer::ALVirusProtection => 431,
            Consumer::ALEncryption => 432,
            Consumer::ALScreenSaver => 433,
            Consumer::ALAlarms => 434,
            Consumer::ALClock => 435,
            Consumer::ALFileBrowser => 436,
            Consumer::ALPowerStatus => 437,
            Consumer::ALImageBrowser => 438,
            Consumer::ALAudioBrowser => 439,
            Consumer::ALMovieBrowser => 440,
            Consumer::ALDigitalRightsManager => 441,
            Consumer::ALDigitalWallet => 442,
            Consumer::ALInstantMessaging => 444,
            Consumer::ALOEMFeaturesTipsTutorialBrowser => 445,
            Consumer::ALOEMHelp => 446,
            Consumer::ALOnlineCommunity => 447,
            Consumer::ALEntertainmentContentBrowser => 448,
            Consumer::ALOnlineShoppingBrowser => 449,
            Consumer::ALSmartCardInformationHelp => 450,
            Consumer::ALMarketMonitorFinanceBrowser => 451,
            Consumer::ALCustomizedCorporateNewsBrowser => 452,
            Consumer::ALOnlineActivityBrowser => 453,
            Consumer::ALResearchSearchBrowser => 454,
            Consumer::ALAudioPlayer => 455,
            Consumer::ALMessageStatus => 456,
            Consumer::ALContactSync => 457,
            Consumer::ALNavigation => 458,
            Consumer::ALContextawareDesktopAssistant => 459,
            Consumer::GenericGUIApplicationControls => 512,
            Consumer::ACNew => 513,
            Consumer::ACOpen => 514,
            Consumer::ACClose => 515,
            Consumer::ACExit => 516,
            Consumer::ACMaximize => 517,
            Consumer::ACMinimize => 518,
            Consumer::ACSave => 519,
            Consumer::ACPrint => 520,
            Consumer::ACProperties => 521,
            Consumer::ACUndo => 538,
            Consumer::ACCopy => 539,
            Consumer::ACCut => 540,
            Consumer::ACPaste => 541,
            Consumer::ACSelectAll => 542,
            Consumer::ACFind => 543,
            Consumer::ACFindandReplace => 544,
            Consumer::ACSearch => 545,
            Consumer::ACGoTo => 546,
            Consumer::ACHome => 547,
            Consumer::ACBack => 548,
            Consumer::ACForward => 549,
            Consumer::ACStop => 550,
            Consumer::ACRefresh => 551,
            Consumer::ACPreviousLink => 552,
            Consumer::ACNextLink => 553,
            Consumer::ACBookmarks => 554,
            Consumer::ACHistory => 555,
            Consumer::ACSubscriptions => 556,
            Consumer::ACZoomIn => 557,
            Consumer::ACZoomOut => 558,
            Consumer::ACZoom => 559,
            Consumer::ACFullScreenView => 560,
            Consumer::ACNormalView => 561,
            Consumer::ACViewToggle => 562,
            Consumer::ACScrollUp => 563,
            Consumer::ACScrollDown => 564,
            Consumer::ACScroll => 565,
            Consumer::ACPanLeft => 566,
            Consumer::ACPanRight => 567,
            Consumer::ACPan => 568,
            Consumer::ACNewWindow => 569,
            Consumer::ACTileHorizontally => 570,
            Consumer::ACTileVertically => 571,
            Consumer::ACFormat => 572,
            Consumer::ACEdit => 573,
            Consumer::ACBold => 574,
            Consumer::ACItalics => 575,
            Consumer::ACUnderline => 576,
            Consumer::ACStrikethrough => 577,
            Consumer::ACSubscript => 578,
            Consumer::ACSuperscript => 579,
            Consumer::ACAllCaps => 580,
            Consumer::ACRotate => 581,
            Consumer::ACResize => 582,
            Consumer::ACFlipHorizontal => 583,
            Consumer::ACFlipVertical => 584,
            Consumer::ACMirrorHorizontal => 585,
            Consumer::ACMirrorVertical => 586,
            Consumer::ACFontSelect => 587,
            Consumer::ACFontColor => 588,
            Consumer::ACFontSize => 589,
            Consumer::ACJustifyLeft => 590,
            Consumer::ACJustifyCenterH => 591,
            Consumer::ACJustifyRight => 592,
            Consumer::ACJustifyBlockH => 593,
            Consumer::ACJustifyTop => 594,
            Consumer::ACJustifyCenterV => 595,
            Consumer::ACJustifyBottom => 596,
            Consumer::ACJustifyBlockV => 597,
            Consumer::ACIndentDecrease => 598,
            Consumer::ACIndentIncrease => 599,
            Consumer::ACNumberedList => 600,
            Consumer::ACRestartNumbering => 601,
            Consumer::ACBulletedList => 602,
            Consumer::ACPromote => 603,
            Consumer::ACDemote => 604,
            Consumer::ACYes => 605,
            Consumer::ACNo => 606,
            Consumer::ACCancel => 607,
            Consumer::ACCatalog => 608,
            Consumer::ACBuyCheckout => 609,
            Consumer::ACAddtoCart => 610,
            Consumer::ACExpand => 611,
            Consumer::ACExpandAll => 612,
            Consumer::ACCollapse => 613,
            Consumer::ACCollapseAll => 614,
            Consumer::ACPrintPreview => 615,
            Consumer::ACPasteSpecial => 616,
            Consumer::ACInsertMode => 617,
            Consumer::ACDelete => 618,
            Consumer::ACLock => 619,
            Consumer::ACUnlock => 620,
            Consumer::ACProtect => 621,
            Consumer::ACUnprotect => 622,
            Consumer::ACAttachComment => 623,
            Consumer::ACDeleteComment => 624,
            Consumer::ACViewComment => 625,
            Consumer::ACSelectWord => 626,
            Consumer::ACSelectSentence => 627,
            Consumer::ACSelectParagraph => 628,
            Consumer::ACSelectColumn => 629,
            Consumer::ACSelectRow => 630,
            Consumer::ACSelectTable => 631,
            Consumer::ACSelectObject => 632,
            Consumer::ACRedoRepeat => 633,
            Consumer::ACSort => 634,
            Consumer::ACSortAscending => 635,
            Consumer::ACSortDescending => 636,
            Consumer::ACFilter => 637,
            Consumer::ACSetClock => 638,
            Consumer::ACViewClock => 639,
            Consumer::ACSelectTimeZone => 640,
            Consumer::ACEditTimeZones => 641,
            Consumer::ACSetAlarm => 642,
            Consumer::ACClearAlarm => 643,
            Consumer::ACSnoozeAlarm => 644,
            Consumer::ACResetAlarm => 645,
            Consumer::ACSynchronize => 646,
            Consumer::ACSendReceive => 647,
            Consumer::ACSendTo => 648,
            Consumer::ACReply => 649,
            Consumer::ACReplyAll => 650,
            Consumer::ACForwardMsg => 651,
            Consumer::ACSend => 652,
            Consumer::ACAttachFile => 653,
            Consumer::ACUpload => 654,
            Consumer::ACDownloadSaveTargetAs => 655,
            Consumer::ACSetBorders => 656,
            Consumer::ACInsertRow => 657,
            Consumer::ACInsertColumn => 658,
            Consumer::ACInsertFile => 659,
            Consumer::ACInsertPicture => 660,
            Consumer::ACInsertObject => 661,
            Consumer::ACInsertSymbol => 662,
            Consumer::ACSaveandClose => 663,
            Consumer::ACRename => 664,
            Consumer::ACMerge => 665,
            Consumer::ACSplit => 666,
            Consumer::ACDisributeHorizontally => 667,
            Consumer::ACDistributeVertically => 668,
            Consumer::ACNextKeyboardLayoutSelect => 669,
            Consumer::ACNavigationGuidance => 670,
            Consumer::ACDesktopShowAllWindows => 671,
            Consumer::ACSoftKeyLeft => 672,
            Consumer::ACSoftKeyRight => 673,
            Consumer::ACDesktopShowAllApplications => 674,
            Consumer::ACIdleKeepAlive => 688,
            Consumer::ExtendedKeyboardAttributesCollection => 704,
            Consumer::KeyboardFormFactor => 705,
            Consumer::KeyboardKeyType => 706,
            Consumer::KeyboardPhysicalLayout => 707,
            Consumer::VendorSpecificKeyboardPhysicalLayout => 708,
            Consumer::KeyboardIETFLanguageTagIndex => 709,
            Consumer::ImplementedKeyboardInputAssistControls => 710,
            Consumer::KeyboardInputAssistPrevious => 711,
            Consumer::KeyboardInputAssistNext => 712,
            Consumer::KeyboardInputAssistPreviousGroup => 713,
            Consumer::KeyboardInputAssistNextGroup => 714,
            Consumer::KeyboardInputAssistAccept => 715,
            Consumer::KeyboardInputAssistCancel => 716,
            Consumer::PrivacyScreenToggle => 720,
            Consumer::PrivacyScreenLevelDecrement => 721,
            Consumer::PrivacyScreenLevelIncrement => 722,
            Consumer::PrivacyScreenLevelMinimum => 723,
            Consumer::PrivacyScreenLevelMaximum => 724,
            Consumer::ContactEdited => 1280,
            Consumer::ContactAdded => 1281,
            Consumer::ContactRecordActive => 1282,
            Consumer::ContactIndex => 1283,
            Consumer::ContactNickname => 1284,
            Consumer::ContactFirstName => 1285,
            Consumer::ContactLastName => 1286,
            Consumer::ContactFullName => 1287,
            Consumer::ContactPhoneNumberPersonal => 1288,
            Consumer::ContactPhoneNumberBusiness => 1289,
            Consumer::ContactPhoneNumberMobile => 1290,
            Consumer::ContactPhoneNumberPager => 1291,
            Consumer::ContactPhoneNumberFax => 1292,
            Consumer::ContactPhoneNumberOther => 1293,
            Consumer::ContactEmailPersonal => 1294,
            Consumer::ContactEmailBusiness => 1295,
            Consumer::ContactEmailOther => 1296,
            Consumer::ContactEmailMain => 1297,
            Consumer::ContactSpeedDialNumber => 1298,
            Consumer::ContactStatusFlag => 1299,
            Consumer::ContactMisc => 1300,
        }
    }
}

impl From<Consumer> for u16 {
    fn from(up: Consumer) -> u16 {
        u16::from(&up)
    }
}

impl From<&Consumer> for u32 {
    fn from(usage: &Consumer) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Consumer> for UsagePage {
    fn from(_up: &Consumer) -> UsagePage {
        UsagePage::Consumer
    }
}

impl From<Consumer> for UsagePage {
    fn from(up: Consumer) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Consumer> for Usage {
    fn from(u: &Consumer) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Consumer> for Usage {
    fn from(u: Consumer) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Consumer {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Digitizers {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Digitizers {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0xD` for [Digitizers]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Digitizers> for u16 {
    fn from(up: &Digitizers) -> u16 {
        match *up {
            Digitizers::Digitizer => 1,
            Digitizers::Pen => 2,
            Digitizers::LightPen => 3,
            Digitizers::TouchScreen => 4,
            Digitizers::TouchPad => 5,
            Digitizers::Whiteboard => 6,
            Digitizers::CoordinateMeasuringMachine => 7,
            Digitizers::ThreeDDigitizer => 8,
            Digitizers::StereoPlotter => 9,
            Digitizers::ArticulatedArm => 10,
            Digitizers::Armature => 11,
            Digitizers::MultiplePointDigitizer => 12,
            Digitizers::FreeSpaceWand => 13,
            Digitizers::DeviceConfiguration => 14,
            Digitizers::CapacitiveHeatMapDigitizer => 15,
            Digitizers::Stylus => 32,
            Digitizers::Puck => 33,
            Digitizers::Finger => 34,
            Digitizers::Devicesettings => 35,
            Digitizers::CharacterGesture => 36,
            Digitizers::TipPressure => 48,
            Digitizers::BarrelPressure => 49,
            Digitizers::InRange => 50,
            Digitizers::Touch => 51,
            Digitizers::Untouch => 52,
            Digitizers::Tap => 53,
            Digitizers::Quality => 54,
            Digitizers::DataValid => 55,
            Digitizers::TransducerIndex => 56,
            Digitizers::TabletFunctionKeys => 57,
            Digitizers::ProgramChangeKeys => 58,
            Digitizers::BatteryStrength => 59,
            Digitizers::Invert => 60,
            Digitizers::XTilt => 61,
            Digitizers::YTilt => 62,
            Digitizers::Azimuth => 63,
            Digitizers::Altitude => 64,
            Digitizers::Twist => 65,
            Digitizers::TipSwitch => 66,
            Digitizers::SecondaryTipSwitch => 67,
            Digitizers::BarrelSwitch => 68,
            Digitizers::Eraser => 69,
            Digitizers::TabletPick => 70,
            Digitizers::TouchValid => 71,
            Digitizers::Width => 72,
            Digitizers::Height => 73,
            Digitizers::ContactIdentifier => 81,
            Digitizers::DeviceMode => 82,
            Digitizers::DeviceIdentifier => 83,
            Digitizers::ContactCount => 84,
            Digitizers::ContactCountMaximum => 85,
            Digitizers::ScanTime => 86,
            Digitizers::SurfaceSwitch => 87,
            Digitizers::ButtonSwitch => 88,
            Digitizers::PadType => 89,
            Digitizers::SecondaryBarrelSwitch => 90,
            Digitizers::TransducerSerialNumber => 91,
            Digitizers::PreferredColor => 92,
            Digitizers::PreferredColorisLocked => 93,
            Digitizers::PreferredLineWidth => 94,
            Digitizers::PreferredLineWidthisLocked => 95,
            Digitizers::LatencyMode => 96,
            Digitizers::GestureCharacterQuality => 97,
            Digitizers::CharacterGestureDataLength => 98,
            Digitizers::CharacterGestureData => 99,
            Digitizers::GestureCharacterEncoding => 100,
            Digitizers::UTF8CharacterGestureEncoding => 101,
            Digitizers::UTF16LittleEndianCharacterGestureEncoding => 102,
            Digitizers::UTF16BigEndianCharacterGestureEncoding => 103,
            Digitizers::UTF32LittleEndianCharacterGestureEncoding => 104,
            Digitizers::UTF32BigEndianCharacterGestureEncoding => 105,
            Digitizers::CapacitiveHeatMapProtocolVendorID => 106,
            Digitizers::CapacitiveHeatMapProtocolVersion => 107,
            Digitizers::CapacitiveHeatMapFrameData => 108,
            Digitizers::GestureCharacterEnable => 109,
            Digitizers::TransducerSerialNumberPart2 => 110,
            Digitizers::NoPreferredColor => 111,
            Digitizers::PreferredLineStyle => 112,
            Digitizers::PreferredLineStyleisLocked => 113,
            Digitizers::Ink => 114,
            Digitizers::Pencil => 115,
            Digitizers::Highlighter => 116,
            Digitizers::ChiselMarker => 117,
            Digitizers::Brush => 118,
            Digitizers::NoPreference => 119,
            Digitizers::DigitizerDiagnostic => 128,
            Digitizers::DigitizerError => 129,
            Digitizers::ErrNormalStatus => 130,
            Digitizers::ErrTransducersExceeded => 131,
            Digitizers::ErrFullTransFeaturesUnavailable => 132,
            Digitizers::ErrChargeLow => 133,
            Digitizers::TransducerSoftwareInfo => 144,
            Digitizers::TransducerVendorId => 145,
            Digitizers::TransducerProductId => 146,
            Digitizers::DeviceSupportedProtocols => 147,
            Digitizers::TransducerSupportedProtocols => 148,
            Digitizers::NoProtocol => 149,
            Digitizers::WacomAESProtocol => 150,
            Digitizers::USIProtocol => 151,
            Digitizers::MicrosoftPenProtocol => 152,
            Digitizers::SupportedReportRates => 160,
            Digitizers::ReportRate => 161,
            Digitizers::TransducerConnected => 162,
            Digitizers::SwitchDisabled => 163,
            Digitizers::SwitchUnimplemented => 164,
            Digitizers::TransducerSwitches => 165,
            Digitizers::TransducerIndexSelector => 166,
            Digitizers::ButtonPressThreshold => 176,
        }
    }
}

impl From<Digitizers> for u16 {
    fn from(up: Digitizers) -> u16 {
        u16::from(&up)
    }
}

impl From<&Digitizers> for u32 {
    fn from(usage: &Digitizers) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Digitizers> for UsagePage {
    fn from(_up: &Digitizers) -> UsagePage {
        UsagePage::Digitizers
    }
}

impl From<Digitizers> for UsagePage {
    fn from(up: Digitizers) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Digitizers> for Usage {
    fn from(u: &Digitizers) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Digitizers> for Usage {
    fn from(u: Digitizers) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Digitizers {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Haptics {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Haptics {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0xE` for [Haptics]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Haptics> for u16 {
    fn from(up: &Haptics) -> u16 {
        match *up {
            Haptics::SimpleHapticController => 1,
            Haptics::WaveformList => 16,
            Haptics::DurationList => 17,
            Haptics::AutoTrigger => 32,
            Haptics::ManualTrigger => 33,
            Haptics::AutoTriggerAssociatedControl => 34,
            Haptics::Intensity => 35,
            Haptics::RepeatCount => 36,
            Haptics::RetriggerPeriod => 37,
            Haptics::WaveformVendorPage => 38,
            Haptics::WaveformVendorID => 39,
            Haptics::WaveformCutoffTime => 40,
            Haptics::WaveformNone => 4097,
            Haptics::WaveformStop => 4098,
            Haptics::WaveformClick => 4099,
            Haptics::WaveformBuzzContinuous => 4100,
            Haptics::WaveformRumbleContinuous => 4101,
            Haptics::WaveformPress => 4102,
            Haptics::WaveformRelease => 4103,
            Haptics::WaveformHover => 4104,
            Haptics::WaveformSuccess => 4105,
            Haptics::WaveformError => 4106,
            Haptics::WaveformInkContinuous => 4107,
            Haptics::WaveformPencilContinuous => 4108,
            Haptics::WaveformMarkerContinuous => 4109,
            Haptics::WaveformChiselMarkerContinuous => 4110,
            Haptics::WaveformBrushContinuous => 4111,
            Haptics::WaveformEraserContinuous => 4112,
            Haptics::WaveformSparkleContinuous => 4113,
        }
    }
}

impl From<Haptics> for u16 {
    fn from(up: Haptics) -> u16 {
        u16::from(&up)
    }
}

impl From<&Haptics> for u32 {
    fn from(usage: &Haptics) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Haptics> for UsagePage {
    fn from(_up: &Haptics) -> UsagePage {
        UsagePage::Haptics
    }
}

impl From<Haptics> for UsagePage {
    fn from(up: Haptics) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Haptics> for Usage {
    fn from(u: &Haptics) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Haptics> for Usage {
    fn from(u: Haptics) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Haptics {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for PhysicalInputDevice {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for PhysicalInputDevice {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0xF` for [PhysicalInputDevice]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&PhysicalInputDevice> for u16 {
    fn from(up: &PhysicalInputDevice) -> u16 {
        match *up {
            PhysicalInputDevice::PhysicalInputDevice => 1,
            PhysicalInputDevice::Normal => 32,
            PhysicalInputDevice::SetEffectReport => 33,
            PhysicalInputDevice::EffectParameterBlockIndex => 34,
            PhysicalInputDevice::ParameterBlockOffset => 35,
            PhysicalInputDevice::ROMFlag => 36,
            PhysicalInputDevice::EffectType => 37,
            PhysicalInputDevice::ETConstantForce => 38,
            PhysicalInputDevice::ETRamp => 39,
            PhysicalInputDevice::ETCustomForce => 40,
            PhysicalInputDevice::ETSquare => 48,
            PhysicalInputDevice::ETSine => 49,
            PhysicalInputDevice::ETTriangle => 50,
            PhysicalInputDevice::ETSawtoothUp => 51,
            PhysicalInputDevice::ETSawtoothDown => 52,
            PhysicalInputDevice::ETSpring => 64,
            PhysicalInputDevice::ETDamper => 65,
            PhysicalInputDevice::ETInertia => 66,
            PhysicalInputDevice::ETFriction => 67,
            PhysicalInputDevice::Duration => 80,
            PhysicalInputDevice::SamplePeriod => 81,
            PhysicalInputDevice::Gain => 82,
            PhysicalInputDevice::TriggerButton => 83,
            PhysicalInputDevice::TriggerRepeatInterval => 84,
            PhysicalInputDevice::AxesEnable => 85,
            PhysicalInputDevice::DirectionEnable => 86,
            PhysicalInputDevice::Direction => 87,
            PhysicalInputDevice::TypeSpecificBlockOffset => 88,
            PhysicalInputDevice::BlockType => 89,
            PhysicalInputDevice::SetEnvelopeReport => 90,
            PhysicalInputDevice::AttackLevel => 91,
            PhysicalInputDevice::AttackTime => 92,
            PhysicalInputDevice::FadeLevel => 93,
            PhysicalInputDevice::FadeTime => 94,
            PhysicalInputDevice::SetConditionReport => 95,
            PhysicalInputDevice::CenterPointOffset => 96,
            PhysicalInputDevice::PositiveCoefficient => 97,
            PhysicalInputDevice::NegativeCoefficient => 98,
            PhysicalInputDevice::PositiveSaturation => 99,
            PhysicalInputDevice::NegativeSaturation => 100,
            PhysicalInputDevice::DeadBand => 101,
            PhysicalInputDevice::DownloadForceSample => 102,
            PhysicalInputDevice::IsochCustomForceEnable => 103,
            PhysicalInputDevice::CustomForceDataReport => 104,
            PhysicalInputDevice::CustomForceData => 105,
            PhysicalInputDevice::CustomForceVendorDefinedData => 106,
            PhysicalInputDevice::SetCustomForceReport => 107,
            PhysicalInputDevice::CustomForceDataOffset => 108,
            PhysicalInputDevice::SampleCount => 109,
            PhysicalInputDevice::SetPeriodicReport => 110,
            PhysicalInputDevice::Offset => 111,
            PhysicalInputDevice::Magnitude => 112,
            PhysicalInputDevice::Phase => 113,
            PhysicalInputDevice::Period => 114,
            PhysicalInputDevice::SetConstantForceReport => 115,
            PhysicalInputDevice::SetRampForceReport => 116,
            PhysicalInputDevice::RampStart => 117,
            PhysicalInputDevice::RampEnd => 118,
            PhysicalInputDevice::EffectOperationReport => 119,
            PhysicalInputDevice::EffectOperation => 120,
            PhysicalInputDevice::OpEffectStart => 121,
            PhysicalInputDevice::OpEffectStartSolo => 122,
            PhysicalInputDevice::OpEffectStop => 123,
            PhysicalInputDevice::LoopCount => 124,
            PhysicalInputDevice::DeviceGainReport => 125,
            PhysicalInputDevice::DeviceGain => 126,
            PhysicalInputDevice::ParameterBlockPoolsReport => 127,
            PhysicalInputDevice::RAMPoolSize => 128,
            PhysicalInputDevice::ROMPoolSize => 129,
            PhysicalInputDevice::ROMEffectBlockCount => 130,
            PhysicalInputDevice::SimultaneousEffectsMax => 131,
            PhysicalInputDevice::PoolAlignment => 132,
            PhysicalInputDevice::ParameterBlockMoveReport => 133,
            PhysicalInputDevice::MoveSource => 134,
            PhysicalInputDevice::MoveDestination => 135,
            PhysicalInputDevice::MoveLength => 136,
            PhysicalInputDevice::EffectParameterBlockLoadReport => 137,
            PhysicalInputDevice::EffectParameterBlockLoadStatus => 139,
            PhysicalInputDevice::BlockLoadSuccess => 140,
            PhysicalInputDevice::BlockLoadFull => 141,
            PhysicalInputDevice::BlockLoadError => 142,
            PhysicalInputDevice::BlockHandle => 143,
            PhysicalInputDevice::EffectParameterBlockFreeReport => 144,
            PhysicalInputDevice::TypeSpecificBlockHandle => 145,
            PhysicalInputDevice::PIDStateReport => 146,
            PhysicalInputDevice::EffectPlaying => 148,
            PhysicalInputDevice::PIDDeviceControlReport => 149,
            PhysicalInputDevice::PIDDeviceControl => 150,
            PhysicalInputDevice::DCEnableActuators => 151,
            PhysicalInputDevice::DCDisableActuators => 152,
            PhysicalInputDevice::DCStopAllEffects => 153,
            PhysicalInputDevice::DCReset => 154,
            PhysicalInputDevice::DCPause => 155,
            PhysicalInputDevice::DCContinue => 156,
            PhysicalInputDevice::DevicePaused => 159,
            PhysicalInputDevice::ActuatorsEnabled => 160,
            PhysicalInputDevice::SafetySwitch => 164,
            PhysicalInputDevice::ActuatorOverrideSwitch => 165,
            PhysicalInputDevice::ActuatorPower => 166,
            PhysicalInputDevice::StartDelay => 167,
            PhysicalInputDevice::ParameterBlockSize => 168,
            PhysicalInputDevice::DeviceManagedPool => 169,
            PhysicalInputDevice::SharedParameterBlocks => 170,
            PhysicalInputDevice::CreateNewEffectParameterBlockReport => 171,
            PhysicalInputDevice::RAMPoolAvailable => 172,
        }
    }
}

impl From<PhysicalInputDevice> for u16 {
    fn from(up: PhysicalInputDevice) -> u16 {
        u16::from(&up)
    }
}

impl From<&PhysicalInputDevice> for u32 {
    fn from(usage: &PhysicalInputDevice) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&PhysicalInputDevice> for UsagePage {
    fn from(_up: &PhysicalInputDevice) -> UsagePage {
        UsagePage::PhysicalInputDevice
    }
}

impl From<PhysicalInputDevice> for UsagePage {
    fn from(up: PhysicalInputDevice) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&PhysicalInputDevice> for Usage {
    fn from(u: &PhysicalInputDevice) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<PhysicalInputDevice> for Usage {
    fn from(u: PhysicalInputDevice) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for PhysicalInputDevice {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Unicode {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Unicode {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x10` for [Unicode]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Unicode> for u16 {
    fn from(up: &Unicode) -> u16 {
        match *up {
            Unicode::Unicode { codepoint } => codepoint,
        }
    }
}

impl From<Unicode> for u16 {
    fn from(up: Unicode) -> u16 {
        u16::from(&up)
    }
}

impl From<&Unicode> for u32 {
    fn from(usage: &Unicode) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Unicode> for UsagePage {
    fn from(_up: &Unicode) -> UsagePage {
        UsagePage::Unicode
    }
}

impl From<Unicode> for UsagePage {
    fn from(up: Unicode) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Unicode> for Usage {
    fn from(u: &Unicode) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Unicode> for Usage {
    fn from(u: Unicode) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Unicode {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for SoC {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for SoC {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x11` for [SoC]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&SoC> for u16 {
    fn from(up: &SoC) -> u16 {
        match *up {
            SoC::SocControl => 1,
            SoC::FirmwareTransfer => 2,
            SoC::FirmwareFileId => 3,
            SoC::FileOffsetInBytes => 4,
            SoC::FileTransferSizeMaxInBytes => 5,
            SoC::FilePayload => 6,
            SoC::FilePayloadSizeInBytes => 7,
            SoC::FilePayloadContainsLastBytes => 8,
            SoC::FileTransferStop => 9,
            SoC::FileTransferTillEnd => 10,
        }
    }
}

impl From<SoC> for u16 {
    fn from(up: SoC) -> u16 {
        u16::from(&up)
    }
}

impl From<&SoC> for u32 {
    fn from(usage: &SoC) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&SoC> for UsagePage {
    fn from(_up: &SoC) -> UsagePage {
        UsagePage::SoC
    }
}

impl From<SoC> for UsagePage {
    fn from(up: SoC) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&SoC> for Usage {
    fn from(u: &SoC) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<SoC> for Usage {
    fn from(u: SoC) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for SoC {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for EyeandHeadTrackers {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for EyeandHeadTrackers {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x12` for [EyeandHeadTrackers]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&EyeandHeadTrackers> for u16 {
    fn from(up: &EyeandHeadTrackers) -> u16 {
        match *up {
            EyeandHeadTrackers::EyeTracker => 1,
            EyeandHeadTrackers::HeadTracker => 2,
            EyeandHeadTrackers::TrackingData => 16,
            EyeandHeadTrackers::Capabilities => 17,
            EyeandHeadTrackers::Configuration => 18,
            EyeandHeadTrackers::Status => 19,
            EyeandHeadTrackers::Control => 20,
            EyeandHeadTrackers::SensorTimestamp => 32,
            EyeandHeadTrackers::PositionX => 33,
            EyeandHeadTrackers::PositionY => 34,
            EyeandHeadTrackers::PositionZ => 35,
            EyeandHeadTrackers::GazePoint => 36,
            EyeandHeadTrackers::LeftEyePosition => 37,
            EyeandHeadTrackers::RightEyePosition => 38,
            EyeandHeadTrackers::HeadPosition => 39,
            EyeandHeadTrackers::HeadDirectionPoint => 40,
            EyeandHeadTrackers::RotationaboutXaxis => 41,
            EyeandHeadTrackers::RotationaboutYaxis => 42,
            EyeandHeadTrackers::RotationaboutZaxis => 43,
            EyeandHeadTrackers::TrackerQuality => 256,
            EyeandHeadTrackers::MinimumTrackingDistance => 257,
            EyeandHeadTrackers::OptimumTrackingDistance => 258,
            EyeandHeadTrackers::MaximumTrackingDistance => 259,
            EyeandHeadTrackers::MaximumScreenPlaneWidth => 260,
            EyeandHeadTrackers::MaximumScreenPlaneHeight => 261,
            EyeandHeadTrackers::DisplayManufacturerID => 512,
            EyeandHeadTrackers::DisplayProductID => 513,
            EyeandHeadTrackers::DisplaySerialNumber => 514,
            EyeandHeadTrackers::DisplayManufacturerDate => 515,
            EyeandHeadTrackers::CalibratedScreenWidth => 516,
            EyeandHeadTrackers::CalibratedScreenHeight => 517,
            EyeandHeadTrackers::SamplingFrequency => 768,
            EyeandHeadTrackers::ConfigurationStatus => 769,
            EyeandHeadTrackers::DeviceModeRequest => 1024,
        }
    }
}

impl From<EyeandHeadTrackers> for u16 {
    fn from(up: EyeandHeadTrackers) -> u16 {
        u16::from(&up)
    }
}

impl From<&EyeandHeadTrackers> for u32 {
    fn from(usage: &EyeandHeadTrackers) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&EyeandHeadTrackers> for UsagePage {
    fn from(_up: &EyeandHeadTrackers) -> UsagePage {
        UsagePage::EyeandHeadTrackers
    }
}

impl From<EyeandHeadTrackers> for UsagePage {
    fn from(up: EyeandHeadTrackers) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&EyeandHeadTrackers> for Usage {
    fn from(u: &EyeandHeadTrackers) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<EyeandHeadTrackers> for Usage {
    fn from(u: EyeandHeadTrackers) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for EyeandHeadTrackers {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for AuxiliaryDisplay {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for AuxiliaryDisplay {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x14` for [AuxiliaryDisplay]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&AuxiliaryDisplay> for u16 {
    fn from(up: &AuxiliaryDisplay) -> u16 {
        match *up {
            AuxiliaryDisplay::AlphanumericDisplay => 1,
            AuxiliaryDisplay::AuxiliaryDisplay => 2,
            AuxiliaryDisplay::DisplayAttributesReport => 32,
            AuxiliaryDisplay::ASCIICharacterSet => 33,
            AuxiliaryDisplay::DataReadBack => 34,
            AuxiliaryDisplay::FontReadBack => 35,
            AuxiliaryDisplay::DisplayControlReport => 36,
            AuxiliaryDisplay::ClearDisplay => 37,
            AuxiliaryDisplay::DisplayEnable => 38,
            AuxiliaryDisplay::ScreenSaverDelay => 39,
            AuxiliaryDisplay::ScreenSaverEnable => 40,
            AuxiliaryDisplay::VerticalScroll => 41,
            AuxiliaryDisplay::HorizontalScroll => 42,
            AuxiliaryDisplay::CharacterReport => 43,
            AuxiliaryDisplay::DisplayData => 44,
            AuxiliaryDisplay::DisplayStatus => 45,
            AuxiliaryDisplay::StatNotReady => 46,
            AuxiliaryDisplay::StatReady => 47,
            AuxiliaryDisplay::ErrNotaloadablecharacter => 48,
            AuxiliaryDisplay::ErrFontdatacannotberead => 49,
            AuxiliaryDisplay::CursorPositionReport => 50,
            AuxiliaryDisplay::Row => 51,
            AuxiliaryDisplay::Column => 52,
            AuxiliaryDisplay::Rows => 53,
            AuxiliaryDisplay::Columns => 54,
            AuxiliaryDisplay::CursorPixelPositioning => 55,
            AuxiliaryDisplay::CursorMode => 56,
            AuxiliaryDisplay::CursorEnable => 57,
            AuxiliaryDisplay::CursorBlink => 58,
            AuxiliaryDisplay::FontReport => 59,
            AuxiliaryDisplay::FontData => 60,
            AuxiliaryDisplay::CharacterWidth => 61,
            AuxiliaryDisplay::CharacterHeight => 62,
            AuxiliaryDisplay::CharacterSpacingHorizontal => 63,
            AuxiliaryDisplay::CharacterSpacingVertical => 64,
            AuxiliaryDisplay::UnicodeCharacterSet => 65,
            AuxiliaryDisplay::Font7Segment => 66,
            AuxiliaryDisplay::SevenSegmentDirectMap => 67,
            AuxiliaryDisplay::Font14Segment => 68,
            AuxiliaryDisplay::One4SegmentDirectMap => 69,
            AuxiliaryDisplay::DisplayBrightness => 70,
            AuxiliaryDisplay::DisplayContrast => 71,
            AuxiliaryDisplay::CharacterAttribute => 72,
            AuxiliaryDisplay::AttributeReadback => 73,
            AuxiliaryDisplay::AttributeData => 74,
            AuxiliaryDisplay::CharAttrEnhance => 75,
            AuxiliaryDisplay::CharAttrUnderline => 76,
            AuxiliaryDisplay::CharAttrBlink => 77,
            AuxiliaryDisplay::BitmapSizeX => 128,
            AuxiliaryDisplay::BitmapSizeY => 129,
            AuxiliaryDisplay::MaxBlitSize => 130,
            AuxiliaryDisplay::BitDepthFormat => 131,
            AuxiliaryDisplay::DisplayOrientation => 132,
            AuxiliaryDisplay::PaletteReport => 133,
            AuxiliaryDisplay::PaletteDataSize => 134,
            AuxiliaryDisplay::PaletteDataOffset => 135,
            AuxiliaryDisplay::PaletteData => 136,
            AuxiliaryDisplay::BlitReport => 138,
            AuxiliaryDisplay::BlitRectangleX1 => 139,
            AuxiliaryDisplay::BlitRectangleY1 => 140,
            AuxiliaryDisplay::BlitRectangleX2 => 141,
            AuxiliaryDisplay::BlitRectangleY2 => 142,
            AuxiliaryDisplay::BlitData => 143,
            AuxiliaryDisplay::SoftButton => 144,
            AuxiliaryDisplay::SoftButtonID => 145,
            AuxiliaryDisplay::SoftButtonSide => 146,
            AuxiliaryDisplay::SoftButtonOffset1 => 147,
            AuxiliaryDisplay::SoftButtonOffset2 => 148,
            AuxiliaryDisplay::SoftButtonReport => 149,
            AuxiliaryDisplay::SoftKeys => 194,
            AuxiliaryDisplay::DisplayDataExtensions => 204,
            AuxiliaryDisplay::CharacterMapping => 207,
            AuxiliaryDisplay::UnicodeEquivalent => 221,
            AuxiliaryDisplay::CharacterPageMapping => 223,
            AuxiliaryDisplay::RequestReport => 255,
        }
    }
}

impl From<AuxiliaryDisplay> for u16 {
    fn from(up: AuxiliaryDisplay) -> u16 {
        u16::from(&up)
    }
}

impl From<&AuxiliaryDisplay> for u32 {
    fn from(usage: &AuxiliaryDisplay) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&AuxiliaryDisplay> for UsagePage {
    fn from(_up: &AuxiliaryDisplay) -> UsagePage {
        UsagePage::AuxiliaryDisplay
    }
}

impl From<AuxiliaryDisplay> for UsagePage {
    fn from(up: AuxiliaryDisplay) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&AuxiliaryDisplay> for Usage {
    fn from(u: &AuxiliaryDisplay) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<AuxiliaryDisplay> for Usage {
    fn from(u: AuxiliaryDisplay) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for AuxiliaryDisplay {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Sensors {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Sensors {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x20` for [Sensors]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Sensors> for u16 {
    fn from(up: &Sensors) -> u16 {
        match *up {
            Sensors::Sensor => 1,
            Sensors::Biometric => 16,
            Sensors::BiometricHumanPresence => 17,
            Sensors::BiometricHumanProximity => 18,
            Sensors::BiometricHumanTouch => 19,
            Sensors::BiometricBloodPressure => 20,
            Sensors::BiometricBodyTemperature => 21,
            Sensors::BiometricHeartRate => 22,
            Sensors::BiometricHeartRateVariability => 23,
            Sensors::BiometricPeripheralOxygenSaturation => 24,
            Sensors::BiometricRespiratoryRate => 25,
            Sensors::Electrical => 32,
            Sensors::ElectricalCapacitance => 33,
            Sensors::ElectricalCurrent => 34,
            Sensors::ElectricalPower => 35,
            Sensors::ElectricalInductance => 36,
            Sensors::ElectricalResistance => 37,
            Sensors::ElectricalVoltage => 38,
            Sensors::ElectricalPotentiometer => 39,
            Sensors::ElectricalFrequency => 40,
            Sensors::ElectricalPeriod => 41,
            Sensors::Environmental => 48,
            Sensors::EnvironmentalAtmosphericPressure => 49,
            Sensors::EnvironmentalHumidity => 50,
            Sensors::EnvironmentalTemperature => 51,
            Sensors::EnvironmentalWindDirection => 52,
            Sensors::EnvironmentalWindSpeed => 53,
            Sensors::EnvironmentalAirQuality => 54,
            Sensors::EnvironmentalHeatIndex => 55,
            Sensors::EnvironmentalSurfaceTemperature => 56,
            Sensors::EnvironmentalVolatileOrganicCompounds => 57,
            Sensors::EnvironmentalObjectPresence => 58,
            Sensors::EnvironmentalObjectProximity => 59,
            Sensors::Light => 64,
            Sensors::LightAmbientLight => 65,
            Sensors::LightConsumerInfrared => 66,
            Sensors::LightInfraredLight => 67,
            Sensors::LightVisibleLight => 68,
            Sensors::LightUltravioletLight => 69,
            Sensors::Location => 80,
            Sensors::LocationBroadcast => 81,
            Sensors::LocationDeadReckoning => 82,
            Sensors::LocationGPSGlobalPositioningSystem => 83,
            Sensors::LocationLookup => 84,
            Sensors::LocationOther => 85,
            Sensors::LocationStatic => 86,
            Sensors::LocationTriangulation => 87,
            Sensors::Mechanical => 96,
            Sensors::MechanicalBooleanSwitch => 97,
            Sensors::MechanicalBooleanSwitchArray => 98,
            Sensors::MechanicalMultivalueSwitch => 99,
            Sensors::MechanicalForce => 100,
            Sensors::MechanicalPressure => 101,
            Sensors::MechanicalStrain => 102,
            Sensors::MechanicalWeight => 103,
            Sensors::MechanicalHapticVibrator => 104,
            Sensors::MechanicalHallEffectSwitch => 105,
            Sensors::Motion => 112,
            Sensors::MotionAccelerometer1D => 113,
            Sensors::MotionAccelerometer2D => 114,
            Sensors::MotionAccelerometer3D => 115,
            Sensors::MotionGyrometer1D => 116,
            Sensors::MotionGyrometer2D => 117,
            Sensors::MotionGyrometer3D => 118,
            Sensors::MotionMotionDetector => 119,
            Sensors::MotionSpeedometer => 120,
            Sensors::MotionAccelerometer => 121,
            Sensors::MotionGyrometer => 122,
            Sensors::MotionGravityVector => 123,
            Sensors::MotionLinearAccelerometer => 124,
            Sensors::Orientation => 128,
            Sensors::OrientationCompass1D => 129,
            Sensors::OrientationCompass2D => 130,
            Sensors::OrientationCompass3D => 131,
            Sensors::OrientationInclinometer1D => 132,
            Sensors::OrientationInclinometer2D => 133,
            Sensors::OrientationInclinometer3D => 134,
            Sensors::OrientationDistance1D => 135,
            Sensors::OrientationDistance2D => 136,
            Sensors::OrientationDistance3D => 137,
            Sensors::OrientationDeviceOrientation => 138,
            Sensors::OrientationCompass => 139,
            Sensors::OrientationInclinometer => 140,
            Sensors::OrientationDistance => 141,
            Sensors::OrientationRelativeOrientation => 142,
            Sensors::OrientationSimpleOrientation => 143,
            Sensors::Scanner => 144,
            Sensors::ScannerBarcode => 145,
            Sensors::ScannerRFID => 146,
            Sensors::ScannerNFC => 147,
            Sensors::Time => 160,
            Sensors::TimeAlarmTimer => 161,
            Sensors::TimeRealTimeClock => 162,
            Sensors::PersonalActivity => 176,
            Sensors::PersonalActivityActivityDetection => 177,
            Sensors::PersonalActivityDevicePosition => 178,
            Sensors::PersonalActivityFloorTracker => 179,
            Sensors::PersonalActivityPedometer => 180,
            Sensors::PersonalActivityStepDetection => 181,
            Sensors::OrientationExtended => 192,
            Sensors::OrientationExtendedGeomagneticOrientation => 193,
            Sensors::OrientationExtendedMagnetometer => 194,
            Sensors::Gesture => 208,
            Sensors::GestureChassisFlipGesture => 209,
            Sensors::GestureHingeFoldGesture => 210,
            Sensors::Other => 224,
            Sensors::OtherCustom => 225,
            Sensors::OtherGeneric => 226,
            Sensors::OtherGenericEnumerator => 227,
            Sensors::OtherHingeAngle => 228,
            Sensors::VendorReserved1 => 240,
            Sensors::VendorReserved2 => 241,
            Sensors::VendorReserved3 => 242,
            Sensors::VendorReserved4 => 243,
            Sensors::VendorReserved5 => 244,
            Sensors::VendorReserved6 => 245,
            Sensors::VendorReserved7 => 246,
            Sensors::VendorReserved8 => 247,
            Sensors::VendorReserved9 => 248,
            Sensors::VendorReserved10 => 249,
            Sensors::VendorReserved11 => 250,
            Sensors::VendorReserved12 => 251,
            Sensors::VendorReserved13 => 252,
            Sensors::VendorReserved14 => 253,
            Sensors::VendorReserved15 => 254,
            Sensors::VendorReserved16 => 255,
            Sensors::Event => 512,
            Sensors::EventSensorState => 513,
            Sensors::EventSensorEvent => 514,
            Sensors::Property => 768,
            Sensors::PropertyFriendlyName => 769,
            Sensors::PropertyPersistentUniqueID => 770,
            Sensors::PropertySensorStatus => 771,
            Sensors::PropertyMinimumReportInterval => 772,
            Sensors::PropertySensorManufacturer => 773,
            Sensors::PropertySensorModel => 774,
            Sensors::PropertySensorSerialNumber => 775,
            Sensors::PropertySensorDescription => 776,
            Sensors::PropertySensorConnectionType => 777,
            Sensors::PropertySensorDevicePath => 778,
            Sensors::PropertyHardwareRevision => 779,
            Sensors::PropertyFirmwareVersion => 780,
            Sensors::PropertyReleaseDate => 781,
            Sensors::PropertyReportInterval => 782,
            Sensors::PropertyChangeSensitivityAbsolute => 783,
            Sensors::PropertyChangeSensitivityPercentofRange => 784,
            Sensors::PropertyChangeSensitivityPercentRelative => 785,
            Sensors::PropertyAccuracy => 786,
            Sensors::PropertyResolution => 787,
            Sensors::PropertyMaximum => 788,
            Sensors::PropertyMinimum => 789,
            Sensors::PropertyReportingState => 790,
            Sensors::PropertySamplingRate => 791,
            Sensors::PropertyResponseCurve => 792,
            Sensors::PropertyPowerState => 793,
            Sensors::PropertyMaximumFIFOEvents => 794,
            Sensors::PropertyReportLatency => 795,
            Sensors::PropertyFlushFIFOEvents => 796,
            Sensors::PropertyMaximumPowerConsumption => 797,
            Sensors::PropertyIsPrimary => 798,
            Sensors::PropertyHumanPresenceDetectionType => 799,
            Sensors::DataFieldLocation => 1024,
            Sensors::DataFieldAltitudeAntennaSeaLevel => 1026,
            Sensors::DataFieldDifferentialReferenceStationID => 1027,
            Sensors::DataFieldAltitudeEllipsoidError => 1028,
            Sensors::DataFieldAltitudeEllipsoid => 1029,
            Sensors::DataFieldAltitudeSeaLevelError => 1030,
            Sensors::DataFieldAltitudeSeaLevel => 1031,
            Sensors::DataFieldDifferentialGPSDataAge => 1032,
            Sensors::DataFieldErrorRadius => 1033,
            Sensors::DataFieldFixQuality => 1034,
            Sensors::DataFieldFixType => 1035,
            Sensors::DataFieldGeoidalSeparation => 1036,
            Sensors::DataFieldGPSOperationMode => 1037,
            Sensors::DataFieldGPSSelectionMode => 1038,
            Sensors::DataFieldGPSStatus => 1039,
            Sensors::DataFieldPositionDilutionofPrecision => 1040,
            Sensors::DataFieldHorizontalDilutionofPrecision => 1041,
            Sensors::DataFieldVerticalDilutionofPrecision => 1042,
            Sensors::DataFieldLatitude => 1043,
            Sensors::DataFieldLongitude => 1044,
            Sensors::DataFieldTrueHeading => 1045,
            Sensors::DataFieldMagneticHeading => 1046,
            Sensors::DataFieldMagneticVariation => 1047,
            Sensors::DataFieldSpeed => 1048,
            Sensors::DataFieldSatellitesinView => 1049,
            Sensors::DataFieldSatellitesinViewAzimuth => 1050,
            Sensors::DataFieldSatellitesinViewElevation => 1051,
            Sensors::DataFieldSatellitesinViewIDs => 1052,
            Sensors::DataFieldSatellitesinViewPRNs => 1053,
            Sensors::DataFieldSatellitesinViewSNRatios => 1054,
            Sensors::DataFieldSatellitesUsedCount => 1055,
            Sensors::DataFieldSatellitesUsedPRNs => 1056,
            Sensors::DataFieldNMEASentence => 1057,
            Sensors::DataFieldAddressLine1 => 1058,
            Sensors::DataFieldAddressLine2 => 1059,
            Sensors::DataFieldCity => 1060,
            Sensors::DataFieldStateorProvince => 1061,
            Sensors::DataFieldCountryorRegion => 1062,
            Sensors::DataFieldPostalCode => 1063,
            Sensors::PropertyLocation => 1066,
            Sensors::PropertyLocationDesiredAccuracy => 1067,
            Sensors::DataFieldEnvironmental => 1072,
            Sensors::DataFieldAtmosphericPressure => 1073,
            Sensors::DataFieldRelativeHumidity => 1075,
            Sensors::DataFieldTemperature => 1076,
            Sensors::DataFieldWindDirection => 1077,
            Sensors::DataFieldWindSpeed => 1078,
            Sensors::DataFieldAirQualityIndex => 1079,
            Sensors::DataFieldEquivalentCO2 => 1080,
            Sensors::DataFieldVolatileOrganicCompoundConcentration => 1081,
            Sensors::DataFieldObjectPresence => 1082,
            Sensors::DataFieldObjectProximityRange => 1083,
            Sensors::DataFieldObjectProximityOutofRange => 1084,
            Sensors::PropertyEnvironmental => 1088,
            Sensors::PropertyReferencePressure => 1089,
            Sensors::DataFieldMotion => 1104,
            Sensors::DataFieldMotionState => 1105,
            Sensors::DataFieldAcceleration => 1106,
            Sensors::DataFieldAccelerationAxisX => 1107,
            Sensors::DataFieldAccelerationAxisY => 1108,
            Sensors::DataFieldAccelerationAxisZ => 1109,
            Sensors::DataFieldAngularVelocity => 1110,
            Sensors::DataFieldAngularVelocityaboutXAxis => 1111,
            Sensors::DataFieldAngularVelocityaboutYAxis => 1112,
            Sensors::DataFieldAngularVelocityaboutZAxis => 1113,
            Sensors::DataFieldAngularPosition => 1114,
            Sensors::DataFieldAngularPositionaboutXAxis => 1115,
            Sensors::DataFieldAngularPositionaboutYAxis => 1116,
            Sensors::DataFieldAngularPositionaboutZAxis => 1117,
            Sensors::DataFieldMotionSpeed => 1118,
            Sensors::DataFieldMotionIntensity => 1119,
            Sensors::DataFieldOrientation => 1136,
            Sensors::DataFieldHeading => 1137,
            Sensors::DataFieldHeadingXAxis => 1138,
            Sensors::DataFieldHeadingYAxis => 1139,
            Sensors::DataFieldHeadingZAxis => 1140,
            Sensors::DataFieldHeadingCompensatedMagneticNorth => 1141,
            Sensors::DataFieldHeadingCompensatedTrueNorth => 1142,
            Sensors::DataFieldHeadingMagneticNorth => 1143,
            Sensors::DataFieldHeadingTrueNorth => 1144,
            Sensors::DataFieldDistance => 1145,
            Sensors::DataFieldDistanceXAxis => 1146,
            Sensors::DataFieldDistanceYAxis => 1147,
            Sensors::DataFieldDistanceZAxis => 1148,
            Sensors::DataFieldDistanceOutofRange => 1149,
            Sensors::DataFieldTilt => 1150,
            Sensors::DataFieldTiltXAxis => 1151,
            Sensors::DataFieldTiltYAxis => 1152,
            Sensors::DataFieldTiltZAxis => 1153,
            Sensors::DataFieldRotationMatrix => 1154,
            Sensors::DataFieldQuaternion => 1155,
            Sensors::DataFieldMagneticFlux => 1156,
            Sensors::DataFieldMagneticFluxXAxis => 1157,
            Sensors::DataFieldMagneticFluxYAxis => 1158,
            Sensors::DataFieldMagneticFluxZAxis => 1159,
            Sensors::DataFieldMagnetometerAccuracy => 1160,
            Sensors::DataFieldSimpleOrientationDirection => 1161,
            Sensors::DataFieldMechanical => 1168,
            Sensors::DataFieldBooleanSwitchState => 1169,
            Sensors::DataFieldBooleanSwitchArrayStates => 1170,
            Sensors::DataFieldMultivalueSwitchValue => 1171,
            Sensors::DataFieldForce => 1172,
            Sensors::DataFieldAbsolutePressure => 1173,
            Sensors::DataFieldGaugePressure => 1174,
            Sensors::DataFieldStrain => 1175,
            Sensors::DataFieldWeight => 1176,
            Sensors::PropertyMechanical => 1184,
            Sensors::PropertyVibrationState => 1185,
            Sensors::PropertyForwardVibrationSpeed => 1186,
            Sensors::PropertyBackwardVibrationSpeed => 1187,
            Sensors::DataFieldBiometric => 1200,
            Sensors::DataFieldHumanPresence => 1201,
            Sensors::DataFieldHumanProximityRange => 1202,
            Sensors::DataFieldHumanProximityOutofRange => 1203,
            Sensors::DataFieldHumanTouchState => 1204,
            Sensors::DataFieldBloodPressure => 1205,
            Sensors::DataFieldBloodPressureDiastolic => 1206,
            Sensors::DataFieldBloodPressureSystolic => 1207,
            Sensors::DataFieldHeartRate => 1208,
            Sensors::DataFieldRestingHeartRate => 1209,
            Sensors::DataFieldHeartbeatInterval => 1210,
            Sensors::DataFieldRespiratoryRate => 1211,
            Sensors::DataFieldSpO2 => 1212,
            Sensors::DataFieldHumanAttentionDetected => 1213,
            Sensors::DataFieldHumanHeadAzimuth => 1214,
            Sensors::DataFieldHumanHeadAltitude => 1215,
            Sensors::DataFieldHumanHeadRoll => 1216,
            Sensors::DataFieldHumanHeadPitch => 1217,
            Sensors::DataFieldHumanHeadYaw => 1218,
            Sensors::DataFieldHumanCorrelationId => 1219,
            Sensors::DataFieldLight => 1232,
            Sensors::DataFieldIlluminance => 1233,
            Sensors::DataFieldColorTemperature => 1234,
            Sensors::DataFieldChromaticity => 1235,
            Sensors::DataFieldChromaticityX => 1236,
            Sensors::DataFieldChromaticityY => 1237,
            Sensors::DataFieldConsumerIRSentenceReceive => 1238,
            Sensors::DataFieldInfraredLight => 1239,
            Sensors::DataFieldRedLight => 1240,
            Sensors::DataFieldGreenLight => 1241,
            Sensors::DataFieldBlueLight => 1242,
            Sensors::DataFieldUltravioletALight => 1243,
            Sensors::DataFieldUltravioletBLight => 1244,
            Sensors::DataFieldUltravioletIndex => 1245,
            Sensors::DataFieldNearInfraredLight => 1246,
            Sensors::PropertyLight => 1247,
            Sensors::PropertyConsumerIRSentenceSend => 1248,
            Sensors::PropertyAutoBrightnessPreferred => 1250,
            Sensors::PropertyAutoColorPreferred => 1251,
            Sensors::DataFieldScanner => 1264,
            Sensors::DataFieldRFIDTag40Bit => 1265,
            Sensors::DataFieldNFCSentenceReceive => 1266,
            Sensors::PropertyScanner => 1272,
            Sensors::PropertyNFCSentenceSend => 1273,
            Sensors::DataFieldElectrical => 1280,
            Sensors::DataFieldCapacitance => 1281,
            Sensors::DataFieldCurrent => 1282,
            Sensors::DataFieldElectricalPower => 1283,
            Sensors::DataFieldInductance => 1284,
            Sensors::DataFieldResistance => 1285,
            Sensors::DataFieldVoltage => 1286,
            Sensors::DataFieldFrequency => 1287,
            Sensors::DataFieldPeriod => 1288,
            Sensors::DataFieldPercentofRange => 1289,
            Sensors::DataFieldTime => 1312,
            Sensors::DataFieldYear => 1313,
            Sensors::DataFieldMonth => 1314,
            Sensors::DataFieldDay => 1315,
            Sensors::DataFieldDayofWeek => 1316,
            Sensors::DataFieldHour => 1317,
            Sensors::DataFieldMinute => 1318,
            Sensors::DataFieldSecond => 1319,
            Sensors::DataFieldMillisecond => 1320,
            Sensors::DataFieldTimestamp => 1321,
            Sensors::DataFieldJulianDayofYear => 1322,
            Sensors::DataFieldTimeSinceSystemBoot => 1323,
            Sensors::PropertyTime => 1328,
            Sensors::PropertyTimeZoneOffsetfromUTC => 1329,
            Sensors::PropertyTimeZoneName => 1330,
            Sensors::PropertyDaylightSavingsTimeObserved => 1331,
            Sensors::PropertyTimeTrimAdjustment => 1332,
            Sensors::PropertyArmAlarm => 1333,
            Sensors::DataFieldCustom => 1344,
            Sensors::DataFieldCustomUsage => 1345,
            Sensors::DataFieldCustomBooleanArray => 1346,
            Sensors::DataFieldCustomValue => 1347,
            Sensors::DataFieldCustomValue1 => 1348,
            Sensors::DataFieldCustomValue2 => 1349,
            Sensors::DataFieldCustomValue3 => 1350,
            Sensors::DataFieldCustomValue4 => 1351,
            Sensors::DataFieldCustomValue5 => 1352,
            Sensors::DataFieldCustomValue6 => 1353,
            Sensors::DataFieldCustomValue7 => 1354,
            Sensors::DataFieldCustomValue8 => 1355,
            Sensors::DataFieldCustomValue9 => 1356,
            Sensors::DataFieldCustomValue10 => 1357,
            Sensors::DataFieldCustomValue11 => 1358,
            Sensors::DataFieldCustomValue12 => 1359,
            Sensors::DataFieldCustomValue13 => 1360,
            Sensors::DataFieldCustomValue14 => 1361,
            Sensors::DataFieldCustomValue15 => 1362,
            Sensors::DataFieldCustomValue16 => 1363,
            Sensors::DataFieldCustomValue17 => 1364,
            Sensors::DataFieldCustomValue18 => 1365,
            Sensors::DataFieldCustomValue19 => 1366,
            Sensors::DataFieldCustomValue20 => 1367,
            Sensors::DataFieldCustomValue21 => 1368,
            Sensors::DataFieldCustomValue22 => 1369,
            Sensors::DataFieldCustomValue23 => 1370,
            Sensors::DataFieldCustomValue24 => 1371,
            Sensors::DataFieldCustomValue25 => 1372,
            Sensors::DataFieldCustomValue26 => 1373,
            Sensors::DataFieldCustomValue27 => 1374,
            Sensors::DataFieldCustomValue28 => 1375,
            Sensors::DataFieldGeneric => 1376,
            Sensors::DataFieldGenericGUIDorPROPERTYKEY => 1377,
            Sensors::DataFieldGenericCategoryGUID => 1378,
            Sensors::DataFieldGenericTypeGUID => 1379,
            Sensors::DataFieldGenericEventPROPERTYKEY => 1380,
            Sensors::DataFieldGenericPropertyPROPERTYKEY => 1381,
            Sensors::DataFieldGenericDataFieldPROPERTYKEY => 1382,
            Sensors::DataFieldGenericEvent => 1383,
            Sensors::DataFieldGenericProperty => 1384,
            Sensors::DataFieldGenericDataField => 1385,
            Sensors::DataFieldEnumeratorTableRowIndex => 1386,
            Sensors::DataFieldEnumeratorTableRowCount => 1387,
            Sensors::DataFieldGenericGUIDorPROPERTYKEYkind => 1388,
            Sensors::DataFieldGenericGUID => 1389,
            Sensors::DataFieldGenericPROPERTYKEY => 1390,
            Sensors::DataFieldGenericTopLevelCollectionID => 1391,
            Sensors::DataFieldGenericReportID => 1392,
            Sensors::DataFieldGenericReportItemPositionIndex => 1393,
            Sensors::DataFieldGenericFirmwareVARTYPE => 1394,
            Sensors::DataFieldGenericUnitofMeasure => 1395,
            Sensors::DataFieldGenericUnitExponent => 1396,
            Sensors::DataFieldGenericReportSize => 1397,
            Sensors::DataFieldGenericReportCount => 1398,
            Sensors::PropertyGeneric => 1408,
            Sensors::PropertyEnumeratorTableRowIndex => 1409,
            Sensors::PropertyEnumeratorTableRowCount => 1410,
            Sensors::DataFieldPersonalActivity => 1424,
            Sensors::DataFieldActivityType => 1425,
            Sensors::DataFieldActivityState => 1426,
            Sensors::DataFieldDevicePosition => 1427,
            Sensors::DataFieldStepCount => 1428,
            Sensors::DataFieldStepCountReset => 1429,
            Sensors::DataFieldStepDuration => 1430,
            Sensors::DataFieldStepType => 1431,
            Sensors::PropertyMinimumActivityDetectionInterval => 1440,
            Sensors::PropertySupportedActivityTypes => 1441,
            Sensors::PropertySubscribedActivityTypes => 1442,
            Sensors::PropertySupportedStepTypes => 1443,
            Sensors::PropertySubscribedStepTypes => 1444,
            Sensors::PropertyFloorHeight => 1445,
            Sensors::DataFieldCustomTypeID => 1456,
            Sensors::PropertyCustom => 1472,
            Sensors::PropertyCustomValue1 => 1473,
            Sensors::PropertyCustomValue2 => 1474,
            Sensors::PropertyCustomValue3 => 1475,
            Sensors::PropertyCustomValue4 => 1476,
            Sensors::PropertyCustomValue5 => 1477,
            Sensors::PropertyCustomValue6 => 1478,
            Sensors::PropertyCustomValue7 => 1479,
            Sensors::PropertyCustomValue8 => 1480,
            Sensors::PropertyCustomValue9 => 1481,
            Sensors::PropertyCustomValue10 => 1482,
            Sensors::PropertyCustomValue11 => 1483,
            Sensors::PropertyCustomValue12 => 1484,
            Sensors::PropertyCustomValue13 => 1485,
            Sensors::PropertyCustomValue14 => 1486,
            Sensors::PropertyCustomValue15 => 1487,
            Sensors::PropertyCustomValue16 => 1488,
            Sensors::DataFieldHinge => 1504,
            Sensors::DataFieldHingeAngle => 1505,
            Sensors::DataFieldGestureSensor => 1520,
            Sensors::DataFieldGestureState => 1521,
            Sensors::DataFieldHingeFoldInitialAngle => 1522,
            Sensors::DataFieldHingeFoldFinalAngle => 1523,
            Sensors::DataFieldHingeFoldContributingPanel => 1524,
            Sensors::DataFieldHingeFoldType => 1525,
            Sensors::SensorStateUndefined => 2048,
            Sensors::SensorStateReady => 2049,
            Sensors::SensorStateNotAvailable => 2050,
            Sensors::SensorStateNoData => 2051,
            Sensors::SensorStateInitializing => 2052,
            Sensors::SensorStateAccessDenied => 2053,
            Sensors::SensorStateError => 2054,
            Sensors::SensorEventUnknown => 2064,
            Sensors::SensorEventStateChanged => 2065,
            Sensors::SensorEventPropertyChanged => 2066,
            Sensors::SensorEventDataUpdated => 2067,
            Sensors::SensorEventPollResponse => 2068,
            Sensors::SensorEventChangeSensitivity => 2069,
            Sensors::SensorEventRangeMaximumReached => 2070,
            Sensors::SensorEventRangeMinimumReached => 2071,
            Sensors::SensorEventHighThresholdCrossUpward => 2072,
            Sensors::SensorEventHighThresholdCrossDownward => 2073,
            Sensors::SensorEventLowThresholdCrossUpward => 2074,
            Sensors::SensorEventLowThresholdCrossDownward => 2075,
            Sensors::SensorEventZeroThresholdCrossUpward => 2076,
            Sensors::SensorEventZeroThresholdCrossDownward => 2077,
            Sensors::SensorEventPeriodExceeded => 2078,
            Sensors::SensorEventFrequencyExceeded => 2079,
            Sensors::SensorEventComplexTrigger => 2080,
            Sensors::ConnectionTypePCIntegrated => 2096,
            Sensors::ConnectionTypePCAttached => 2097,
            Sensors::ConnectionTypePCExternal => 2098,
            Sensors::ReportingStateReportNoEvents => 2112,
            Sensors::ReportingStateReportAllEvents => 2113,
            Sensors::ReportingStateReportThresholdEvents => 2114,
            Sensors::ReportingStateWakeOnNoEvents => 2115,
            Sensors::ReportingStateWakeOnAllEvents => 2116,
            Sensors::ReportingStateWakeOnThresholdEvents => 2117,
            Sensors::ReportingStateAnytime => 2118,
            Sensors::PowerStateUndefined => 2128,
            Sensors::PowerStateD0FullPower => 2129,
            Sensors::PowerStateD1LowPower => 2130,
            Sensors::PowerStateD2StandbyPowerwithWakeup => 2131,
            Sensors::PowerStateD3SleepwithWakeup => 2132,
            Sensors::PowerStateD4PowerOff => 2133,
            Sensors::AccuracyDefault => 2144,
            Sensors::AccuracyHigh => 2145,
            Sensors::AccuracyMedium => 2146,
            Sensors::AccuracyLow => 2147,
            Sensors::FixQualityNoFix => 2160,
            Sensors::FixQualityGPS => 2161,
            Sensors::FixQualityDGPS => 2162,
            Sensors::FixTypeNoFix => 2176,
            Sensors::FixTypeGPSSPSModeFixValid => 2177,
            Sensors::FixTypeDGPSSPSModeFixValid => 2178,
            Sensors::FixTypeGPSPPSModeFixValid => 2179,
            Sensors::FixTypeRealTimeKinematic => 2180,
            Sensors::FixTypeFloatRTK => 2181,
            Sensors::FixTypeEstimateddeadreckoned => 2182,
            Sensors::FixTypeManualInputMode => 2183,
            Sensors::FixTypeSimulatorMode => 2184,
            Sensors::GPSOperationModeManual => 2192,
            Sensors::GPSOperationModeAutomatic => 2193,
            Sensors::GPSSelectionModeAutonomous => 2208,
            Sensors::GPSSelectionModeDGPS => 2209,
            Sensors::GPSSelectionModeEstimateddeadreckoned => 2210,
            Sensors::GPSSelectionModeManualInput => 2211,
            Sensors::GPSSelectionModeSimulator => 2212,
            Sensors::GPSSelectionModeDataNotValid => 2213,
            Sensors::GPSStatusDataValid => 2224,
            Sensors::GPSStatusDataNotValid => 2225,
            Sensors::DayofWeekSunday => 2240,
            Sensors::DayofWeekMonday => 2241,
            Sensors::DayofWeekTuesday => 2242,
            Sensors::DayofWeekWednesday => 2243,
            Sensors::DayofWeekThursday => 2244,
            Sensors::DayofWeekFriday => 2245,
            Sensors::DayofWeekSaturday => 2246,
            Sensors::KindCategory => 2256,
            Sensors::KindType => 2257,
            Sensors::KindEvent => 2258,
            Sensors::KindProperty => 2259,
            Sensors::KindDataField => 2260,
            Sensors::MagnetometerAccuracyLow => 2272,
            Sensors::MagnetometerAccuracyMedium => 2273,
            Sensors::MagnetometerAccuracyHigh => 2274,
            Sensors::SimpleOrientationDirectionNotRotated => 2288,
            Sensors::SimpleOrientationDirectionRotated90DegreesCCW => 2289,
            Sensors::SimpleOrientationDirectionRotated180DegreesCCW => 2290,
            Sensors::SimpleOrientationDirectionRotated270DegreesCCW => 2291,
            Sensors::SimpleOrientationDirectionFaceUp => 2292,
            Sensors::SimpleOrientationDirectionFaceDown => 2293,
            Sensors::VT_NULL => 2304,
            Sensors::VT_BOOL => 2305,
            Sensors::VT_UI1 => 2306,
            Sensors::VT_I1 => 2307,
            Sensors::VT_UI2 => 2308,
            Sensors::VT_I2 => 2309,
            Sensors::VT_UI4 => 2310,
            Sensors::VT_I4 => 2311,
            Sensors::VT_UI8 => 2312,
            Sensors::VT_I8 => 2313,
            Sensors::VT_R4 => 2314,
            Sensors::VT_R8 => 2315,
            Sensors::VT_WSTR => 2316,
            Sensors::VT_STR => 2317,
            Sensors::VT_CLSID => 2318,
            Sensors::VT_VECTORVT_UI1 => 2319,
            Sensors::VT_F16E0 => 2320,
            Sensors::VT_F16E1 => 2321,
            Sensors::VT_F16E2 => 2322,
            Sensors::VT_F16E3 => 2323,
            Sensors::VT_F16E4 => 2324,
            Sensors::VT_F16E5 => 2325,
            Sensors::VT_F16E6 => 2326,
            Sensors::VT_F16E7 => 2327,
            Sensors::VT_F16E8 => 2328,
            Sensors::VT_F16E9 => 2329,
            Sensors::VT_F16EA => 2330,
            Sensors::VT_F16EB => 2331,
            Sensors::VT_F16EC => 2332,
            Sensors::VT_F16ED => 2333,
            Sensors::VT_F16EE => 2334,
            Sensors::VT_F16EF => 2335,
            Sensors::VT_F32E0 => 2336,
            Sensors::VT_F32E1 => 2337,
            Sensors::VT_F32E2 => 2338,
            Sensors::VT_F32E3 => 2339,
            Sensors::VT_F32E4 => 2340,
            Sensors::VT_F32E5 => 2341,
            Sensors::VT_F32E6 => 2342,
            Sensors::VT_F32E7 => 2343,
            Sensors::VT_F32E8 => 2344,
            Sensors::VT_F32E9 => 2345,
            Sensors::VT_F32EA => 2346,
            Sensors::VT_F32EB => 2347,
            Sensors::VT_F32EC => 2348,
            Sensors::VT_F32ED => 2349,
            Sensors::VT_F32EE => 2350,
            Sensors::VT_F32EF => 2351,
            Sensors::ActivityTypeUnknown => 2352,
            Sensors::ActivityTypeStationary => 2353,
            Sensors::ActivityTypeFidgeting => 2354,
            Sensors::ActivityTypeWalking => 2355,
            Sensors::ActivityTypeRunning => 2356,
            Sensors::ActivityTypeInVehicle => 2357,
            Sensors::ActivityTypeBiking => 2358,
            Sensors::ActivityTypeIdle => 2359,
            Sensors::UnitNotSpecified => 2368,
            Sensors::UnitLux => 2369,
            Sensors::UnitDegreesKelvin => 2370,
            Sensors::UnitDegreesCelsius => 2371,
            Sensors::UnitPascal => 2372,
            Sensors::UnitNewton => 2373,
            Sensors::UnitMetersSecond => 2374,
            Sensors::UnitKilogram => 2375,
            Sensors::UnitMeter => 2376,
            Sensors::UnitMetersSecondSecond => 2377,
            Sensors::UnitFarad => 2378,
            Sensors::UnitAmpere => 2379,
            Sensors::UnitWatt => 2380,
            Sensors::UnitHenry => 2381,
            Sensors::UnitOhm => 2382,
            Sensors::UnitVolt => 2383,
            Sensors::UnitHertz => 2384,
            Sensors::UnitBar => 2385,
            Sensors::UnitDegreesAnticlockwise => 2386,
            Sensors::UnitDegreesClockwise => 2387,
            Sensors::UnitDegrees => 2388,
            Sensors::UnitDegreesSecond => 2389,
            Sensors::UnitDegreesSecondSecond => 2390,
            Sensors::UnitKnot => 2391,
            Sensors::UnitPercent => 2392,
            Sensors::UnitSecond => 2393,
            Sensors::UnitMillisecond => 2394,
            Sensors::UnitG => 2395,
            Sensors::UnitBytes => 2396,
            Sensors::UnitMilligauss => 2397,
            Sensors::UnitBits => 2398,
            Sensors::ActivityStateNoStateChange => 2400,
            Sensors::ActivityStateStartActivity => 2401,
            Sensors::ActivityStateEndActivity => 2402,
            Sensors::Exponent0 => 2416,
            Sensors::Exponent1 => 2417,
            Sensors::Exponent2 => 2418,
            Sensors::Exponent3 => 2419,
            Sensors::Exponent4 => 2420,
            Sensors::Exponent5 => 2421,
            Sensors::Exponent6 => 2422,
            Sensors::Exponent7 => 2423,
            Sensors::Exponent8 => 2424,
            Sensors::Exponent9 => 2425,
            Sensors::ExponentA => 2426,
            Sensors::ExponentB => 2427,
            Sensors::ExponentC => 2428,
            Sensors::ExponentD => 2429,
            Sensors::ExponentE => 2430,
            Sensors::ExponentF => 2431,
            Sensors::DevicePositionUnknown => 2432,
            Sensors::DevicePositionUnchanged => 2433,
            Sensors::DevicePositionOnDesk => 2434,
            Sensors::DevicePositionInHand => 2435,
            Sensors::DevicePositionMovinginBag => 2436,
            Sensors::DevicePositionStationaryinBag => 2437,
            Sensors::StepTypeUnknown => 2448,
            Sensors::StepTypeWalking => 2449,
            Sensors::StepTypeRunning => 2450,
            Sensors::GestureStateUnknown => 2464,
            Sensors::GestureStateStarted => 2465,
            Sensors::GestureStateCompleted => 2466,
            Sensors::GestureStateCancelled => 2467,
            Sensors::HingeFoldContributingPanelUnknown => 2480,
            Sensors::HingeFoldContributingPanelPanel1 => 2481,
            Sensors::HingeFoldContributingPanelPanel2 => 2482,
            Sensors::HingeFoldContributingPanelBoth => 2483,
            Sensors::HingeFoldTypeUnknown => 2484,
            Sensors::HingeFoldTypeIncreasing => 2485,
            Sensors::HingeFoldTypeDecreasing => 2486,
            Sensors::HumanPresenceDetectionTypeVendorDefinedNonBiometric => 2496,
            Sensors::HumanPresenceDetectionTypeVendorDefinedBiometric => 2497,
            Sensors::HumanPresenceDetectionTypeFacialBiometric => 2498,
            Sensors::HumanPresenceDetectionTypeAudioBiometric => 2499,
            Sensors::ModifierChangeSensitivityAbsolute => 4096,
            Sensors::ModifierMaximum => 8192,
            Sensors::ModifierMinimum => 12288,
            Sensors::ModifierAccuracy => 16384,
            Sensors::ModifierResolution => 20480,
            Sensors::ModifierThresholdHigh => 24576,
            Sensors::ModifierThresholdLow => 28672,
            Sensors::ModifierCalibrationOffset => 32768,
            Sensors::ModifierCalibrationMultiplier => 36864,
            Sensors::ModifierReportInterval => 40960,
            Sensors::ModifierFrequencyMax => 45056,
            Sensors::ModifierPeriodMax => 49152,
            Sensors::ModifierChangeSensitivityPercentofRange => 53248,
            Sensors::ModifierChangeSensitivityPercentRelative => 57344,
            Sensors::ModifierVendorReserved => 61440,
        }
    }
}

impl From<Sensors> for u16 {
    fn from(up: Sensors) -> u16 {
        u16::from(&up)
    }
}

impl From<&Sensors> for u32 {
    fn from(usage: &Sensors) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Sensors> for UsagePage {
    fn from(_up: &Sensors) -> UsagePage {
        UsagePage::Sensors
    }
}

impl From<Sensors> for UsagePage {
    fn from(up: Sensors) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Sensors> for Usage {
    fn from(u: &Sensors) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Sensors> for Usage {
    fn from(u: Sensors) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Sensors {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for MedicalInstrument {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for MedicalInstrument {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x40` for [MedicalInstrument]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&MedicalInstrument> for u16 {
    fn from(up: &MedicalInstrument) -> u16 {
        match *up {
            MedicalInstrument::MedicalUltrasound => 1,
            MedicalInstrument::VCRAcquisition => 32,
            MedicalInstrument::FreezeThaw => 33,
            MedicalInstrument::ClipStore => 34,
            MedicalInstrument::Update => 35,
            MedicalInstrument::Next => 36,
            MedicalInstrument::Save => 37,
            MedicalInstrument::Print => 38,
            MedicalInstrument::MicrophoneEnable => 39,
            MedicalInstrument::Cine => 64,
            MedicalInstrument::TransmitPower => 65,
            MedicalInstrument::Volume => 66,
            MedicalInstrument::Focus => 67,
            MedicalInstrument::Depth => 68,
            MedicalInstrument::SoftStepPrimary => 96,
            MedicalInstrument::SoftStepSecondary => 97,
            MedicalInstrument::DepthGainCompensation => 112,
            MedicalInstrument::ZoomSelect => 128,
            MedicalInstrument::ZoomAdjust => 129,
            MedicalInstrument::SpectralDopplerModeSelect => 130,
            MedicalInstrument::SpectralDopplerAdjust => 131,
            MedicalInstrument::ColorDopplerModeSelect => 132,
            MedicalInstrument::ColorDopplerAdjust => 133,
            MedicalInstrument::MotionModeSelect => 134,
            MedicalInstrument::MotionModeAdjust => 135,
            MedicalInstrument::TwoDModeSelect => 136,
            MedicalInstrument::TwoDModeAdjust => 137,
            MedicalInstrument::SoftControlSelect => 160,
            MedicalInstrument::SoftControlAdjust => 161,
        }
    }
}

impl From<MedicalInstrument> for u16 {
    fn from(up: MedicalInstrument) -> u16 {
        u16::from(&up)
    }
}

impl From<&MedicalInstrument> for u32 {
    fn from(usage: &MedicalInstrument) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&MedicalInstrument> for UsagePage {
    fn from(_up: &MedicalInstrument) -> UsagePage {
        UsagePage::MedicalInstrument
    }
}

impl From<MedicalInstrument> for UsagePage {
    fn from(up: MedicalInstrument) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&MedicalInstrument> for Usage {
    fn from(u: &MedicalInstrument) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<MedicalInstrument> for Usage {
    fn from(u: MedicalInstrument) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for MedicalInstrument {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for BrailleDisplay {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for BrailleDisplay {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x41` for [BrailleDisplay]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&BrailleDisplay> for u16 {
    fn from(up: &BrailleDisplay) -> u16 {
        match *up {
            BrailleDisplay::BrailleDisplay => 1,
            BrailleDisplay::BrailleRow => 2,
            BrailleDisplay::EightDotBrailleCell => 3,
            BrailleDisplay::SixDotBrailleCell => 4,
            BrailleDisplay::NumberofBrailleCells => 5,
            BrailleDisplay::ScreenReaderControl => 6,
            BrailleDisplay::ScreenReaderIdentifier => 7,
            BrailleDisplay::RouterSet1 => 250,
            BrailleDisplay::RouterSet2 => 251,
            BrailleDisplay::RouterSet3 => 252,
            BrailleDisplay::RouterKey => 256,
            BrailleDisplay::RowRouterKey => 257,
            BrailleDisplay::BrailleButtons => 512,
            BrailleDisplay::BrailleKeyboardDot1 => 513,
            BrailleDisplay::BrailleKeyboardDot2 => 514,
            BrailleDisplay::BrailleKeyboardDot3 => 515,
            BrailleDisplay::BrailleKeyboardDot4 => 516,
            BrailleDisplay::BrailleKeyboardDot5 => 517,
            BrailleDisplay::BrailleKeyboardDot6 => 518,
            BrailleDisplay::BrailleKeyboardDot7 => 519,
            BrailleDisplay::BrailleKeyboardDot8 => 520,
            BrailleDisplay::BrailleKeyboardSpace => 521,
            BrailleDisplay::BrailleKeyboardLeftSpace => 522,
            BrailleDisplay::BrailleKeyboardRightSpace => 523,
            BrailleDisplay::BrailleFaceControls => 524,
            BrailleDisplay::BrailleLeftControls => 525,
            BrailleDisplay::BrailleRightControls => 526,
            BrailleDisplay::BrailleTopControls => 527,
            BrailleDisplay::BrailleJoystickCenter => 528,
            BrailleDisplay::BrailleJoystickUp => 529,
            BrailleDisplay::BrailleJoystickDown => 530,
            BrailleDisplay::BrailleJoystickLeft => 531,
            BrailleDisplay::BrailleJoystickRight => 532,
            BrailleDisplay::BrailleDPadCenter => 533,
            BrailleDisplay::BrailleDPadUp => 534,
            BrailleDisplay::BrailleDPadDown => 535,
            BrailleDisplay::BrailleDPadLeft => 536,
            BrailleDisplay::BrailleDPadRight => 537,
            BrailleDisplay::BraillePanLeft => 538,
            BrailleDisplay::BraillePanRight => 539,
            BrailleDisplay::BrailleRockerUp => 540,
            BrailleDisplay::BrailleRockerDown => 541,
            BrailleDisplay::BrailleRockerPress => 542,
        }
    }
}

impl From<BrailleDisplay> for u16 {
    fn from(up: BrailleDisplay) -> u16 {
        u16::from(&up)
    }
}

impl From<&BrailleDisplay> for u32 {
    fn from(usage: &BrailleDisplay) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&BrailleDisplay> for UsagePage {
    fn from(_up: &BrailleDisplay) -> UsagePage {
        UsagePage::BrailleDisplay
    }
}

impl From<BrailleDisplay> for UsagePage {
    fn from(up: BrailleDisplay) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&BrailleDisplay> for Usage {
    fn from(u: &BrailleDisplay) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<BrailleDisplay> for Usage {
    fn from(u: BrailleDisplay) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for BrailleDisplay {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for LightingAndIllumination {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for LightingAndIllumination {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x59` for [LightingAndIllumination]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&LightingAndIllumination> for u16 {
    fn from(up: &LightingAndIllumination) -> u16 {
        match *up {
            LightingAndIllumination::LampArray => 1,
            LightingAndIllumination::LampArrayAttributesReport => 2,
            LightingAndIllumination::LampCount => 3,
            LightingAndIllumination::BoundingBoxWidthInMicrometers => 4,
            LightingAndIllumination::BoundingBoxHeightInMicrometers => 5,
            LightingAndIllumination::BoundingBoxDepthInMicrometers => 6,
            LightingAndIllumination::LampArrayKind => 7,
            LightingAndIllumination::MinUpdateIntervalInMicroseconds => 8,
            LightingAndIllumination::LampAttributesRequestReport => 32,
            LightingAndIllumination::LampId => 33,
            LightingAndIllumination::LampAttributesResponseReport => 34,
            LightingAndIllumination::PositionXInMicrometers => 35,
            LightingAndIllumination::PositionYInMicrometers => 36,
            LightingAndIllumination::PositionZInMicrometers => 37,
            LightingAndIllumination::LampPurposes => 38,
            LightingAndIllumination::UpdateLatencyInMicroseconds => 39,
            LightingAndIllumination::RedLevelCount => 40,
            LightingAndIllumination::GreenLevelCount => 41,
            LightingAndIllumination::BlueLevelCount => 42,
            LightingAndIllumination::IntensityLevelCount => 43,
            LightingAndIllumination::IsProgrammable => 44,
            LightingAndIllumination::InputBinding => 45,
            LightingAndIllumination::LampMultiUpdateReport => 80,
            LightingAndIllumination::RedUpdateChannel => 81,
            LightingAndIllumination::GreenUpdateChannel => 82,
            LightingAndIllumination::BlueUpdateChannel => 83,
            LightingAndIllumination::IntensityUpdateChannel => 84,
            LightingAndIllumination::LampUpdateFlags => 85,
            LightingAndIllumination::LampRangeUpdateReport => 96,
            LightingAndIllumination::LampIdStart => 97,
            LightingAndIllumination::LampIdEnd => 98,
            LightingAndIllumination::LampArrayControlReport => 112,
            LightingAndIllumination::AutonomousMode => 113,
        }
    }
}

impl From<LightingAndIllumination> for u16 {
    fn from(up: LightingAndIllumination) -> u16 {
        u16::from(&up)
    }
}

impl From<&LightingAndIllumination> for u32 {
    fn from(usage: &LightingAndIllumination) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&LightingAndIllumination> for UsagePage {
    fn from(_up: &LightingAndIllumination) -> UsagePage {
        UsagePage::LightingAndIllumination
    }
}

impl From<LightingAndIllumination> for UsagePage {
    fn from(up: LightingAndIllumination) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&LightingAndIllumination> for Usage {
    fn from(u: &LightingAndIllumination) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<LightingAndIllumination> for Usage {
    fn from(u: LightingAndIllumination) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for LightingAndIllumination {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Monitor {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Monitor {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x80` for [Monitor]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Monitor> for u16 {
    fn from(up: &Monitor) -> u16 {
        match *up {
            Monitor::MonitorControl => 1,
            Monitor::EDIDInformation => 2,
            Monitor::VDIFInformation => 3,
            Monitor::VESAVersion => 4,
        }
    }
}

impl From<Monitor> for u16 {
    fn from(up: Monitor) -> u16 {
        u16::from(&up)
    }
}

impl From<&Monitor> for u32 {
    fn from(usage: &Monitor) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Monitor> for UsagePage {
    fn from(_up: &Monitor) -> UsagePage {
        UsagePage::Monitor
    }
}

impl From<Monitor> for UsagePage {
    fn from(up: Monitor) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Monitor> for Usage {
    fn from(u: &Monitor) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Monitor> for Usage {
    fn from(u: Monitor) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Monitor {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for MonitorEnumerated {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for MonitorEnumerated {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x81` for [MonitorEnumerated]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&MonitorEnumerated> for u16 {
    fn from(up: &MonitorEnumerated) -> u16 {
        match *up {
            MonitorEnumerated::MonitorEnumerated { enumerate } => enumerate,
        }
    }
}

impl From<MonitorEnumerated> for u16 {
    fn from(up: MonitorEnumerated) -> u16 {
        u16::from(&up)
    }
}

impl From<&MonitorEnumerated> for u32 {
    fn from(usage: &MonitorEnumerated) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&MonitorEnumerated> for UsagePage {
    fn from(_up: &MonitorEnumerated) -> UsagePage {
        UsagePage::MonitorEnumerated
    }
}

impl From<MonitorEnumerated> for UsagePage {
    fn from(up: MonitorEnumerated) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&MonitorEnumerated> for Usage {
    fn from(u: &MonitorEnumerated) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<MonitorEnumerated> for Usage {
    fn from(u: MonitorEnumerated) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for MonitorEnumerated {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for VESAVirtualControls {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for VESAVirtualControls {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x82` for [VESAVirtualControls]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&VESAVirtualControls> for u16 {
    fn from(up: &VESAVirtualControls) -> u16 {
        match *up {
            VESAVirtualControls::Degauss => 1,
            VESAVirtualControls::Brightness => 16,
            VESAVirtualControls::Contrast => 18,
            VESAVirtualControls::RedVideoGain => 22,
            VESAVirtualControls::GreenVideoGain => 24,
            VESAVirtualControls::BlueVideoGain => 26,
            VESAVirtualControls::Focus => 28,
            VESAVirtualControls::HorizontalPosition => 32,
            VESAVirtualControls::HorizontalSize => 34,
            VESAVirtualControls::HorizontalPincushion => 36,
            VESAVirtualControls::HorizontalPincushionBalance => 38,
            VESAVirtualControls::HorizontalMisconvergence => 40,
            VESAVirtualControls::HorizontalLinearity => 42,
            VESAVirtualControls::HorizontalLinearityBalance => 44,
            VESAVirtualControls::VerticalPosition => 48,
            VESAVirtualControls::VerticalSize => 50,
            VESAVirtualControls::VerticalPincushion => 52,
            VESAVirtualControls::VerticalPincushionBalance => 54,
            VESAVirtualControls::VerticalMisconvergence => 56,
            VESAVirtualControls::VerticalLinearity => 58,
            VESAVirtualControls::VerticalLinearityBalance => 60,
            VESAVirtualControls::ParallelogramDistortionKeyBalance => 64,
            VESAVirtualControls::TrapezoidalDistortionKey => 66,
            VESAVirtualControls::TiltRotation => 68,
            VESAVirtualControls::TopCornerDistortionControl => 70,
            VESAVirtualControls::TopCornerDistortionBalance => 72,
            VESAVirtualControls::BottomCornerDistortionControl => 74,
            VESAVirtualControls::BottomCornerDistortionBalance => 76,
            VESAVirtualControls::HorizontalMoiré => 86,
            VESAVirtualControls::VerticalMoiré => 88,
            VESAVirtualControls::InputLevelSelect => 94,
            VESAVirtualControls::InputSourceSelect => 96,
            VESAVirtualControls::RedVideoBlackLevel => 108,
            VESAVirtualControls::GreenVideoBlackLevel => 110,
            VESAVirtualControls::BlueVideoBlackLevel => 112,
            VESAVirtualControls::AutoSizeCenter => 162,
            VESAVirtualControls::PolarityHorizontalSynchronization => 164,
            VESAVirtualControls::PolarityVerticalSynchronization => 166,
            VESAVirtualControls::SynchronizationType => 168,
            VESAVirtualControls::ScreenOrientation => 170,
            VESAVirtualControls::HorizontalFrequency => 172,
            VESAVirtualControls::VerticalFrequency => 174,
            VESAVirtualControls::Settings => 176,
            VESAVirtualControls::OnScreenDisplay => 202,
            VESAVirtualControls::StereoMode => 212,
        }
    }
}

impl From<VESAVirtualControls> for u16 {
    fn from(up: VESAVirtualControls) -> u16 {
        u16::from(&up)
    }
}

impl From<&VESAVirtualControls> for u32 {
    fn from(usage: &VESAVirtualControls) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&VESAVirtualControls> for UsagePage {
    fn from(_up: &VESAVirtualControls) -> UsagePage {
        UsagePage::VESAVirtualControls
    }
}

impl From<VESAVirtualControls> for UsagePage {
    fn from(up: VESAVirtualControls) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&VESAVirtualControls> for Usage {
    fn from(u: &VESAVirtualControls) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<VESAVirtualControls> for Usage {
    fn from(u: VESAVirtualControls) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for VESAVirtualControls {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Power {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Power {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x84` for [Power]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Power> for u16 {
    fn from(up: &Power) -> u16 {
        match *up {
            Power::iName => 1,
            Power::PresentStatus => 2,
            Power::ChangedStatus => 3,
            Power::UPS => 4,
            Power::PowerSupply => 5,
            Power::BatterySystem => 16,
            Power::BatterySystemId => 17,
            Power::Battery => 18,
            Power::BatteryId => 19,
            Power::Charger => 20,
            Power::ChargerId => 21,
            Power::PowerConverter => 22,
            Power::PowerConverterId => 23,
            Power::OutletSystem => 24,
            Power::OutletSystemId => 25,
            Power::Input => 26,
            Power::InputId => 27,
            Power::Output => 28,
            Power::OutputId => 29,
            Power::Flow => 30,
            Power::FlowId => 31,
            Power::Outlet => 32,
            Power::OutletId => 33,
            Power::Gang => 34,
            Power::GangId => 35,
            Power::PowerSummary => 36,
            Power::PowerSummaryId => 37,
            Power::Voltage => 48,
            Power::Current => 49,
            Power::Frequency => 50,
            Power::ApparentPower => 51,
            Power::ActivePower => 52,
            Power::PercentLoad => 53,
            Power::Temperature => 54,
            Power::Humidity => 55,
            Power::BadCount => 56,
            Power::ConfigVoltage => 64,
            Power::ConfigCurrent => 65,
            Power::ConfigFrequency => 66,
            Power::ConfigApparentPower => 67,
            Power::ConfigActivePower => 68,
            Power::ConfigPercentLoad => 69,
            Power::ConfigTemperature => 70,
            Power::ConfigHumidity => 71,
            Power::SwitchOnControl => 80,
            Power::SwitchOffControl => 81,
            Power::ToggleControl => 82,
            Power::LowVoltageTransfer => 83,
            Power::HighVoltageTransfer => 84,
            Power::DelayBeforeReboot => 85,
            Power::DelayBeforeStartup => 86,
            Power::DelayBeforeShutdown => 87,
            Power::Test => 88,
            Power::ModuleReset => 89,
            Power::AudibleAlarmControl => 90,
            Power::Present => 96,
            Power::Good => 97,
            Power::InternalFailure => 98,
            Power::VoltagOutOfRange => 99,
            Power::FrequencyOutOfRange => 100,
            Power::Overload => 101,
            Power::OverCharged => 102,
            Power::OverTemperature => 103,
            Power::ShutdownRequested => 104,
            Power::ShutdownImminent => 105,
            Power::SwitchOnOff => 107,
            Power::Switchable => 108,
            Power::Used => 109,
            Power::Boost => 110,
            Power::Buck => 111,
            Power::Initialized => 112,
            Power::Tested => 113,
            Power::AwaitingPower => 114,
            Power::CommunicationLost => 115,
            Power::iManufacturer => 253,
            Power::iProduct => 254,
            Power::iSerialNumber => 255,
        }
    }
}

impl From<Power> for u16 {
    fn from(up: Power) -> u16 {
        u16::from(&up)
    }
}

impl From<&Power> for u32 {
    fn from(usage: &Power) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Power> for UsagePage {
    fn from(_up: &Power) -> UsagePage {
        UsagePage::Power
    }
}

impl From<Power> for UsagePage {
    fn from(up: Power) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Power> for Usage {
    fn from(u: &Power) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Power> for Usage {
    fn from(u: Power) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Power {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for BatterySystem {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for BatterySystem {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x85` for [BatterySystem]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&BatterySystem> for u16 {
    fn from(up: &BatterySystem) -> u16 {
        match *up {
            BatterySystem::SmartBatteryBatteryMode => 1,
            BatterySystem::SmartBatteryBatteryStatus => 2,
            BatterySystem::SmartBatteryAlarmWarning => 3,
            BatterySystem::SmartBatteryChargerMode => 4,
            BatterySystem::SmartBatteryChargerStatus => 5,
            BatterySystem::SmartBatteryChargerSpecInfo => 6,
            BatterySystem::SmartBatterySelectorState => 7,
            BatterySystem::SmartBatterySelectorPresets => 8,
            BatterySystem::SmartBatterySelectorInfo => 9,
            BatterySystem::OptionalMfgFunction1 => 16,
            BatterySystem::OptionalMfgFunction2 => 17,
            BatterySystem::OptionalMfgFunction3 => 18,
            BatterySystem::OptionalMfgFunction4 => 19,
            BatterySystem::OptionalMfgFunction5 => 20,
            BatterySystem::ConnectionToSMBus => 21,
            BatterySystem::OutputConnection => 22,
            BatterySystem::ChargerConnection => 23,
            BatterySystem::BatteryInsertion => 24,
            BatterySystem::UseNext => 25,
            BatterySystem::OKToUse => 26,
            BatterySystem::BatterySupported => 27,
            BatterySystem::SelectorRevision => 28,
            BatterySystem::ChargingIndicator => 29,
            BatterySystem::ManufacturerAccess => 40,
            BatterySystem::RemainingCapacityLimit => 41,
            BatterySystem::RemainingTimeLimit => 42,
            BatterySystem::AtRate => 43,
            BatterySystem::CapacityMode => 44,
            BatterySystem::BroadcastToCharger => 45,
            BatterySystem::PrimaryBattery => 46,
            BatterySystem::ChargeController => 47,
            BatterySystem::TerminateCharge => 64,
            BatterySystem::TerminateDischarge => 65,
            BatterySystem::BelowRemainingCapacityLimit => 66,
            BatterySystem::RemainingTimeLimitExpired => 67,
            BatterySystem::Charging => 68,
            BatterySystem::Discharging => 69,
            BatterySystem::FullyCharged => 70,
            BatterySystem::FullyDischarged => 71,
            BatterySystem::ConditioningFlag => 72,
            BatterySystem::AtRateOK => 73,
            BatterySystem::SmartBatteryErrorCode => 74,
            BatterySystem::NeedReplacement => 75,
            BatterySystem::AtRateTimeToFull => 96,
            BatterySystem::AtRateTimeToEmpty => 97,
            BatterySystem::AverageCurrent => 98,
            BatterySystem::MaxError => 99,
            BatterySystem::RelativeStateOfCharge => 100,
            BatterySystem::AbsoluteStateOfCharge => 101,
            BatterySystem::RemainingCapacity => 102,
            BatterySystem::FullChargeCapacity => 103,
            BatterySystem::RunTimeToEmpty => 104,
            BatterySystem::AverageTimeToEmpty => 105,
            BatterySystem::AverageTimeToFull => 106,
            BatterySystem::CycleCount => 107,
            BatterySystem::BatteryPackModelLevel => 128,
            BatterySystem::InternalChargeController => 129,
            BatterySystem::PrimaryBatterySupport => 130,
            BatterySystem::DesignCapacity => 131,
            BatterySystem::SpecificationInfo => 132,
            BatterySystem::ManufactureDate => 133,
            BatterySystem::SerialNumber => 134,
            BatterySystem::iManufacturerName => 135,
            BatterySystem::iDeviceName => 136,
            BatterySystem::iDeviceChemistry => 137,
            BatterySystem::ManufacturerData => 138,
            BatterySystem::Rechargable => 139,
            BatterySystem::WarningCapacityLimit => 140,
            BatterySystem::CapacityGranularity1 => 141,
            BatterySystem::CapacityGranularity2 => 142,
            BatterySystem::iOEMInformation => 143,
            BatterySystem::InhibitCharge => 192,
            BatterySystem::EnablePolling => 193,
            BatterySystem::ResetToZero => 194,
            BatterySystem::ACPresent => 208,
            BatterySystem::BatteryPresent => 209,
            BatterySystem::PowerFail => 210,
            BatterySystem::AlarmInhibited => 211,
            BatterySystem::ThermistorUnderRange => 212,
            BatterySystem::ThermistorHot => 213,
            BatterySystem::ThermistorCold => 214,
            BatterySystem::ThermistorOverRange => 215,
            BatterySystem::VoltageOutOfRange => 216,
            BatterySystem::CurrentOutOfRange => 217,
            BatterySystem::CurrentNotRegulated => 218,
            BatterySystem::VoltageNotRegulated => 219,
            BatterySystem::MasterMode => 220,
            BatterySystem::ChargerSelectorSupport => 240,
            BatterySystem::ChargerSpec => 241,
            BatterySystem::Level2 => 242,
            BatterySystem::Level3 => 243,
        }
    }
}

impl From<BatterySystem> for u16 {
    fn from(up: BatterySystem) -> u16 {
        u16::from(&up)
    }
}

impl From<&BatterySystem> for u32 {
    fn from(usage: &BatterySystem) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&BatterySystem> for UsagePage {
    fn from(_up: &BatterySystem) -> UsagePage {
        UsagePage::BatterySystem
    }
}

impl From<BatterySystem> for UsagePage {
    fn from(up: BatterySystem) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&BatterySystem> for Usage {
    fn from(u: &BatterySystem) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<BatterySystem> for Usage {
    fn from(u: BatterySystem) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for BatterySystem {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for BarcodeScanner {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for BarcodeScanner {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x8C` for [BarcodeScanner]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&BarcodeScanner> for u16 {
    fn from(up: &BarcodeScanner) -> u16 {
        match *up {
            BarcodeScanner::BarcodeBadgeReader => 1,
            BarcodeScanner::BarcodeScanner => 2,
            BarcodeScanner::DumbBarCodeScanner => 3,
            BarcodeScanner::CordlessScannerBase => 4,
            BarcodeScanner::BarCodeScannerCradle => 5,
            BarcodeScanner::AttributeReport => 16,
            BarcodeScanner::SettingsReport => 17,
            BarcodeScanner::ScannedDataReport => 18,
            BarcodeScanner::RawScannedDataReport => 19,
            BarcodeScanner::TriggerReport => 20,
            BarcodeScanner::StatusReport => 21,
            BarcodeScanner::UPCEANControlReport => 22,
            BarcodeScanner::EAN23LabelControlReport => 23,
            BarcodeScanner::Code39ControlReport => 24,
            BarcodeScanner::Interleaved2of5ControlReport => 25,
            BarcodeScanner::Standard2of5ControlReport => 26,
            BarcodeScanner::MSIPlesseyControlReport => 27,
            BarcodeScanner::CodabarControlReport => 28,
            BarcodeScanner::Code128ControlReport => 29,
            BarcodeScanner::Misc1DControlReport => 30,
            BarcodeScanner::TwoDControlReport => 31,
            BarcodeScanner::AimingPointerMode => 48,
            BarcodeScanner::BarCodePresentSensor => 49,
            BarcodeScanner::Class1ALaser => 50,
            BarcodeScanner::Class2Laser => 51,
            BarcodeScanner::HeaterPresent => 52,
            BarcodeScanner::ContactScanner => 53,
            BarcodeScanner::ElectronicArticleSurveillanceNotification => 54,
            BarcodeScanner::ConstantElectronicArticleSurveillance => 55,
            BarcodeScanner::ErrorIndication => 56,
            BarcodeScanner::FixedBeeper => 57,
            BarcodeScanner::GoodDecodeIndication => 58,
            BarcodeScanner::HandsFreeScanning => 59,
            BarcodeScanner::IntrinsicallySafe => 60,
            BarcodeScanner::KlasseEinsLaser => 61,
            BarcodeScanner::LongRangeScanner => 62,
            BarcodeScanner::MirrorSpeedControl => 63,
            BarcodeScanner::NotOnFileIndication => 64,
            BarcodeScanner::ProgrammableBeeper => 65,
            BarcodeScanner::Triggerless => 66,
            BarcodeScanner::Wand => 67,
            BarcodeScanner::WaterResistant => 68,
            BarcodeScanner::MultiRangeScanner => 69,
            BarcodeScanner::ProximitySensor => 70,
            BarcodeScanner::FragmentDecoding => 77,
            BarcodeScanner::ScannerReadConfidence => 78,
            BarcodeScanner::DataPrefix => 79,
            BarcodeScanner::PrefixAIMI => 80,
            BarcodeScanner::PrefixNone => 81,
            BarcodeScanner::PrefixProprietary => 82,
            BarcodeScanner::ActiveTime => 85,
            BarcodeScanner::AimingLaserPattern => 86,
            BarcodeScanner::BarCodePresent => 87,
            BarcodeScanner::BeeperState => 88,
            BarcodeScanner::LaserOnTime => 89,
            BarcodeScanner::LaserState => 90,
            BarcodeScanner::LockoutTime => 91,
            BarcodeScanner::MotorState => 92,
            BarcodeScanner::MotorTimeout => 93,
            BarcodeScanner::PowerOnResetScanner => 94,
            BarcodeScanner::PreventReadofBarcodes => 95,
            BarcodeScanner::InitiateBarcodeRead => 96,
            BarcodeScanner::TriggerState => 97,
            BarcodeScanner::TriggerMode => 98,
            BarcodeScanner::TriggerModeBlinkingLaserOn => 99,
            BarcodeScanner::TriggerModeContinuousLaserOn => 100,
            BarcodeScanner::TriggerModeLaseronwhilePulled => 101,
            BarcodeScanner::TriggerModeLaserstaysonafterrelease => 102,
            BarcodeScanner::CommitParameterstoNVM => 109,
            BarcodeScanner::ParameterScanning => 110,
            BarcodeScanner::ParametersChanged => 111,
            BarcodeScanner::Setparameterdefaultvalues => 112,
            BarcodeScanner::ScannerInCradle => 117,
            BarcodeScanner::ScannerInRange => 118,
            BarcodeScanner::AimDuration => 122,
            BarcodeScanner::GoodReadLampDuration => 123,
            BarcodeScanner::GoodReadLampIntensity => 124,
            BarcodeScanner::GoodReadLED => 125,
            BarcodeScanner::GoodReadToneFrequency => 126,
            BarcodeScanner::GoodReadToneLength => 127,
            BarcodeScanner::GoodReadToneVolume => 128,
            BarcodeScanner::NoReadMessage => 130,
            BarcodeScanner::NotonFileVolume => 131,
            BarcodeScanner::PowerupBeep => 132,
            BarcodeScanner::SoundErrorBeep => 133,
            BarcodeScanner::SoundGoodReadBeep => 134,
            BarcodeScanner::SoundNotOnFileBeep => 135,
            BarcodeScanner::GoodReadWhentoWrite => 136,
            BarcodeScanner::GRWTIAfterDecode => 137,
            BarcodeScanner::GRWTIBeepLampaftertransmit => 138,
            BarcodeScanner::GRWTINoBeepLampuseatall => 139,
            BarcodeScanner::BooklandEAN => 145,
            BarcodeScanner::ConvertEAN8to13Type => 146,
            BarcodeScanner::ConvertUPCAtoEAN13 => 147,
            BarcodeScanner::ConvertUPCEtoA => 148,
            BarcodeScanner::EAN13 => 149,
            BarcodeScanner::EAN8 => 150,
            BarcodeScanner::EAN99128Mandatory => 151,
            BarcodeScanner::EAN99P5128Optional => 152,
            BarcodeScanner::EnableEANTwoLabel => 153,
            BarcodeScanner::UPCEAN => 154,
            BarcodeScanner::UPCEANCouponCode => 155,
            BarcodeScanner::UPCEANPeriodicals => 156,
            BarcodeScanner::UPCA => 157,
            BarcodeScanner::UPCAwith128Mandatory => 158,
            BarcodeScanner::UPCAwith128Optional => 159,
            BarcodeScanner::UPCAwithP5Optional => 160,
            BarcodeScanner::UPCE => 161,
            BarcodeScanner::UPCE1 => 162,
            BarcodeScanner::Periodical => 169,
            BarcodeScanner::PeriodicalAutoDiscriminatePlus2 => 170,
            BarcodeScanner::PeriodicalOnlyDecodewithPlus2 => 171,
            BarcodeScanner::PeriodicalIgnorePlus2 => 172,
            BarcodeScanner::PeriodicalAutoDiscriminatePlus5 => 173,
            BarcodeScanner::PeriodicalOnlyDecodewithPlus5 => 174,
            BarcodeScanner::PeriodicalIgnorePlus5 => 175,
            BarcodeScanner::Check => 176,
            BarcodeScanner::CheckDisablePrice => 177,
            BarcodeScanner::CheckEnable4digitPrice => 178,
            BarcodeScanner::CheckEnable5digitPrice => 179,
            BarcodeScanner::CheckEnableEuropean4digitPrice => 180,
            BarcodeScanner::CheckEnableEuropean5digitPrice => 181,
            BarcodeScanner::EANTwoLabel => 183,
            BarcodeScanner::EANThreeLabel => 184,
            BarcodeScanner::EAN8FlagDigit1 => 185,
            BarcodeScanner::EAN8FlagDigit2 => 186,
            BarcodeScanner::EAN8FlagDigit3 => 187,
            BarcodeScanner::EAN13FlagDigit1 => 188,
            BarcodeScanner::EAN13FlagDigit2 => 189,
            BarcodeScanner::EAN13FlagDigit3 => 190,
            BarcodeScanner::AddEAN23LabelDefinition => 191,
            BarcodeScanner::ClearallEAN23LabelDefinitions => 192,
            BarcodeScanner::Codabar => 195,
            BarcodeScanner::Code128 => 196,
            BarcodeScanner::Code39 => 199,
            BarcodeScanner::Code93 => 200,
            BarcodeScanner::FullASCIIConversion => 201,
            BarcodeScanner::Interleaved2of5 => 202,
            BarcodeScanner::ItalianPharmacyCode => 203,
            BarcodeScanner::MSIPlessey => 204,
            BarcodeScanner::Standard2of5IATA => 205,
            BarcodeScanner::Standard2of5 => 206,
            BarcodeScanner::TransmitStartStop => 211,
            BarcodeScanner::TriOptic => 212,
            BarcodeScanner::UCCEAN128 => 213,
            BarcodeScanner::CheckDigit => 214,
            BarcodeScanner::CheckDigitDisable => 215,
            BarcodeScanner::CheckDigitEnableInterleaved2of5OPCC => 216,
            BarcodeScanner::CheckDigitEnableInterleaved2of5USS => 217,
            BarcodeScanner::CheckDigitEnableStandard2of5OPCC => 218,
            BarcodeScanner::CheckDigitEnableStandard2of5USS => 219,
            BarcodeScanner::CheckDigitEnableOneMSIPlessey => 220,
            BarcodeScanner::CheckDigitEnableTwoMSIPlessey => 221,
            BarcodeScanner::CheckDigitCodabarEnable => 222,
            BarcodeScanner::CheckDigitCode39Enable => 223,
            BarcodeScanner::TransmitCheckDigit => 240,
            BarcodeScanner::DisableCheckDigitTransmit => 241,
            BarcodeScanner::EnableCheckDigitTransmit => 242,
            BarcodeScanner::SymbologyIdentifier1 => 251,
            BarcodeScanner::SymbologyIdentifier2 => 252,
            BarcodeScanner::SymbologyIdentifier3 => 253,
            BarcodeScanner::DecodedData => 254,
            BarcodeScanner::DecodeDataContinued => 255,
            BarcodeScanner::BarSpaceData => 256,
            BarcodeScanner::ScannerDataAccuracy => 257,
            BarcodeScanner::RawDataPolarity => 258,
            BarcodeScanner::PolarityInvertedBarCode => 259,
            BarcodeScanner::PolarityNormalBarCode => 260,
            BarcodeScanner::MinimumLengthtoDecode => 262,
            BarcodeScanner::MaximumLengthtoDecode => 263,
            BarcodeScanner::DiscreteLengthtoDecode1 => 264,
            BarcodeScanner::DiscreteLengthtoDecode2 => 265,
            BarcodeScanner::DataLengthMethod => 266,
            BarcodeScanner::DLMethodReadany => 267,
            BarcodeScanner::DLMethodCheckinRange => 268,
            BarcodeScanner::DLMethodCheckforDiscrete => 269,
            BarcodeScanner::AztecCode => 272,
            BarcodeScanner::BC412 => 273,
            BarcodeScanner::ChannelCode => 274,
            BarcodeScanner::Code16 => 275,
            BarcodeScanner::Code32 => 276,
            BarcodeScanner::Code49 => 277,
            BarcodeScanner::CodeOne => 278,
            BarcodeScanner::Colorcode => 279,
            BarcodeScanner::DataMatrix => 280,
            BarcodeScanner::MaxiCode => 281,
            BarcodeScanner::MicroPDF => 282,
            BarcodeScanner::PDF417 => 283,
            BarcodeScanner::PosiCode => 284,
            BarcodeScanner::QRCode => 285,
            BarcodeScanner::SuperCode => 286,
            BarcodeScanner::UltraCode => 287,
            BarcodeScanner::USD5SlugCode => 288,
            BarcodeScanner::VeriCode => 289,
        }
    }
}

impl From<BarcodeScanner> for u16 {
    fn from(up: BarcodeScanner) -> u16 {
        u16::from(&up)
    }
}

impl From<&BarcodeScanner> for u32 {
    fn from(usage: &BarcodeScanner) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&BarcodeScanner> for UsagePage {
    fn from(_up: &BarcodeScanner) -> UsagePage {
        UsagePage::BarcodeScanner
    }
}

impl From<BarcodeScanner> for UsagePage {
    fn from(up: BarcodeScanner) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&BarcodeScanner> for Usage {
    fn from(u: &BarcodeScanner) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<BarcodeScanner> for Usage {
    fn from(u: BarcodeScanner) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for BarcodeScanner {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Scales {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Scales {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x8D` for [Scales]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Scales> for u16 {
    fn from(up: &Scales) -> u16 {
        match *up {
            Scales::Scales => 1,
            Scales::ScaleDevice => 32,
            Scales::ScaleClass => 33,
            Scales::ScaleClassIMetric => 34,
            Scales::ScaleClassIIMetric => 35,
            Scales::ScaleClassIIIMetric => 36,
            Scales::ScaleClassIIILMetric => 37,
            Scales::ScaleClassIVMetric => 38,
            Scales::ScaleClassIIIEnglish => 39,
            Scales::ScaleClassIIILEnglish => 40,
            Scales::ScaleClassIVEnglish => 41,
            Scales::ScaleClassGeneric => 42,
            Scales::ScaleAttributeReport => 48,
            Scales::ScaleControlReport => 49,
            Scales::ScaleDataReport => 50,
            Scales::ScaleStatusReport => 51,
            Scales::ScaleWeightLimitReport => 52,
            Scales::ScaleStatisticsReport => 53,
            Scales::DataWeight => 64,
            Scales::DataScaling => 65,
            Scales::WeightUnit => 80,
            Scales::WeightUnitMilligram => 81,
            Scales::WeightUnitGram => 82,
            Scales::WeightUnitKilogram => 83,
            Scales::WeightUnitCarats => 84,
            Scales::WeightUnitTaels => 85,
            Scales::WeightUnitGrains => 86,
            Scales::WeightUnitPennyweights => 87,
            Scales::WeightUnitMetricTon => 88,
            Scales::WeightUnitAvoirTon => 89,
            Scales::WeightUnitTroyOunce => 90,
            Scales::WeightUnitOunce => 91,
            Scales::WeightUnitPound => 92,
            Scales::CalibrationCount => 96,
            Scales::ReZeroCount => 97,
            Scales::ScaleStatus => 112,
            Scales::ScaleStatusFault => 113,
            Scales::ScaleStatusStableatCenterofZero => 114,
            Scales::ScaleStatusInMotion => 115,
            Scales::ScaleStatusWeightStable => 116,
            Scales::ScaleStatusUnderZero => 117,
            Scales::ScaleStatusOverWeightLimit => 118,
            Scales::ScaleStatusRequiresCalibration => 119,
            Scales::ScaleStatusRequiresRezeroing => 120,
            Scales::ZeroScale => 128,
            Scales::EnforcedZeroReturn => 129,
        }
    }
}

impl From<Scales> for u16 {
    fn from(up: Scales) -> u16 {
        u16::from(&up)
    }
}

impl From<&Scales> for u32 {
    fn from(usage: &Scales) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Scales> for UsagePage {
    fn from(_up: &Scales) -> UsagePage {
        UsagePage::Scales
    }
}

impl From<Scales> for UsagePage {
    fn from(up: Scales) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Scales> for Usage {
    fn from(u: &Scales) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Scales> for Usage {
    fn from(u: Scales) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Scales {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for MagneticStripeReader {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for MagneticStripeReader {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x8E` for [MagneticStripeReader]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&MagneticStripeReader> for u16 {
    fn from(up: &MagneticStripeReader) -> u16 {
        match *up {
            MagneticStripeReader::MSRDeviceReadOnly => 1,
            MagneticStripeReader::Track1Length => 17,
            MagneticStripeReader::Track2Length => 18,
            MagneticStripeReader::Track3Length => 19,
            MagneticStripeReader::TrackJISLength => 20,
            MagneticStripeReader::TrackData => 32,
            MagneticStripeReader::Track1Data => 33,
            MagneticStripeReader::Track2Data => 34,
            MagneticStripeReader::Track3Data => 35,
            MagneticStripeReader::TrackJISData => 36,
        }
    }
}

impl From<MagneticStripeReader> for u16 {
    fn from(up: MagneticStripeReader) -> u16 {
        u16::from(&up)
    }
}

impl From<&MagneticStripeReader> for u32 {
    fn from(usage: &MagneticStripeReader) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&MagneticStripeReader> for UsagePage {
    fn from(_up: &MagneticStripeReader) -> UsagePage {
        UsagePage::MagneticStripeReader
    }
}

impl From<MagneticStripeReader> for UsagePage {
    fn from(up: MagneticStripeReader) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&MagneticStripeReader> for Usage {
    fn from(u: &MagneticStripeReader) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<MagneticStripeReader> for Usage {
    fn from(u: MagneticStripeReader) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for MagneticStripeReader {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for CameraControl {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for CameraControl {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x90` for [CameraControl]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&CameraControl> for u16 {
    fn from(up: &CameraControl) -> u16 {
        match *up {
            CameraControl::CameraAutofocus => 32,
            CameraControl::CameraShutter => 33,
        }
    }
}

impl From<CameraControl> for u16 {
    fn from(up: CameraControl) -> u16 {
        u16::from(&up)
    }
}

impl From<&CameraControl> for u32 {
    fn from(usage: &CameraControl) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&CameraControl> for UsagePage {
    fn from(_up: &CameraControl) -> UsagePage {
        UsagePage::CameraControl
    }
}

impl From<CameraControl> for UsagePage {
    fn from(up: CameraControl) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&CameraControl> for Usage {
    fn from(u: &CameraControl) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<CameraControl> for Usage {
    fn from(u: CameraControl) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for CameraControl {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for Arcade {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for Arcade {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0x91` for [Arcade]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&Arcade> for u16 {
    fn from(up: &Arcade) -> u16 {
        match *up {
            Arcade::GeneralPurposeIOCard => 1,
            Arcade::CoinDoor => 2,
            Arcade::WatchdogTimer => 3,
            Arcade::GeneralPurposeAnalogInputState => 48,
            Arcade::GeneralPurposeDigitalInputState => 49,
            Arcade::GeneralPurposeOpticalInputState => 50,
            Arcade::GeneralPurposeDigitalOutputState => 51,
            Arcade::NumberofCoinDoors => 52,
            Arcade::CoinDrawerDropCount => 53,
            Arcade::CoinDrawerStart => 54,
            Arcade::CoinDrawerService => 55,
            Arcade::CoinDrawerTilt => 56,
            Arcade::CoinDoorTest => 57,
            Arcade::CoinDoorLockout => 64,
            Arcade::WatchdogTimeout => 65,
            Arcade::WatchdogAction => 66,
            Arcade::WatchdogReboot => 67,
            Arcade::WatchdogRestart => 68,
            Arcade::AlarmInput => 69,
            Arcade::CoinDoorCounter => 70,
            Arcade::IODirectionMapping => 71,
            Arcade::SetIODirectionMapping => 72,
            Arcade::ExtendedOpticalInputState => 73,
            Arcade::PinPadInputState => 74,
            Arcade::PinPadStatus => 75,
            Arcade::PinPadOutput => 76,
            Arcade::PinPadCommand => 77,
        }
    }
}

impl From<Arcade> for u16 {
    fn from(up: Arcade) -> u16 {
        u16::from(&up)
    }
}

impl From<&Arcade> for u32 {
    fn from(usage: &Arcade) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&Arcade> for UsagePage {
    fn from(_up: &Arcade) -> UsagePage {
        UsagePage::Arcade
    }
}

impl From<Arcade> for UsagePage {
    fn from(up: Arcade) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&Arcade> for Usage {
    fn from(u: &Arcade) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<Arcade> for Usage {
    fn from(u: Arcade) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for Arcade {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}

impl AsUsage for FIDOAlliance {
    /// Returns the 32 bit Usage value of this Usage
    fn usage_value(&self) -> u32 {
        u32::from(self)
    }

    /// Returns the 16 bit Usage ID value of this Usage
    fn usage_id_value(&self) -> u16 {
        u16::from(self)
    }
}

impl AsUsagePage for FIDOAlliance {
    /// Returns the 16 bit value of this UsagePage
    ///
    /// This value is `0xF1D0` for [FIDOAlliance]
    fn usage_page_value(&self) -> u16 {
        let up = UsagePage::from(self);
        u16::from(up)
    }
}

impl From<&FIDOAlliance> for u16 {
    fn from(up: &FIDOAlliance) -> u16 {
        match *up {
            FIDOAlliance::U2FAuthenticatorDevice => 1,
            FIDOAlliance::InputReportData => 32,
            FIDOAlliance::OutputReportData => 33,
        }
    }
}

impl From<FIDOAlliance> for u16 {
    fn from(up: FIDOAlliance) -> u16 {
        u16::from(&up)
    }
}

impl From<&FIDOAlliance> for u32 {
    fn from(usage: &FIDOAlliance) -> u32 {
        let up = UsagePage::from(usage);
        let up = (u16::from(&up) as u32) << 16;
        let id = u16::from(usage) as u32;
        up | id
    }
}

impl From<&FIDOAlliance> for UsagePage {
    fn from(_up: &FIDOAlliance) -> UsagePage {
        UsagePage::FIDOAlliance
    }
}

impl From<FIDOAlliance> for UsagePage {
    fn from(up: FIDOAlliance) -> UsagePage {
        UsagePage::from(&up)
    }
}

impl From<&FIDOAlliance> for Usage {
    fn from(u: &FIDOAlliance) -> Usage {
        Usage::try_from(u32::from(u)).unwrap()
      }
}

impl From<FIDOAlliance> for Usage {
    fn from(u: FIDOAlliance) -> Usage {
        Usage::from(&u)
      }
}

impl BitOr<u16> for FIDOAlliance {
    type Output = Usage;

    /// A convenience function to combine a Usage Page with
    /// a value.
    ///
    /// This function panics if the Usage ID value results in
    /// an unknown Usage. Where error checking is required,
    /// use [UsagePage::to_usage].
    fn bitor(self, usage: u16) -> Usage {
        let up = u16::from(self) as u32;
        let u = usage as u32;
        Usage::try_from(up | u).expect("Invalid Usage ID for this Usage Page")
    }
}



/// *Usage Page `0xFF00` to `0xFFFF`: The Vendor Defined Pages*
///
/// This Usage Page has no named Usage IDs, any Usages in this Usage Page are
/// private to a vendor implementation.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum VendorDefinedPage {
    Undefined,
    VendorUsage { usage_id: u16 },
}

impl fmt::Display for VendorDefinedPage {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            VendorDefinedPage::Undefined => "Vendor Usage Undefined".to_string(),
            VendorDefinedPage::VendorUsage { usage_id } => {
                format!("Vendor Usage 0x{usage_id:02x}")
            }
        };
        write!(f, "{name}")
    }
}

impl From<&Usage> for UsagePage {
    fn from(usage: &Usage) -> UsagePage {
        match usage {
            Usage::GenericDesktop { .. } => UsagePage::GenericDesktop,
            Usage::SimulationControls { .. } => UsagePage::SimulationControls,
            Usage::VRControls { .. } => UsagePage::VRControls,
            Usage::SportControls { .. } => UsagePage::SportControls,
            Usage::GameControls { .. } => UsagePage::GameControls,
            Usage::GenericDeviceControls { .. } => UsagePage::GenericDeviceControls,
            Usage::KeyboardKeypad { .. } => UsagePage::KeyboardKeypad,
            Usage::LED { .. } => UsagePage::LED,
            Usage::Button { .. } => UsagePage::Button,
            Usage::Ordinal { .. } => UsagePage::Ordinal,
            Usage::TelephonyDevice { .. } => UsagePage::TelephonyDevice,
            Usage::Consumer { .. } => UsagePage::Consumer,
            Usage::Digitizers { .. } => UsagePage::Digitizers,
            Usage::Haptics { .. } => UsagePage::Haptics,
            Usage::PhysicalInputDevice { .. } => UsagePage::PhysicalInputDevice,
            Usage::Unicode { .. } => UsagePage::Unicode,
            Usage::SoC { .. } => UsagePage::SoC,
            Usage::EyeandHeadTrackers { .. } => UsagePage::EyeandHeadTrackers,
            Usage::AuxiliaryDisplay { .. } => UsagePage::AuxiliaryDisplay,
            Usage::Sensors { .. } => UsagePage::Sensors,
            Usage::MedicalInstrument { .. } => UsagePage::MedicalInstrument,
            Usage::BrailleDisplay { .. } => UsagePage::BrailleDisplay,
            Usage::LightingAndIllumination { .. } => UsagePage::LightingAndIllumination,
            Usage::Monitor { .. } => UsagePage::Monitor,
            Usage::MonitorEnumerated { .. } => UsagePage::MonitorEnumerated,
            Usage::VESAVirtualControls { .. } => UsagePage::VESAVirtualControls,
            Usage::Power { .. } => UsagePage::Power,
            Usage::BatterySystem { .. } => UsagePage::BatterySystem,
            Usage::BarcodeScanner { .. } => UsagePage::BarcodeScanner,
            Usage::Scales { .. } => UsagePage::Scales,
            Usage::MagneticStripeReader { .. } => UsagePage::MagneticStripeReader,
            Usage::CameraControl { .. } => UsagePage::CameraControl,
            Usage::Arcade { .. } => UsagePage::Arcade,
            Usage::FIDOAlliance { .. } => UsagePage::FIDOAlliance,
            Usage::VendorDefinedPage { vendor_page, .. } => UsagePage::VendorDefinedPage { vendor_page: *vendor_page },
        }
    }
}

impl From<&UsagePage> for u16 {
    /// Returns the UsagePage as 16-bit value. This is equivalent to the
    /// upper 16 bits of a full 32-bit Usage value shifted down.
    fn from(usage_page: &UsagePage) -> u16 {
        match usage_page {
            UsagePage::GenericDesktop { .. } => 1,
            UsagePage::SimulationControls { .. } => 2,
            UsagePage::VRControls { .. } => 3,
            UsagePage::SportControls { .. } => 4,
            UsagePage::GameControls { .. } => 5,
            UsagePage::GenericDeviceControls { .. } => 6,
            UsagePage::KeyboardKeypad { .. } => 7,
            UsagePage::LED { .. } => 8,
            UsagePage::Button { .. } => 9,
            UsagePage::Ordinal { .. } => 10,
            UsagePage::TelephonyDevice { .. } => 11,
            UsagePage::Consumer { .. } => 12,
            UsagePage::Digitizers { .. } => 13,
            UsagePage::Haptics { .. } => 14,
            UsagePage::PhysicalInputDevice { .. } => 15,
            UsagePage::Unicode { .. } => 16,
            UsagePage::SoC { .. } => 17,
            UsagePage::EyeandHeadTrackers { .. } => 18,
            UsagePage::AuxiliaryDisplay { .. } => 20,
            UsagePage::Sensors { .. } => 32,
            UsagePage::MedicalInstrument { .. } => 64,
            UsagePage::BrailleDisplay { .. } => 65,
            UsagePage::LightingAndIllumination { .. } => 89,
            UsagePage::Monitor { .. } => 128,
            UsagePage::MonitorEnumerated { .. } => 129,
            UsagePage::VESAVirtualControls { .. } => 130,
            UsagePage::Power { .. } => 132,
            UsagePage::BatterySystem { .. } => 133,
            UsagePage::BarcodeScanner { .. } => 140,
            UsagePage::Scales { .. } => 141,
            UsagePage::MagneticStripeReader { .. } => 142,
            UsagePage::CameraControl { .. } => 144,
            UsagePage::Arcade { .. } => 145,
            UsagePage::FIDOAlliance { .. } => 61904,
            UsagePage::VendorDefinedPage { .. } => 0xff00,
        }
    }
}

impl From<UsagePage> for u16 {
    fn from(usage_page: UsagePage) -> u16 {
        u16::from(&usage_page)
    }
}

impl TryFrom<u16> for UsagePage {
    type Error = HutError;

    fn try_from(usage_page: u16) -> Result<UsagePage> {
        match usage_page {
            1 => Ok(UsagePage::GenericDesktop),
            2 => Ok(UsagePage::SimulationControls),
            3 => Ok(UsagePage::VRControls),
            4 => Ok(UsagePage::SportControls),
            5 => Ok(UsagePage::GameControls),
            6 => Ok(UsagePage::GenericDeviceControls),
            7 => Ok(UsagePage::KeyboardKeypad),
            8 => Ok(UsagePage::LED),
            9 => Ok(UsagePage::Button),
            10 => Ok(UsagePage::Ordinal),
            11 => Ok(UsagePage::TelephonyDevice),
            12 => Ok(UsagePage::Consumer),
            13 => Ok(UsagePage::Digitizers),
            14 => Ok(UsagePage::Haptics),
            15 => Ok(UsagePage::PhysicalInputDevice),
            16 => Ok(UsagePage::Unicode),
            17 => Ok(UsagePage::SoC),
            18 => Ok(UsagePage::EyeandHeadTrackers),
            20 => Ok(UsagePage::AuxiliaryDisplay),
            32 => Ok(UsagePage::Sensors),
            64 => Ok(UsagePage::MedicalInstrument),
            65 => Ok(UsagePage::BrailleDisplay),
            89 => Ok(UsagePage::LightingAndIllumination),
            128 => Ok(UsagePage::Monitor),
            129 => Ok(UsagePage::MonitorEnumerated),
            130 => Ok(UsagePage::VESAVirtualControls),
            132 => Ok(UsagePage::Power),
            133 => Ok(UsagePage::BatterySystem),
            140 => Ok(UsagePage::BarcodeScanner),
            141 => Ok(UsagePage::Scales),
            142 => Ok(UsagePage::MagneticStripeReader),
            144 => Ok(UsagePage::CameraControl),
            145 => Ok(UsagePage::Arcade),
            61904 => Ok(UsagePage::FIDOAlliance),
            page @ 0xff00..=0xffff => Ok(UsagePage::VendorDefinedPage { vendor_page: VendorPage(page) }),
            n => Err(HutError::UnknownUsagePage { usage_page: n }),
        }
    }
}

impl fmt::Display for UsagePage {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name: String = match self {
            UsagePage::GenericDesktop => "Generic Desktop".into(),
            UsagePage::SimulationControls => "Simulation Controls".into(),
            UsagePage::VRControls => "VR Controls".into(),
            UsagePage::SportControls => "Sport Controls".into(),
            UsagePage::GameControls => "Game Controls".into(),
            UsagePage::GenericDeviceControls => "Generic Device Controls".into(),
            UsagePage::KeyboardKeypad => "Keyboard/Keypad".into(),
            UsagePage::LED => "LED".into(),
            UsagePage::Button => "Button".into(),
            UsagePage::Ordinal => "Ordinal".into(),
            UsagePage::TelephonyDevice => "Telephony Device".into(),
            UsagePage::Consumer => "Consumer".into(),
            UsagePage::Digitizers => "Digitizers".into(),
            UsagePage::Haptics => "Haptics".into(),
            UsagePage::PhysicalInputDevice => "Physical Input Device".into(),
            UsagePage::Unicode => "Unicode".into(),
            UsagePage::SoC => "SoC".into(),
            UsagePage::EyeandHeadTrackers => "Eye and Head Trackers".into(),
            UsagePage::AuxiliaryDisplay => "Auxiliary Display".into(),
            UsagePage::Sensors => "Sensors".into(),
            UsagePage::MedicalInstrument => "Medical Instrument".into(),
            UsagePage::BrailleDisplay => "Braille Display".into(),
            UsagePage::LightingAndIllumination => "Lighting And Illumination".into(),
            UsagePage::Monitor => "Monitor".into(),
            UsagePage::MonitorEnumerated => "Monitor Enumerated".into(),
            UsagePage::VESAVirtualControls => "VESA Virtual Controls".into(),
            UsagePage::Power => "Power".into(),
            UsagePage::BatterySystem => "Battery System".into(),
            UsagePage::BarcodeScanner => "Barcode Scanner".into(),
            UsagePage::Scales => "Scales".into(),
            UsagePage::MagneticStripeReader => "Magnetic Stripe Reader".into(),
            UsagePage::CameraControl => "Camera Control".into(),
            UsagePage::Arcade => "Arcade".into(),
            UsagePage::FIDOAlliance => "FIDO Alliance".into(),
            UsagePage::VendorDefinedPage { vendor_page, .. } => format!("Vendor Defined Page {:04X}", u16::from(vendor_page)),
        };
        write!(f, "{name}")
    }
}

/// An enum wrapping all known Usages in the HUT.
/// ```
/// # use hut::*;
/// let u1 = Usage::GenericDesktop { usage: GenericDesktop::Mouse};
/// let u2 = Usage::new_from_page_and_id(0x01, 0x02).unwrap();
/// let u3 = Usage::from(GenericDesktop::Mouse);
/// assert_eq!(u1, u2);
/// assert_eq!(u1, u3);
///
/// assert_eq!(0x1, u1.usage_page_value());
/// assert_eq!(0x2, u1.usage_id_value());
/// assert_eq!(0x1 << 16 | 0x2, u1.usage_value());
/// ```
/// Note: this enum is generated from the HUT documents.
#[allow(non_camel_case_types)]
#[derive(Debug)]
#[non_exhaustive]
pub enum Usage {
    /// "Generic Desktop"
    GenericDesktop {
        usage: GenericDesktop,
    },
    /// "Simulation Controls"
    SimulationControls {
        usage: SimulationControls,
    },
    /// "VR Controls"
    VRControls {
        usage: VRControls,
    },
    /// "Sport Controls"
    SportControls {
        usage: SportControls,
    },
    /// "Game Controls"
    GameControls {
        usage: GameControls,
    },
    /// "Generic Device Controls"
    GenericDeviceControls {
        usage: GenericDeviceControls,
    },
    /// "Keyboard/Keypad"
    KeyboardKeypad {
        usage: KeyboardKeypad,
    },
    /// "LED"
    LED {
        usage: LED,
    },
    /// "Button"
    Button {
        usage: Button,
    },
    /// "Ordinal"
    Ordinal {
        usage: Ordinal,
    },
    /// "Telephony Device"
    TelephonyDevice {
        usage: TelephonyDevice,
    },
    /// "Consumer"
    Consumer {
        usage: Consumer,
    },
    /// "Digitizers"
    Digitizers {
        usage: Digitizers,
    },
    /// "Haptics"
    Haptics {
        usage: Haptics,
    },
    /// "Physical Input Device"
    PhysicalInputDevice {
        usage: PhysicalInputDevice,
    },
    /// "Unicode"
    Unicode {
        usage: Unicode,
    },
    /// "SoC"
    SoC {
        usage: SoC,
    },
    /// "Eye and Head Trackers"
    EyeandHeadTrackers {
        usage: EyeandHeadTrackers,
    },
    /// "Auxiliary Display"
    AuxiliaryDisplay {
        usage: AuxiliaryDisplay,
    },
    /// "Sensors"
    Sensors {
        usage: Sensors,
    },
    /// "Medical Instrument"
    MedicalInstrument {
        usage: MedicalInstrument,
    },
    /// "Braille Display"
    BrailleDisplay {
        usage: BrailleDisplay,
    },
    /// "Lighting And Illumination"
    LightingAndIllumination {
        usage: LightingAndIllumination,
    },
    /// "Monitor"
    Monitor {
        usage: Monitor,
    },
    /// "Monitor Enumerated"
    MonitorEnumerated {
        usage: MonitorEnumerated,
    },
    /// "VESA Virtual Controls"
    VESAVirtualControls {
        usage: VESAVirtualControls,
    },
    /// "Power"
    Power {
        usage: Power,
    },
    /// "Battery System"
    BatterySystem {
        usage: BatterySystem,
    },
    /// "Barcode Scanner"
    BarcodeScanner {
        usage: BarcodeScanner,
    },
    /// "Scales"
    Scales {
        usage: Scales,
    },
    /// "Magnetic Stripe Reader"
    MagneticStripeReader {
        usage: MagneticStripeReader,
    },
    /// "Camera Control"
    CameraControl {
        usage: CameraControl,
    },
    /// "Arcade"
    Arcade {
        usage: Arcade,
    },
    /// "FIDO Alliance"
    FIDOAlliance {
        usage: FIDOAlliance,
    },
    VendorDefinedPage { 
        vendor_page: VendorPage,
        usage: VendorDefinedPage,
    },
}

impl Usage {
    pub fn new_from_page_and_id(usage_page: u16, usage_id: u16) -> Result<Usage> {
        Usage::try_from((usage_page as u32) << 16 | usage_id as u32)
    }
}

impl AsUsage for Usage {
    /// Returns the 32 bit Usage value for this usage.
    fn usage_value(&self) -> u32 {
        self.into()
    }

    /// Returns the 16-bit Usage ID value for this usage.
    fn usage_id_value(&self) -> u16 {
        self.into()
    }
}

impl PartialEq for Usage {
    fn eq(&self, other: &Self) -> bool {
        u32::from(self) == u32::from(other)
    }
}

impl AsUsagePage for Usage {
    fn usage_page_value(&self) -> u16 {
        UsagePage::from(self).into()
    }
}

impl fmt::Display for Usage {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match self {
            Usage::GenericDesktop { usage } => format!("{usage}"),
            Usage::SimulationControls { usage } => format!("{usage}"),
            Usage::VRControls { usage } => format!("{usage}"),
            Usage::SportControls { usage } => format!("{usage}"),
            Usage::GameControls { usage } => format!("{usage}"),
            Usage::GenericDeviceControls { usage } => format!("{usage}"),
            Usage::KeyboardKeypad { usage } => format!("{usage}"),
            Usage::LED { usage } => format!("{usage}"),
            Usage::Button { usage } => format!("{usage}"),
            Usage::Ordinal { usage } => format!("{usage}"),
            Usage::TelephonyDevice { usage } => format!("{usage}"),
            Usage::Consumer { usage } => format!("{usage}"),
            Usage::Digitizers { usage } => format!("{usage}"),
            Usage::Haptics { usage } => format!("{usage}"),
            Usage::PhysicalInputDevice { usage } => format!("{usage}"),
            Usage::Unicode { usage } => format!("{usage}"),
            Usage::SoC { usage } => format!("{usage}"),
            Usage::EyeandHeadTrackers { usage } => format!("{usage}"),
            Usage::AuxiliaryDisplay { usage } => format!("{usage}"),
            Usage::Sensors { usage } => format!("{usage}"),
            Usage::MedicalInstrument { usage } => format!("{usage}"),
            Usage::BrailleDisplay { usage } => format!("{usage}"),
            Usage::LightingAndIllumination { usage } => format!("{usage}"),
            Usage::Monitor { usage } => format!("{usage}"),
            Usage::MonitorEnumerated { usage } => format!("{usage}"),
            Usage::VESAVirtualControls { usage } => format!("{usage}"),
            Usage::Power { usage } => format!("{usage}"),
            Usage::BatterySystem { usage } => format!("{usage}"),
            Usage::BarcodeScanner { usage } => format!("{usage}"),
            Usage::Scales { usage } => format!("{usage}"),
            Usage::MagneticStripeReader { usage } => format!("{usage}"),
            Usage::CameraControl { usage } => format!("{usage}"),
            Usage::Arcade { usage } => format!("{usage}"),
            Usage::FIDOAlliance { usage } => format!("{usage}"),
            Usage::VendorDefinedPage { usage, .. } => format!("{usage}"),
        };
        write!(f, "{name}")
    }
}

impl From<&Usage> for u16 {
    fn from(usage: &Usage) -> u16 {
        let u: u32 = u32::from(usage);
        (u & 0xFFFF) as u16
    }
}

impl From<Usage> for u16 {
    fn from(usage: Usage) -> u16 {
        u16::from(&usage)
    }
}

impl From<&Usage> for u32 {
    fn from(usage: &Usage) -> u32 {
        match usage {
            Usage::GenericDesktop { usage: GenericDesktop::Pointer } => 1 << 16 | 1,
            Usage::GenericDesktop { usage: GenericDesktop::Mouse } => 1 << 16 | 2,
            Usage::GenericDesktop { usage: GenericDesktop::Joystick } => 1 << 16 | 4,
            Usage::GenericDesktop { usage: GenericDesktop::Gamepad } => 1 << 16 | 5,
            Usage::GenericDesktop { usage: GenericDesktop::Keyboard } => 1 << 16 | 6,
            Usage::GenericDesktop { usage: GenericDesktop::Keypad } => 1 << 16 | 7,
            Usage::GenericDesktop { usage: GenericDesktop::MultiaxisController } => 1 << 16 | 8,
            Usage::GenericDesktop { usage: GenericDesktop::TabletPCSystemControls } => 1 << 16 | 9,
            Usage::GenericDesktop { usage: GenericDesktop::WaterCoolingDevice } => 1 << 16 | 10,
            Usage::GenericDesktop { usage: GenericDesktop::ComputerChassisDevice } => 1 << 16 | 11,
            Usage::GenericDesktop { usage: GenericDesktop::WirelessRadioControls } => 1 << 16 | 12,
            Usage::GenericDesktop { usage: GenericDesktop::PortableDeviceControl } => 1 << 16 | 13,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMultiAxisController } => 1 << 16 | 14,
            Usage::GenericDesktop { usage: GenericDesktop::SpatialController } => 1 << 16 | 15,
            Usage::GenericDesktop { usage: GenericDesktop::AssistiveControl } => 1 << 16 | 16,
            Usage::GenericDesktop { usage: GenericDesktop::DeviceDock } => 1 << 16 | 17,
            Usage::GenericDesktop { usage: GenericDesktop::DockableDevice } => 1 << 16 | 18,
            Usage::GenericDesktop { usage: GenericDesktop::CallStateManagementControl } => 1 << 16 | 19,
            Usage::GenericDesktop { usage: GenericDesktop::X } => 1 << 16 | 48,
            Usage::GenericDesktop { usage: GenericDesktop::Y } => 1 << 16 | 49,
            Usage::GenericDesktop { usage: GenericDesktop::Z } => 1 << 16 | 50,
            Usage::GenericDesktop { usage: GenericDesktop::Rx } => 1 << 16 | 51,
            Usage::GenericDesktop { usage: GenericDesktop::Ry } => 1 << 16 | 52,
            Usage::GenericDesktop { usage: GenericDesktop::Rz } => 1 << 16 | 53,
            Usage::GenericDesktop { usage: GenericDesktop::Slider } => 1 << 16 | 54,
            Usage::GenericDesktop { usage: GenericDesktop::Dial } => 1 << 16 | 55,
            Usage::GenericDesktop { usage: GenericDesktop::Wheel } => 1 << 16 | 56,
            Usage::GenericDesktop { usage: GenericDesktop::HatSwitch } => 1 << 16 | 57,
            Usage::GenericDesktop { usage: GenericDesktop::CountedBuffer } => 1 << 16 | 58,
            Usage::GenericDesktop { usage: GenericDesktop::ByteCount } => 1 << 16 | 59,
            Usage::GenericDesktop { usage: GenericDesktop::MotionWakeup } => 1 << 16 | 60,
            Usage::GenericDesktop { usage: GenericDesktop::Start } => 1 << 16 | 61,
            Usage::GenericDesktop { usage: GenericDesktop::Select } => 1 << 16 | 62,
            Usage::GenericDesktop { usage: GenericDesktop::Vx } => 1 << 16 | 64,
            Usage::GenericDesktop { usage: GenericDesktop::Vy } => 1 << 16 | 65,
            Usage::GenericDesktop { usage: GenericDesktop::Vz } => 1 << 16 | 66,
            Usage::GenericDesktop { usage: GenericDesktop::Vbrx } => 1 << 16 | 67,
            Usage::GenericDesktop { usage: GenericDesktop::Vbry } => 1 << 16 | 68,
            Usage::GenericDesktop { usage: GenericDesktop::Vbrz } => 1 << 16 | 69,
            Usage::GenericDesktop { usage: GenericDesktop::Vno } => 1 << 16 | 70,
            Usage::GenericDesktop { usage: GenericDesktop::FeatureNotification } => 1 << 16 | 71,
            Usage::GenericDesktop { usage: GenericDesktop::ResolutionMultiplier } => 1 << 16 | 72,
            Usage::GenericDesktop { usage: GenericDesktop::Qx } => 1 << 16 | 73,
            Usage::GenericDesktop { usage: GenericDesktop::Qy } => 1 << 16 | 74,
            Usage::GenericDesktop { usage: GenericDesktop::Qz } => 1 << 16 | 75,
            Usage::GenericDesktop { usage: GenericDesktop::Qw } => 1 << 16 | 76,
            Usage::GenericDesktop { usage: GenericDesktop::SystemControl } => 1 << 16 | 128,
            Usage::GenericDesktop { usage: GenericDesktop::SystemPowerDown } => 1 << 16 | 129,
            Usage::GenericDesktop { usage: GenericDesktop::SystemSleep } => 1 << 16 | 130,
            Usage::GenericDesktop { usage: GenericDesktop::SystemWakeUp } => 1 << 16 | 131,
            Usage::GenericDesktop { usage: GenericDesktop::SystemContextMenu } => 1 << 16 | 132,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMainMenu } => 1 << 16 | 133,
            Usage::GenericDesktop { usage: GenericDesktop::SystemAppMenu } => 1 << 16 | 134,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMenuHelp } => 1 << 16 | 135,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMenuExit } => 1 << 16 | 136,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMenuSelect } => 1 << 16 | 137,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMenuRight } => 1 << 16 | 138,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMenuLeft } => 1 << 16 | 139,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMenuUp } => 1 << 16 | 140,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMenuDown } => 1 << 16 | 141,
            Usage::GenericDesktop { usage: GenericDesktop::SystemColdRestart } => 1 << 16 | 142,
            Usage::GenericDesktop { usage: GenericDesktop::SystemWarmRestart } => 1 << 16 | 143,
            Usage::GenericDesktop { usage: GenericDesktop::DpadUp } => 1 << 16 | 144,
            Usage::GenericDesktop { usage: GenericDesktop::DpadDown } => 1 << 16 | 145,
            Usage::GenericDesktop { usage: GenericDesktop::DpadRight } => 1 << 16 | 146,
            Usage::GenericDesktop { usage: GenericDesktop::DpadLeft } => 1 << 16 | 147,
            Usage::GenericDesktop { usage: GenericDesktop::IndexTrigger } => 1 << 16 | 148,
            Usage::GenericDesktop { usage: GenericDesktop::PalmTrigger } => 1 << 16 | 149,
            Usage::GenericDesktop { usage: GenericDesktop::Thumbstick } => 1 << 16 | 150,
            Usage::GenericDesktop { usage: GenericDesktop::SystemFunctionShift } => 1 << 16 | 151,
            Usage::GenericDesktop { usage: GenericDesktop::SystemFunctionShiftLock } => 1 << 16 | 152,
            Usage::GenericDesktop { usage: GenericDesktop::SystemFunctionShiftLockIndicator } => 1 << 16 | 153,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDismissNotification } => 1 << 16 | 154,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDoNotDisturb } => 1 << 16 | 155,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDock } => 1 << 16 | 160,
            Usage::GenericDesktop { usage: GenericDesktop::SystemUndock } => 1 << 16 | 161,
            Usage::GenericDesktop { usage: GenericDesktop::SystemSetup } => 1 << 16 | 162,
            Usage::GenericDesktop { usage: GenericDesktop::SystemBreak } => 1 << 16 | 163,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDebuggerBreak } => 1 << 16 | 164,
            Usage::GenericDesktop { usage: GenericDesktop::ApplicationBreak } => 1 << 16 | 165,
            Usage::GenericDesktop { usage: GenericDesktop::ApplicationDebuggerBreak } => 1 << 16 | 166,
            Usage::GenericDesktop { usage: GenericDesktop::SystemSpeakerMute } => 1 << 16 | 167,
            Usage::GenericDesktop { usage: GenericDesktop::SystemHibernate } => 1 << 16 | 168,
            Usage::GenericDesktop { usage: GenericDesktop::SystemMicrophoneMute } => 1 << 16 | 169,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayInvert } => 1 << 16 | 176,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayInternal } => 1 << 16 | 177,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayExternal } => 1 << 16 | 178,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayBoth } => 1 << 16 | 179,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayDual } => 1 << 16 | 180,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayToggleIntExtMode } => 1 << 16 | 181,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplaySwapPrimarySecondary } => 1 << 16 | 182,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayToggleLCDAutoscale } => 1 << 16 | 183,
            Usage::GenericDesktop { usage: GenericDesktop::SensorZone } => 1 << 16 | 192,
            Usage::GenericDesktop { usage: GenericDesktop::RPM } => 1 << 16 | 193,
            Usage::GenericDesktop { usage: GenericDesktop::CoolantLevel } => 1 << 16 | 194,
            Usage::GenericDesktop { usage: GenericDesktop::CoolantCriticalLevel } => 1 << 16 | 195,
            Usage::GenericDesktop { usage: GenericDesktop::CoolantPump } => 1 << 16 | 196,
            Usage::GenericDesktop { usage: GenericDesktop::ChassisEnclosure } => 1 << 16 | 197,
            Usage::GenericDesktop { usage: GenericDesktop::WirelessRadioButton } => 1 << 16 | 198,
            Usage::GenericDesktop { usage: GenericDesktop::WirelessRadioLED } => 1 << 16 | 199,
            Usage::GenericDesktop { usage: GenericDesktop::WirelessRadioSliderSwitch } => 1 << 16 | 200,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayRotationLockButton } => 1 << 16 | 201,
            Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayRotationLockSliderSwitch } => 1 << 16 | 202,
            Usage::GenericDesktop { usage: GenericDesktop::ControlEnable } => 1 << 16 | 203,
            Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceUniqueID } => 1 << 16 | 208,
            Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceVendorID } => 1 << 16 | 209,
            Usage::GenericDesktop { usage: GenericDesktop::DockableDevicePrimaryUsagePage } => 1 << 16 | 210,
            Usage::GenericDesktop { usage: GenericDesktop::DockableDevicePrimaryUsageID } => 1 << 16 | 211,
            Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceDockingState } => 1 << 16 | 212,
            Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceDisplayOcclusion } => 1 << 16 | 213,
            Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceObjectType } => 1 << 16 | 214,
            Usage::GenericDesktop { usage: GenericDesktop::CallActiveLED } => 1 << 16 | 224,
            Usage::GenericDesktop { usage: GenericDesktop::CallMuteToggle } => 1 << 16 | 225,
            Usage::GenericDesktop { usage: GenericDesktop::CallMuteLED } => 1 << 16 | 226,
            Usage::SimulationControls { usage: SimulationControls::FlightSimulationDevice } => 2 << 16 | 1,
            Usage::SimulationControls { usage: SimulationControls::AutomobileSimulationDevice } => 2 << 16 | 2,
            Usage::SimulationControls { usage: SimulationControls::TankSimulationDevice } => 2 << 16 | 3,
            Usage::SimulationControls { usage: SimulationControls::SpaceshipSimulationDevice } => 2 << 16 | 4,
            Usage::SimulationControls { usage: SimulationControls::SubmarineSimulationDevice } => 2 << 16 | 5,
            Usage::SimulationControls { usage: SimulationControls::SailingSimulationDevice } => 2 << 16 | 6,
            Usage::SimulationControls { usage: SimulationControls::MotorcycleSimulationDevice } => 2 << 16 | 7,
            Usage::SimulationControls { usage: SimulationControls::SportsSimulationDevice } => 2 << 16 | 8,
            Usage::SimulationControls { usage: SimulationControls::AirplaneSimulationDevice } => 2 << 16 | 9,
            Usage::SimulationControls { usage: SimulationControls::HelicopterSimulationDevice } => 2 << 16 | 10,
            Usage::SimulationControls { usage: SimulationControls::MagicCarpetSimulationDevice } => 2 << 16 | 11,
            Usage::SimulationControls { usage: SimulationControls::BicycleSimulationDevice } => 2 << 16 | 12,
            Usage::SimulationControls { usage: SimulationControls::FlightControlStick } => 2 << 16 | 32,
            Usage::SimulationControls { usage: SimulationControls::FlightStick } => 2 << 16 | 33,
            Usage::SimulationControls { usage: SimulationControls::CyclicControl } => 2 << 16 | 34,
            Usage::SimulationControls { usage: SimulationControls::CyclicTrim } => 2 << 16 | 35,
            Usage::SimulationControls { usage: SimulationControls::FlightYoke } => 2 << 16 | 36,
            Usage::SimulationControls { usage: SimulationControls::TrackControl } => 2 << 16 | 37,
            Usage::SimulationControls { usage: SimulationControls::Aileron } => 2 << 16 | 176,
            Usage::SimulationControls { usage: SimulationControls::AileronTrim } => 2 << 16 | 177,
            Usage::SimulationControls { usage: SimulationControls::AntiTorqueControl } => 2 << 16 | 178,
            Usage::SimulationControls { usage: SimulationControls::AutopilotEnable } => 2 << 16 | 179,
            Usage::SimulationControls { usage: SimulationControls::ChaffRelease } => 2 << 16 | 180,
            Usage::SimulationControls { usage: SimulationControls::CollectiveControl } => 2 << 16 | 181,
            Usage::SimulationControls { usage: SimulationControls::DiveBrake } => 2 << 16 | 182,
            Usage::SimulationControls { usage: SimulationControls::ElectronicCountermeasures } => 2 << 16 | 183,
            Usage::SimulationControls { usage: SimulationControls::Elevator } => 2 << 16 | 184,
            Usage::SimulationControls { usage: SimulationControls::ElevatorTrim } => 2 << 16 | 185,
            Usage::SimulationControls { usage: SimulationControls::Rudder } => 2 << 16 | 186,
            Usage::SimulationControls { usage: SimulationControls::Throttle } => 2 << 16 | 187,
            Usage::SimulationControls { usage: SimulationControls::FlightCommunications } => 2 << 16 | 188,
            Usage::SimulationControls { usage: SimulationControls::FlareRelease } => 2 << 16 | 189,
            Usage::SimulationControls { usage: SimulationControls::LandingGear } => 2 << 16 | 190,
            Usage::SimulationControls { usage: SimulationControls::ToeBrake } => 2 << 16 | 191,
            Usage::SimulationControls { usage: SimulationControls::Trigger } => 2 << 16 | 192,
            Usage::SimulationControls { usage: SimulationControls::WeaponsArm } => 2 << 16 | 193,
            Usage::SimulationControls { usage: SimulationControls::WeaponsSelect } => 2 << 16 | 194,
            Usage::SimulationControls { usage: SimulationControls::WingFlaps } => 2 << 16 | 195,
            Usage::SimulationControls { usage: SimulationControls::Accelerator } => 2 << 16 | 196,
            Usage::SimulationControls { usage: SimulationControls::Brake } => 2 << 16 | 197,
            Usage::SimulationControls { usage: SimulationControls::Clutch } => 2 << 16 | 198,
            Usage::SimulationControls { usage: SimulationControls::Shifter } => 2 << 16 | 199,
            Usage::SimulationControls { usage: SimulationControls::Steering } => 2 << 16 | 200,
            Usage::SimulationControls { usage: SimulationControls::TurretDirection } => 2 << 16 | 201,
            Usage::SimulationControls { usage: SimulationControls::BarrelElevation } => 2 << 16 | 202,
            Usage::SimulationControls { usage: SimulationControls::DivePlane } => 2 << 16 | 203,
            Usage::SimulationControls { usage: SimulationControls::Ballast } => 2 << 16 | 204,
            Usage::SimulationControls { usage: SimulationControls::BicycleCrank } => 2 << 16 | 205,
            Usage::SimulationControls { usage: SimulationControls::HandleBars } => 2 << 16 | 206,
            Usage::SimulationControls { usage: SimulationControls::FrontBrake } => 2 << 16 | 207,
            Usage::SimulationControls { usage: SimulationControls::RearBrake } => 2 << 16 | 208,
            Usage::VRControls { usage: VRControls::Belt } => 3 << 16 | 1,
            Usage::VRControls { usage: VRControls::BodySuit } => 3 << 16 | 2,
            Usage::VRControls { usage: VRControls::Flexor } => 3 << 16 | 3,
            Usage::VRControls { usage: VRControls::Glove } => 3 << 16 | 4,
            Usage::VRControls { usage: VRControls::HeadTracker } => 3 << 16 | 5,
            Usage::VRControls { usage: VRControls::HeadMountedDisplay } => 3 << 16 | 6,
            Usage::VRControls { usage: VRControls::HandTracker } => 3 << 16 | 7,
            Usage::VRControls { usage: VRControls::Oculometer } => 3 << 16 | 8,
            Usage::VRControls { usage: VRControls::Vest } => 3 << 16 | 9,
            Usage::VRControls { usage: VRControls::AnimatronicDevice } => 3 << 16 | 10,
            Usage::VRControls { usage: VRControls::StereoEnable } => 3 << 16 | 32,
            Usage::VRControls { usage: VRControls::DisplayEnable } => 3 << 16 | 33,
            Usage::SportControls { usage: SportControls::BaseballBat } => 4 << 16 | 1,
            Usage::SportControls { usage: SportControls::GolfClub } => 4 << 16 | 2,
            Usage::SportControls { usage: SportControls::RowingMachine } => 4 << 16 | 3,
            Usage::SportControls { usage: SportControls::Treadmill } => 4 << 16 | 4,
            Usage::SportControls { usage: SportControls::Oar } => 4 << 16 | 48,
            Usage::SportControls { usage: SportControls::Slope } => 4 << 16 | 49,
            Usage::SportControls { usage: SportControls::Rate } => 4 << 16 | 50,
            Usage::SportControls { usage: SportControls::StickSpeed } => 4 << 16 | 51,
            Usage::SportControls { usage: SportControls::StickFaceAngle } => 4 << 16 | 52,
            Usage::SportControls { usage: SportControls::StickHeelToe } => 4 << 16 | 53,
            Usage::SportControls { usage: SportControls::StickFollowThrough } => 4 << 16 | 54,
            Usage::SportControls { usage: SportControls::StickTempo } => 4 << 16 | 55,
            Usage::SportControls { usage: SportControls::StickType } => 4 << 16 | 56,
            Usage::SportControls { usage: SportControls::StickHeight } => 4 << 16 | 57,
            Usage::SportControls { usage: SportControls::Putter } => 4 << 16 | 80,
            Usage::SportControls { usage: SportControls::OneIron } => 4 << 16 | 81,
            Usage::SportControls { usage: SportControls::TwoIron } => 4 << 16 | 82,
            Usage::SportControls { usage: SportControls::ThreeIron } => 4 << 16 | 83,
            Usage::SportControls { usage: SportControls::FourIron } => 4 << 16 | 84,
            Usage::SportControls { usage: SportControls::FiveIron } => 4 << 16 | 85,
            Usage::SportControls { usage: SportControls::SixIron } => 4 << 16 | 86,
            Usage::SportControls { usage: SportControls::SevenIron } => 4 << 16 | 87,
            Usage::SportControls { usage: SportControls::EightIron } => 4 << 16 | 88,
            Usage::SportControls { usage: SportControls::NineIron } => 4 << 16 | 89,
            Usage::SportControls { usage: SportControls::One0Iron } => 4 << 16 | 90,
            Usage::SportControls { usage: SportControls::One1Iron } => 4 << 16 | 91,
            Usage::SportControls { usage: SportControls::SandWedge } => 4 << 16 | 92,
            Usage::SportControls { usage: SportControls::LoftWedge } => 4 << 16 | 93,
            Usage::SportControls { usage: SportControls::PowerWedge } => 4 << 16 | 94,
            Usage::SportControls { usage: SportControls::OneWood } => 4 << 16 | 95,
            Usage::SportControls { usage: SportControls::ThreeWood } => 4 << 16 | 96,
            Usage::SportControls { usage: SportControls::FiveWood } => 4 << 16 | 97,
            Usage::SportControls { usage: SportControls::SevenWood } => 4 << 16 | 98,
            Usage::SportControls { usage: SportControls::NineWood } => 4 << 16 | 99,
            Usage::GameControls { usage: GameControls::ThreeDGameController } => 5 << 16 | 1,
            Usage::GameControls { usage: GameControls::PinballDevice } => 5 << 16 | 2,
            Usage::GameControls { usage: GameControls::GunDevice } => 5 << 16 | 3,
            Usage::GameControls { usage: GameControls::PointofView } => 5 << 16 | 32,
            Usage::GameControls { usage: GameControls::TurnRightLeft } => 5 << 16 | 33,
            Usage::GameControls { usage: GameControls::PitchForwardBackward } => 5 << 16 | 34,
            Usage::GameControls { usage: GameControls::RollRightLeft } => 5 << 16 | 35,
            Usage::GameControls { usage: GameControls::MoveRightLeft } => 5 << 16 | 36,
            Usage::GameControls { usage: GameControls::MoveForwardBackward } => 5 << 16 | 37,
            Usage::GameControls { usage: GameControls::MoveUpDown } => 5 << 16 | 38,
            Usage::GameControls { usage: GameControls::LeanRightLeft } => 5 << 16 | 39,
            Usage::GameControls { usage: GameControls::LeanForwardBackward } => 5 << 16 | 40,
            Usage::GameControls { usage: GameControls::HeightofPOV } => 5 << 16 | 41,
            Usage::GameControls { usage: GameControls::Flipper } => 5 << 16 | 42,
            Usage::GameControls { usage: GameControls::SecondaryFlipper } => 5 << 16 | 43,
            Usage::GameControls { usage: GameControls::Bump } => 5 << 16 | 44,
            Usage::GameControls { usage: GameControls::NewGame } => 5 << 16 | 45,
            Usage::GameControls { usage: GameControls::ShootBall } => 5 << 16 | 46,
            Usage::GameControls { usage: GameControls::Player } => 5 << 16 | 47,
            Usage::GameControls { usage: GameControls::GunBolt } => 5 << 16 | 48,
            Usage::GameControls { usage: GameControls::GunClip } => 5 << 16 | 49,
            Usage::GameControls { usage: GameControls::GunSelector } => 5 << 16 | 50,
            Usage::GameControls { usage: GameControls::GunSingleShot } => 5 << 16 | 51,
            Usage::GameControls { usage: GameControls::GunBurst } => 5 << 16 | 52,
            Usage::GameControls { usage: GameControls::GunAutomatic } => 5 << 16 | 53,
            Usage::GameControls { usage: GameControls::GunSafety } => 5 << 16 | 54,
            Usage::GameControls { usage: GameControls::GamepadFireJump } => 5 << 16 | 55,
            Usage::GameControls { usage: GameControls::GamepadTrigger } => 5 << 16 | 57,
            Usage::GameControls { usage: GameControls::FormfittingGamepad } => 5 << 16 | 58,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::BackgroundNonuserControls } => 6 << 16 | 1,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::BatteryStrength } => 6 << 16 | 32,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::WirelessChannel } => 6 << 16 | 33,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::WirelessID } => 6 << 16 | 34,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::DiscoverWirelessControl } => 6 << 16 | 35,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::SecurityCodeCharacterEntered } => 6 << 16 | 36,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::SecurityCodeCharacterErased } => 6 << 16 | 37,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::SecurityCodeCleared } => 6 << 16 | 38,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::SequenceID } => 6 << 16 | 39,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::SequenceIDReset } => 6 << 16 | 40,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::RFSignalStrength } => 6 << 16 | 41,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::SoftwareVersion } => 6 << 16 | 42,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::ProtocolVersion } => 6 << 16 | 43,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::HardwareVersion } => 6 << 16 | 44,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::Major } => 6 << 16 | 45,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::Minor } => 6 << 16 | 46,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::Revision } => 6 << 16 | 47,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::Handedness } => 6 << 16 | 48,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::EitherHand } => 6 << 16 | 49,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::LeftHand } => 6 << 16 | 50,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::RightHand } => 6 << 16 | 51,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::BothHands } => 6 << 16 | 52,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::GripPoseOffset } => 6 << 16 | 64,
            Usage::GenericDeviceControls { usage: GenericDeviceControls::PointerPoseOffset } => 6 << 16 | 65,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::ErrorRollOver } => 7 << 16 | 1,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::POSTFail } => 7 << 16 | 2,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::ErrorUndefined } => 7 << 16 | 3,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardA } => 7 << 16 | 4,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardB } => 7 << 16 | 5,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardC } => 7 << 16 | 6,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardD } => 7 << 16 | 7,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardE } => 7 << 16 | 8,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF } => 7 << 16 | 9,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardG } => 7 << 16 | 10,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardH } => 7 << 16 | 11,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardI } => 7 << 16 | 12,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardJ } => 7 << 16 | 13,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardK } => 7 << 16 | 14,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardL } => 7 << 16 | 15,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardM } => 7 << 16 | 16,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardN } => 7 << 16 | 17,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardO } => 7 << 16 | 18,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardP } => 7 << 16 | 19,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardQ } => 7 << 16 | 20,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardR } => 7 << 16 | 21,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardS } => 7 << 16 | 22,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardT } => 7 << 16 | 23,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardU } => 7 << 16 | 24,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardV } => 7 << 16 | 25,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardW } => 7 << 16 | 26,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardX } => 7 << 16 | 27,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardY } => 7 << 16 | 28,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardZ } => 7 << 16 | 29,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard1andBang } => 7 << 16 | 30,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard2andAt } => 7 << 16 | 31,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard3andHash } => 7 << 16 | 32,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard4andDollar } => 7 << 16 | 33,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard5andPercent } => 7 << 16 | 34,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard6andCaret } => 7 << 16 | 35,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard7andAmpersand } => 7 << 16 | 36,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard8andStar } => 7 << 16 | 37,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard9andLeftBracket } => 7 << 16 | 38,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard0andRightBracket } => 7 << 16 | 39,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardReturnEnter } => 7 << 16 | 40,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardEscape } => 7 << 16 | 41,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardDelete } => 7 << 16 | 42,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardTab } => 7 << 16 | 43,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSpacebar } => 7 << 16 | 44,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardDashandUnderscore } => 7 << 16 | 45,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardEqualsandPlus } => 7 << 16 | 46,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftBrace } => 7 << 16 | 47,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightBrace } => 7 << 16 | 48,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardBackslashandPipe } => 7 << 16 | 49,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardNonUSHashandTilde } => 7 << 16 | 50,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSemiColonandColon } => 7 << 16 | 51,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftAposandDouble } => 7 << 16 | 52,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardGraveAccentandTilde } => 7 << 16 | 53,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCommaandLessThan } => 7 << 16 | 54,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPeriodandGreaterThan } => 7 << 16 | 55,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardForwardSlashandQuestionMark } => 7 << 16 | 56,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCapsLock } => 7 << 16 | 57,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF1 } => 7 << 16 | 58,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF2 } => 7 << 16 | 59,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF3 } => 7 << 16 | 60,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF4 } => 7 << 16 | 61,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF5 } => 7 << 16 | 62,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF6 } => 7 << 16 | 63,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF7 } => 7 << 16 | 64,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF8 } => 7 << 16 | 65,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF9 } => 7 << 16 | 66,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF10 } => 7 << 16 | 67,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF11 } => 7 << 16 | 68,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF12 } => 7 << 16 | 69,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPrintScreen } => 7 << 16 | 70,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardScrollLock } => 7 << 16 | 71,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPause } => 7 << 16 | 72,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInsert } => 7 << 16 | 73,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardHome } => 7 << 16 | 74,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPageUp } => 7 << 16 | 75,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardDeleteForward } => 7 << 16 | 76,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardEnd } => 7 << 16 | 77,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPageDown } => 7 << 16 | 78,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightArrow } => 7 << 16 | 79,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftArrow } => 7 << 16 | 80,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardDownArrow } => 7 << 16 | 81,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardUpArrow } => 7 << 16 | 82,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadNumLockandClear } => 7 << 16 | 83,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadForwardSlash } => 7 << 16 | 84,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadStar } => 7 << 16 | 85,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDash } => 7 << 16 | 86,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadPlus } => 7 << 16 | 87,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadENTER } => 7 << 16 | 88,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad1andEnd } => 7 << 16 | 89,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad2andDownArrow } => 7 << 16 | 90,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad3andPageDn } => 7 << 16 | 91,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad4andLeftArrow } => 7 << 16 | 92,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad5 } => 7 << 16 | 93,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad6andRightArrow } => 7 << 16 | 94,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad7andHome } => 7 << 16 | 95,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad8andUpArrow } => 7 << 16 | 96,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad9andPageUp } => 7 << 16 | 97,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad0andInsert } => 7 << 16 | 98,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadPeriodandDelete } => 7 << 16 | 99,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardNonUSBackslashandPipe } => 7 << 16 | 100,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardApplication } => 7 << 16 | 101,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPower } => 7 << 16 | 102,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadEquals } => 7 << 16 | 103,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF13 } => 7 << 16 | 104,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF14 } => 7 << 16 | 105,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF15 } => 7 << 16 | 106,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF16 } => 7 << 16 | 107,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF17 } => 7 << 16 | 108,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF18 } => 7 << 16 | 109,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF19 } => 7 << 16 | 110,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF20 } => 7 << 16 | 111,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF21 } => 7 << 16 | 112,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF22 } => 7 << 16 | 113,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF23 } => 7 << 16 | 114,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF24 } => 7 << 16 | 115,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardExecute } => 7 << 16 | 116,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardHelp } => 7 << 16 | 117,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardMenu } => 7 << 16 | 118,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSelect } => 7 << 16 | 119,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardStop } => 7 << 16 | 120,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardAgain } => 7 << 16 | 121,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardUndo } => 7 << 16 | 122,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCut } => 7 << 16 | 123,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCopy } => 7 << 16 | 124,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPaste } => 7 << 16 | 125,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardFind } => 7 << 16 | 126,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardMute } => 7 << 16 | 127,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardVolumeUp } => 7 << 16 | 128,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardVolumeDown } => 7 << 16 | 129,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLockingCapsLock } => 7 << 16 | 130,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLockingNumLock } => 7 << 16 | 131,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLockingScrollLock } => 7 << 16 | 132,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadComma } => 7 << 16 | 133,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadEqualSign } => 7 << 16 | 134,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational1 } => 7 << 16 | 135,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational2 } => 7 << 16 | 136,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational3 } => 7 << 16 | 137,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational4 } => 7 << 16 | 138,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational5 } => 7 << 16 | 139,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational6 } => 7 << 16 | 140,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational7 } => 7 << 16 | 141,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational8 } => 7 << 16 | 142,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational9 } => 7 << 16 | 143,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG1 } => 7 << 16 | 144,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG2 } => 7 << 16 | 145,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG3 } => 7 << 16 | 146,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG4 } => 7 << 16 | 147,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG5 } => 7 << 16 | 148,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG6 } => 7 << 16 | 149,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG7 } => 7 << 16 | 150,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG8 } => 7 << 16 | 151,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG9 } => 7 << 16 | 152,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardAlternateErase } => 7 << 16 | 153,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSysReqAttention } => 7 << 16 | 154,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCancel } => 7 << 16 | 155,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardClear } => 7 << 16 | 156,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPrior } => 7 << 16 | 157,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardReturn } => 7 << 16 | 158,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSeparator } => 7 << 16 | 159,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardOut } => 7 << 16 | 160,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardOper } => 7 << 16 | 161,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardClearAgain } => 7 << 16 | 162,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCrSelProps } => 7 << 16 | 163,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardExSel } => 7 << 16 | 164,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDouble0 } => 7 << 16 | 176,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadTriple0 } => 7 << 16 | 177,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::ThousandsSeparator } => 7 << 16 | 178,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::DecimalSeparator } => 7 << 16 | 179,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::CurrencyUnit } => 7 << 16 | 180,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::CurrencySubunit } => 7 << 16 | 181,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadLeftBracket } => 7 << 16 | 182,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadRightBracket } => 7 << 16 | 183,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadLeftBrace } => 7 << 16 | 184,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadRightBrace } => 7 << 16 | 185,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadTab } => 7 << 16 | 186,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadBackspace } => 7 << 16 | 187,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadA } => 7 << 16 | 188,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadB } => 7 << 16 | 189,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadC } => 7 << 16 | 190,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadD } => 7 << 16 | 191,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadE } => 7 << 16 | 192,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadF } => 7 << 16 | 193,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadXOR } => 7 << 16 | 194,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadCaret } => 7 << 16 | 195,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadPercentage } => 7 << 16 | 196,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadLess } => 7 << 16 | 197,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadGreater } => 7 << 16 | 198,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadAmpersand } => 7 << 16 | 199,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDoubleAmpersand } => 7 << 16 | 200,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadBar } => 7 << 16 | 201,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDoubleBar } => 7 << 16 | 202,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadColon } => 7 << 16 | 203,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadHash } => 7 << 16 | 204,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadSpace } => 7 << 16 | 205,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadAt } => 7 << 16 | 206,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadBang } => 7 << 16 | 207,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryStore } => 7 << 16 | 208,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryRecall } => 7 << 16 | 209,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryClear } => 7 << 16 | 210,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryAdd } => 7 << 16 | 211,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemorySubtract } => 7 << 16 | 212,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryMultiply } => 7 << 16 | 213,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryDivide } => 7 << 16 | 214,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadPlusMinus } => 7 << 16 | 215,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadClear } => 7 << 16 | 216,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadClearEntry } => 7 << 16 | 217,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadBinary } => 7 << 16 | 218,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadOctal } => 7 << 16 | 219,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDecimal } => 7 << 16 | 220,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadHexadecimal } => 7 << 16 | 221,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftControl } => 7 << 16 | 224,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftShift } => 7 << 16 | 225,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftAlt } => 7 << 16 | 226,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftGUI } => 7 << 16 | 227,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightControl } => 7 << 16 | 228,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightShift } => 7 << 16 | 229,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightAlt } => 7 << 16 | 230,
            Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightGUI } => 7 << 16 | 231,
            Usage::LED { usage: LED::NumLock } => 8 << 16 | 1,
            Usage::LED { usage: LED::CapsLock } => 8 << 16 | 2,
            Usage::LED { usage: LED::ScrollLock } => 8 << 16 | 3,
            Usage::LED { usage: LED::Compose } => 8 << 16 | 4,
            Usage::LED { usage: LED::Kana } => 8 << 16 | 5,
            Usage::LED { usage: LED::Power } => 8 << 16 | 6,
            Usage::LED { usage: LED::Shift } => 8 << 16 | 7,
            Usage::LED { usage: LED::DoNotDisturb } => 8 << 16 | 8,
            Usage::LED { usage: LED::Mute } => 8 << 16 | 9,
            Usage::LED { usage: LED::ToneEnable } => 8 << 16 | 10,
            Usage::LED { usage: LED::HighCutFilter } => 8 << 16 | 11,
            Usage::LED { usage: LED::LowCutFilter } => 8 << 16 | 12,
            Usage::LED { usage: LED::EqualizerEnable } => 8 << 16 | 13,
            Usage::LED { usage: LED::SoundFieldOn } => 8 << 16 | 14,
            Usage::LED { usage: LED::SurroundOn } => 8 << 16 | 15,
            Usage::LED { usage: LED::Repeat } => 8 << 16 | 16,
            Usage::LED { usage: LED::Stereo } => 8 << 16 | 17,
            Usage::LED { usage: LED::SamplingRateDetect } => 8 << 16 | 18,
            Usage::LED { usage: LED::Spinning } => 8 << 16 | 19,
            Usage::LED { usage: LED::CAV } => 8 << 16 | 20,
            Usage::LED { usage: LED::CLV } => 8 << 16 | 21,
            Usage::LED { usage: LED::RecordingFormatDetect } => 8 << 16 | 22,
            Usage::LED { usage: LED::OffHook } => 8 << 16 | 23,
            Usage::LED { usage: LED::Ring } => 8 << 16 | 24,
            Usage::LED { usage: LED::MessageWaiting } => 8 << 16 | 25,
            Usage::LED { usage: LED::DataMode } => 8 << 16 | 26,
            Usage::LED { usage: LED::BatteryOperation } => 8 << 16 | 27,
            Usage::LED { usage: LED::BatteryOK } => 8 << 16 | 28,
            Usage::LED { usage: LED::BatteryLow } => 8 << 16 | 29,
            Usage::LED { usage: LED::Speaker } => 8 << 16 | 30,
            Usage::LED { usage: LED::Headset } => 8 << 16 | 31,
            Usage::LED { usage: LED::Hold } => 8 << 16 | 32,
            Usage::LED { usage: LED::Microphone } => 8 << 16 | 33,
            Usage::LED { usage: LED::Coverage } => 8 << 16 | 34,
            Usage::LED { usage: LED::NightMode } => 8 << 16 | 35,
            Usage::LED { usage: LED::SendCalls } => 8 << 16 | 36,
            Usage::LED { usage: LED::CallPickup } => 8 << 16 | 37,
            Usage::LED { usage: LED::Conference } => 8 << 16 | 38,
            Usage::LED { usage: LED::Standby } => 8 << 16 | 39,
            Usage::LED { usage: LED::CameraOn } => 8 << 16 | 40,
            Usage::LED { usage: LED::CameraOff } => 8 << 16 | 41,
            Usage::LED { usage: LED::OnLine } => 8 << 16 | 42,
            Usage::LED { usage: LED::OffLine } => 8 << 16 | 43,
            Usage::LED { usage: LED::Busy } => 8 << 16 | 44,
            Usage::LED { usage: LED::Ready } => 8 << 16 | 45,
            Usage::LED { usage: LED::PaperOut } => 8 << 16 | 46,
            Usage::LED { usage: LED::PaperJam } => 8 << 16 | 47,
            Usage::LED { usage: LED::Remote } => 8 << 16 | 48,
            Usage::LED { usage: LED::Forward } => 8 << 16 | 49,
            Usage::LED { usage: LED::Reverse } => 8 << 16 | 50,
            Usage::LED { usage: LED::Stop } => 8 << 16 | 51,
            Usage::LED { usage: LED::Rewind } => 8 << 16 | 52,
            Usage::LED { usage: LED::FastForward } => 8 << 16 | 53,
            Usage::LED { usage: LED::Play } => 8 << 16 | 54,
            Usage::LED { usage: LED::Pause } => 8 << 16 | 55,
            Usage::LED { usage: LED::Record } => 8 << 16 | 56,
            Usage::LED { usage: LED::Error } => 8 << 16 | 57,
            Usage::LED { usage: LED::UsageSelectedIndicator } => 8 << 16 | 58,
            Usage::LED { usage: LED::UsageInUseIndicator } => 8 << 16 | 59,
            Usage::LED { usage: LED::UsageMultiModeIndicator } => 8 << 16 | 60,
            Usage::LED { usage: LED::IndicatorOn } => 8 << 16 | 61,
            Usage::LED { usage: LED::IndicatorFlash } => 8 << 16 | 62,
            Usage::LED { usage: LED::IndicatorSlowBlink } => 8 << 16 | 63,
            Usage::LED { usage: LED::IndicatorFastBlink } => 8 << 16 | 64,
            Usage::LED { usage: LED::IndicatorOff } => 8 << 16 | 65,
            Usage::LED { usage: LED::FlashOnTime } => 8 << 16 | 66,
            Usage::LED { usage: LED::SlowBlinkOnTime } => 8 << 16 | 67,
            Usage::LED { usage: LED::SlowBlinkOffTime } => 8 << 16 | 68,
            Usage::LED { usage: LED::FastBlinkOnTime } => 8 << 16 | 69,
            Usage::LED { usage: LED::FastBlinkOffTime } => 8 << 16 | 70,
            Usage::LED { usage: LED::UsageIndicatorColor } => 8 << 16 | 71,
            Usage::LED { usage: LED::IndicatorRed } => 8 << 16 | 72,
            Usage::LED { usage: LED::IndicatorGreen } => 8 << 16 | 73,
            Usage::LED { usage: LED::IndicatorAmber } => 8 << 16 | 74,
            Usage::LED { usage: LED::GenericIndicator } => 8 << 16 | 75,
            Usage::LED { usage: LED::SystemSuspend } => 8 << 16 | 76,
            Usage::LED { usage: LED::ExternalPowerConnected } => 8 << 16 | 77,
            Usage::LED { usage: LED::IndicatorBlue } => 8 << 16 | 78,
            Usage::LED { usage: LED::IndicatorOrange } => 8 << 16 | 79,
            Usage::LED { usage: LED::GoodStatus } => 8 << 16 | 80,
            Usage::LED { usage: LED::WarningStatus } => 8 << 16 | 81,
            Usage::LED { usage: LED::RGBLED } => 8 << 16 | 82,
            Usage::LED { usage: LED::RedLEDChannel } => 8 << 16 | 83,
            Usage::LED { usage: LED::BlueLEDChannel } => 8 << 16 | 84,
            Usage::LED { usage: LED::GreenLEDChannel } => 8 << 16 | 85,
            Usage::LED { usage: LED::LEDIntensity } => 8 << 16 | 86,
            Usage::LED { usage: LED::SystemMicrophoneMute } => 8 << 16 | 87,
            Usage::LED { usage: LED::PlayerIndicator } => 8 << 16 | 96,
            Usage::LED { usage: LED::Player1 } => 8 << 16 | 97,
            Usage::LED { usage: LED::Player2 } => 8 << 16 | 98,
            Usage::LED { usage: LED::Player3 } => 8 << 16 | 99,
            Usage::LED { usage: LED::Player4 } => 8 << 16 | 100,
            Usage::LED { usage: LED::Player5 } => 8 << 16 | 101,
            Usage::LED { usage: LED::Player6 } => 8 << 16 | 102,
            Usage::LED { usage: LED::Player7 } => 8 << 16 | 103,
            Usage::LED { usage: LED::Player8 } => 8 << 16 | 104,
            Usage::TelephonyDevice { usage: TelephonyDevice::Phone } => 11 << 16 | 1,
            Usage::TelephonyDevice { usage: TelephonyDevice::AnsweringMachine } => 11 << 16 | 2,
            Usage::TelephonyDevice { usage: TelephonyDevice::MessageControls } => 11 << 16 | 3,
            Usage::TelephonyDevice { usage: TelephonyDevice::Handset } => 11 << 16 | 4,
            Usage::TelephonyDevice { usage: TelephonyDevice::Headset } => 11 << 16 | 5,
            Usage::TelephonyDevice { usage: TelephonyDevice::TelephonyKeyPad } => 11 << 16 | 6,
            Usage::TelephonyDevice { usage: TelephonyDevice::ProgrammableButton } => 11 << 16 | 7,
            Usage::TelephonyDevice { usage: TelephonyDevice::HookSwitch } => 11 << 16 | 32,
            Usage::TelephonyDevice { usage: TelephonyDevice::Flash } => 11 << 16 | 33,
            Usage::TelephonyDevice { usage: TelephonyDevice::Feature } => 11 << 16 | 34,
            Usage::TelephonyDevice { usage: TelephonyDevice::Hold } => 11 << 16 | 35,
            Usage::TelephonyDevice { usage: TelephonyDevice::Redial } => 11 << 16 | 36,
            Usage::TelephonyDevice { usage: TelephonyDevice::Transfer } => 11 << 16 | 37,
            Usage::TelephonyDevice { usage: TelephonyDevice::Drop } => 11 << 16 | 38,
            Usage::TelephonyDevice { usage: TelephonyDevice::Park } => 11 << 16 | 39,
            Usage::TelephonyDevice { usage: TelephonyDevice::ForwardCalls } => 11 << 16 | 40,
            Usage::TelephonyDevice { usage: TelephonyDevice::AlternateFunction } => 11 << 16 | 41,
            Usage::TelephonyDevice { usage: TelephonyDevice::Line } => 11 << 16 | 42,
            Usage::TelephonyDevice { usage: TelephonyDevice::SpeakerPhone } => 11 << 16 | 43,
            Usage::TelephonyDevice { usage: TelephonyDevice::Conference } => 11 << 16 | 44,
            Usage::TelephonyDevice { usage: TelephonyDevice::RingEnable } => 11 << 16 | 45,
            Usage::TelephonyDevice { usage: TelephonyDevice::RingSelect } => 11 << 16 | 46,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneMute } => 11 << 16 | 47,
            Usage::TelephonyDevice { usage: TelephonyDevice::CallerID } => 11 << 16 | 48,
            Usage::TelephonyDevice { usage: TelephonyDevice::Send } => 11 << 16 | 49,
            Usage::TelephonyDevice { usage: TelephonyDevice::SpeedDial } => 11 << 16 | 80,
            Usage::TelephonyDevice { usage: TelephonyDevice::StoreNumber } => 11 << 16 | 81,
            Usage::TelephonyDevice { usage: TelephonyDevice::RecallNumber } => 11 << 16 | 82,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneDirectory } => 11 << 16 | 83,
            Usage::TelephonyDevice { usage: TelephonyDevice::VoiceMail } => 11 << 16 | 112,
            Usage::TelephonyDevice { usage: TelephonyDevice::ScreenCalls } => 11 << 16 | 113,
            Usage::TelephonyDevice { usage: TelephonyDevice::DoNotDisturb } => 11 << 16 | 114,
            Usage::TelephonyDevice { usage: TelephonyDevice::Message } => 11 << 16 | 115,
            Usage::TelephonyDevice { usage: TelephonyDevice::AnswerOnOff } => 11 << 16 | 116,
            Usage::TelephonyDevice { usage: TelephonyDevice::InsideDialTone } => 11 << 16 | 144,
            Usage::TelephonyDevice { usage: TelephonyDevice::OutsideDialTone } => 11 << 16 | 145,
            Usage::TelephonyDevice { usage: TelephonyDevice::InsideRingTone } => 11 << 16 | 146,
            Usage::TelephonyDevice { usage: TelephonyDevice::OutsideRingTone } => 11 << 16 | 147,
            Usage::TelephonyDevice { usage: TelephonyDevice::PriorityRingTone } => 11 << 16 | 148,
            Usage::TelephonyDevice { usage: TelephonyDevice::InsideRingback } => 11 << 16 | 149,
            Usage::TelephonyDevice { usage: TelephonyDevice::PriorityRingback } => 11 << 16 | 150,
            Usage::TelephonyDevice { usage: TelephonyDevice::LineBusyTone } => 11 << 16 | 151,
            Usage::TelephonyDevice { usage: TelephonyDevice::ReorderTone } => 11 << 16 | 152,
            Usage::TelephonyDevice { usage: TelephonyDevice::CallWaitingTone } => 11 << 16 | 153,
            Usage::TelephonyDevice { usage: TelephonyDevice::ConfirmationTone1 } => 11 << 16 | 154,
            Usage::TelephonyDevice { usage: TelephonyDevice::ConfirmationTone2 } => 11 << 16 | 155,
            Usage::TelephonyDevice { usage: TelephonyDevice::TonesOff } => 11 << 16 | 156,
            Usage::TelephonyDevice { usage: TelephonyDevice::OutsideRingback } => 11 << 16 | 157,
            Usage::TelephonyDevice { usage: TelephonyDevice::Ringer } => 11 << 16 | 158,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey0 } => 11 << 16 | 176,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey1 } => 11 << 16 | 177,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey2 } => 11 << 16 | 178,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey3 } => 11 << 16 | 179,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey4 } => 11 << 16 | 180,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey5 } => 11 << 16 | 181,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey6 } => 11 << 16 | 182,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey7 } => 11 << 16 | 183,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey8 } => 11 << 16 | 184,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey9 } => 11 << 16 | 185,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyStar } => 11 << 16 | 186,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyPound } => 11 << 16 | 187,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyA } => 11 << 16 | 188,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyB } => 11 << 16 | 189,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyC } => 11 << 16 | 190,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyD } => 11 << 16 | 191,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneCallHistoryKey } => 11 << 16 | 192,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneCallerIDKey } => 11 << 16 | 193,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneSettingsKey } => 11 << 16 | 194,
            Usage::TelephonyDevice { usage: TelephonyDevice::HostControl } => 11 << 16 | 240,
            Usage::TelephonyDevice { usage: TelephonyDevice::HostAvailable } => 11 << 16 | 241,
            Usage::TelephonyDevice { usage: TelephonyDevice::HostCallActive } => 11 << 16 | 242,
            Usage::TelephonyDevice { usage: TelephonyDevice::ActivateHandsetAudio } => 11 << 16 | 243,
            Usage::TelephonyDevice { usage: TelephonyDevice::RingType } => 11 << 16 | 244,
            Usage::TelephonyDevice { usage: TelephonyDevice::RedialablePhoneNumber } => 11 << 16 | 245,
            Usage::TelephonyDevice { usage: TelephonyDevice::StopRingTone } => 11 << 16 | 248,
            Usage::TelephonyDevice { usage: TelephonyDevice::PSTNRingTone } => 11 << 16 | 249,
            Usage::TelephonyDevice { usage: TelephonyDevice::HostRingTone } => 11 << 16 | 250,
            Usage::TelephonyDevice { usage: TelephonyDevice::AlertSoundError } => 11 << 16 | 251,
            Usage::TelephonyDevice { usage: TelephonyDevice::AlertSoundConfirm } => 11 << 16 | 252,
            Usage::TelephonyDevice { usage: TelephonyDevice::AlertSoundNotification } => 11 << 16 | 253,
            Usage::TelephonyDevice { usage: TelephonyDevice::SilentRing } => 11 << 16 | 254,
            Usage::TelephonyDevice { usage: TelephonyDevice::EmailMessageWaiting } => 11 << 16 | 264,
            Usage::TelephonyDevice { usage: TelephonyDevice::VoicemailMessageWaiting } => 11 << 16 | 265,
            Usage::TelephonyDevice { usage: TelephonyDevice::HostHold } => 11 << 16 | 266,
            Usage::TelephonyDevice { usage: TelephonyDevice::IncomingCallHistoryCount } => 11 << 16 | 272,
            Usage::TelephonyDevice { usage: TelephonyDevice::OutgoingCallHistoryCount } => 11 << 16 | 273,
            Usage::TelephonyDevice { usage: TelephonyDevice::IncomingCallHistory } => 11 << 16 | 274,
            Usage::TelephonyDevice { usage: TelephonyDevice::OutgoingCallHistory } => 11 << 16 | 275,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneLocale } => 11 << 16 | 276,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneTimeSecond } => 11 << 16 | 320,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneTimeMinute } => 11 << 16 | 321,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneTimeHour } => 11 << 16 | 322,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneDateDay } => 11 << 16 | 323,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneDateMonth } => 11 << 16 | 324,
            Usage::TelephonyDevice { usage: TelephonyDevice::PhoneDateYear } => 11 << 16 | 325,
            Usage::TelephonyDevice { usage: TelephonyDevice::HandsetNickname } => 11 << 16 | 326,
            Usage::TelephonyDevice { usage: TelephonyDevice::AddressBookID } => 11 << 16 | 327,
            Usage::TelephonyDevice { usage: TelephonyDevice::CallDuration } => 11 << 16 | 330,
            Usage::TelephonyDevice { usage: TelephonyDevice::DualModePhone } => 11 << 16 | 331,
            Usage::Consumer { usage: Consumer::ConsumerControl } => 12 << 16 | 1,
            Usage::Consumer { usage: Consumer::NumericKeyPad } => 12 << 16 | 2,
            Usage::Consumer { usage: Consumer::ProgrammableButtons } => 12 << 16 | 3,
            Usage::Consumer { usage: Consumer::Microphone } => 12 << 16 | 4,
            Usage::Consumer { usage: Consumer::Headphone } => 12 << 16 | 5,
            Usage::Consumer { usage: Consumer::GraphicEqualizer } => 12 << 16 | 6,
            Usage::Consumer { usage: Consumer::Plus10 } => 12 << 16 | 32,
            Usage::Consumer { usage: Consumer::Plus100 } => 12 << 16 | 33,
            Usage::Consumer { usage: Consumer::AMPM } => 12 << 16 | 34,
            Usage::Consumer { usage: Consumer::Power } => 12 << 16 | 48,
            Usage::Consumer { usage: Consumer::Reset } => 12 << 16 | 49,
            Usage::Consumer { usage: Consumer::Sleep } => 12 << 16 | 50,
            Usage::Consumer { usage: Consumer::SleepAfter } => 12 << 16 | 51,
            Usage::Consumer { usage: Consumer::SleepMode } => 12 << 16 | 52,
            Usage::Consumer { usage: Consumer::Illumination } => 12 << 16 | 53,
            Usage::Consumer { usage: Consumer::FunctionButtons } => 12 << 16 | 54,
            Usage::Consumer { usage: Consumer::Menu } => 12 << 16 | 64,
            Usage::Consumer { usage: Consumer::MenuPick } => 12 << 16 | 65,
            Usage::Consumer { usage: Consumer::MenuUp } => 12 << 16 | 66,
            Usage::Consumer { usage: Consumer::MenuDown } => 12 << 16 | 67,
            Usage::Consumer { usage: Consumer::MenuLeft } => 12 << 16 | 68,
            Usage::Consumer { usage: Consumer::MenuRight } => 12 << 16 | 69,
            Usage::Consumer { usage: Consumer::MenuEscape } => 12 << 16 | 70,
            Usage::Consumer { usage: Consumer::MenuValueIncrease } => 12 << 16 | 71,
            Usage::Consumer { usage: Consumer::MenuValueDecrease } => 12 << 16 | 72,
            Usage::Consumer { usage: Consumer::DataOnScreen } => 12 << 16 | 96,
            Usage::Consumer { usage: Consumer::ClosedCaption } => 12 << 16 | 97,
            Usage::Consumer { usage: Consumer::ClosedCaptionSelect } => 12 << 16 | 98,
            Usage::Consumer { usage: Consumer::VCRTV } => 12 << 16 | 99,
            Usage::Consumer { usage: Consumer::BroadcastMode } => 12 << 16 | 100,
            Usage::Consumer { usage: Consumer::Snapshot } => 12 << 16 | 101,
            Usage::Consumer { usage: Consumer::Still } => 12 << 16 | 102,
            Usage::Consumer { usage: Consumer::PictureinPictureToggle } => 12 << 16 | 103,
            Usage::Consumer { usage: Consumer::PictureinPictureSwap } => 12 << 16 | 104,
            Usage::Consumer { usage: Consumer::RedMenuButton } => 12 << 16 | 105,
            Usage::Consumer { usage: Consumer::GreenMenuButton } => 12 << 16 | 106,
            Usage::Consumer { usage: Consumer::BlueMenuButton } => 12 << 16 | 107,
            Usage::Consumer { usage: Consumer::YellowMenuButton } => 12 << 16 | 108,
            Usage::Consumer { usage: Consumer::Aspect } => 12 << 16 | 109,
            Usage::Consumer { usage: Consumer::ThreeDModeSelect } => 12 << 16 | 110,
            Usage::Consumer { usage: Consumer::DisplayBrightnessIncrement } => 12 << 16 | 111,
            Usage::Consumer { usage: Consumer::DisplayBrightnessDecrement } => 12 << 16 | 112,
            Usage::Consumer { usage: Consumer::DisplayBrightness } => 12 << 16 | 113,
            Usage::Consumer { usage: Consumer::DisplayBacklightToggle } => 12 << 16 | 114,
            Usage::Consumer { usage: Consumer::DisplaySetBrightnesstoMinimum } => 12 << 16 | 115,
            Usage::Consumer { usage: Consumer::DisplaySetBrightnesstoMaximum } => 12 << 16 | 116,
            Usage::Consumer { usage: Consumer::DisplaySetAutoBrightness } => 12 << 16 | 117,
            Usage::Consumer { usage: Consumer::CameraAccessEnabled } => 12 << 16 | 118,
            Usage::Consumer { usage: Consumer::CameraAccessDisabled } => 12 << 16 | 119,
            Usage::Consumer { usage: Consumer::CameraAccessToggle } => 12 << 16 | 120,
            Usage::Consumer { usage: Consumer::KeyboardBrightnessIncrement } => 12 << 16 | 121,
            Usage::Consumer { usage: Consumer::KeyboardBrightnessDecrement } => 12 << 16 | 122,
            Usage::Consumer { usage: Consumer::KeyboardBacklightSetLevel } => 12 << 16 | 123,
            Usage::Consumer { usage: Consumer::KeyboardBacklightOOC } => 12 << 16 | 124,
            Usage::Consumer { usage: Consumer::KeyboardBacklightSetMinimum } => 12 << 16 | 125,
            Usage::Consumer { usage: Consumer::KeyboardBacklightSetMaximum } => 12 << 16 | 126,
            Usage::Consumer { usage: Consumer::KeyboardBacklightAuto } => 12 << 16 | 127,
            Usage::Consumer { usage: Consumer::Selection } => 12 << 16 | 128,
            Usage::Consumer { usage: Consumer::AssignSelection } => 12 << 16 | 129,
            Usage::Consumer { usage: Consumer::ModeStep } => 12 << 16 | 130,
            Usage::Consumer { usage: Consumer::RecallLast } => 12 << 16 | 131,
            Usage::Consumer { usage: Consumer::EnterChannel } => 12 << 16 | 132,
            Usage::Consumer { usage: Consumer::OrderMovie } => 12 << 16 | 133,
            Usage::Consumer { usage: Consumer::Channel } => 12 << 16 | 134,
            Usage::Consumer { usage: Consumer::MediaSelection } => 12 << 16 | 135,
            Usage::Consumer { usage: Consumer::MediaSelectComputer } => 12 << 16 | 136,
            Usage::Consumer { usage: Consumer::MediaSelectTV } => 12 << 16 | 137,
            Usage::Consumer { usage: Consumer::MediaSelectWWW } => 12 << 16 | 138,
            Usage::Consumer { usage: Consumer::MediaSelectDVD } => 12 << 16 | 139,
            Usage::Consumer { usage: Consumer::MediaSelectTelephone } => 12 << 16 | 140,
            Usage::Consumer { usage: Consumer::MediaSelectProgramGuide } => 12 << 16 | 141,
            Usage::Consumer { usage: Consumer::MediaSelectVideoPhone } => 12 << 16 | 142,
            Usage::Consumer { usage: Consumer::MediaSelectGames } => 12 << 16 | 143,
            Usage::Consumer { usage: Consumer::MediaSelectMessages } => 12 << 16 | 144,
            Usage::Consumer { usage: Consumer::MediaSelectCD } => 12 << 16 | 145,
            Usage::Consumer { usage: Consumer::MediaSelectVCR } => 12 << 16 | 146,
            Usage::Consumer { usage: Consumer::MediaSelectTuner } => 12 << 16 | 147,
            Usage::Consumer { usage: Consumer::Quit } => 12 << 16 | 148,
            Usage::Consumer { usage: Consumer::Help } => 12 << 16 | 149,
            Usage::Consumer { usage: Consumer::MediaSelectTape } => 12 << 16 | 150,
            Usage::Consumer { usage: Consumer::MediaSelectCable } => 12 << 16 | 151,
            Usage::Consumer { usage: Consumer::MediaSelectSatellite } => 12 << 16 | 152,
            Usage::Consumer { usage: Consumer::MediaSelectSecurity } => 12 << 16 | 153,
            Usage::Consumer { usage: Consumer::MediaSelectHome } => 12 << 16 | 154,
            Usage::Consumer { usage: Consumer::MediaSelectCall } => 12 << 16 | 155,
            Usage::Consumer { usage: Consumer::ChannelIncrement } => 12 << 16 | 156,
            Usage::Consumer { usage: Consumer::ChannelDecrement } => 12 << 16 | 157,
            Usage::Consumer { usage: Consumer::MediaSelectSAP } => 12 << 16 | 158,
            Usage::Consumer { usage: Consumer::VCRPlus } => 12 << 16 | 160,
            Usage::Consumer { usage: Consumer::Once } => 12 << 16 | 161,
            Usage::Consumer { usage: Consumer::Daily } => 12 << 16 | 162,
            Usage::Consumer { usage: Consumer::Weekly } => 12 << 16 | 163,
            Usage::Consumer { usage: Consumer::Monthly } => 12 << 16 | 164,
            Usage::Consumer { usage: Consumer::Play } => 12 << 16 | 176,
            Usage::Consumer { usage: Consumer::Pause } => 12 << 16 | 177,
            Usage::Consumer { usage: Consumer::Record } => 12 << 16 | 178,
            Usage::Consumer { usage: Consumer::FastForward } => 12 << 16 | 179,
            Usage::Consumer { usage: Consumer::Rewind } => 12 << 16 | 180,
            Usage::Consumer { usage: Consumer::ScanNextTrack } => 12 << 16 | 181,
            Usage::Consumer { usage: Consumer::ScanPreviousTrack } => 12 << 16 | 182,
            Usage::Consumer { usage: Consumer::Stop } => 12 << 16 | 183,
            Usage::Consumer { usage: Consumer::Eject } => 12 << 16 | 184,
            Usage::Consumer { usage: Consumer::RandomPlay } => 12 << 16 | 185,
            Usage::Consumer { usage: Consumer::SelectDisc } => 12 << 16 | 186,
            Usage::Consumer { usage: Consumer::EnterDisc } => 12 << 16 | 187,
            Usage::Consumer { usage: Consumer::Repeat } => 12 << 16 | 188,
            Usage::Consumer { usage: Consumer::Tracking } => 12 << 16 | 189,
            Usage::Consumer { usage: Consumer::TrackNormal } => 12 << 16 | 190,
            Usage::Consumer { usage: Consumer::SlowTracking } => 12 << 16 | 191,
            Usage::Consumer { usage: Consumer::FrameForward } => 12 << 16 | 192,
            Usage::Consumer { usage: Consumer::FrameBack } => 12 << 16 | 193,
            Usage::Consumer { usage: Consumer::Mark } => 12 << 16 | 194,
            Usage::Consumer { usage: Consumer::ClearMark } => 12 << 16 | 195,
            Usage::Consumer { usage: Consumer::RepeatFromMark } => 12 << 16 | 196,
            Usage::Consumer { usage: Consumer::ReturnToMark } => 12 << 16 | 197,
            Usage::Consumer { usage: Consumer::SearchMarkForward } => 12 << 16 | 198,
            Usage::Consumer { usage: Consumer::SearchMarkBackwards } => 12 << 16 | 199,
            Usage::Consumer { usage: Consumer::CounterReset } => 12 << 16 | 200,
            Usage::Consumer { usage: Consumer::ShowCounter } => 12 << 16 | 201,
            Usage::Consumer { usage: Consumer::TrackingIncrement } => 12 << 16 | 202,
            Usage::Consumer { usage: Consumer::TrackingDecrement } => 12 << 16 | 203,
            Usage::Consumer { usage: Consumer::StopEject } => 12 << 16 | 204,
            Usage::Consumer { usage: Consumer::PlayPause } => 12 << 16 | 205,
            Usage::Consumer { usage: Consumer::PlaySkip } => 12 << 16 | 206,
            Usage::Consumer { usage: Consumer::VoiceCommand } => 12 << 16 | 207,
            Usage::Consumer { usage: Consumer::InvokeCaptureInterface } => 12 << 16 | 208,
            Usage::Consumer { usage: Consumer::StartorStopGameRecording } => 12 << 16 | 209,
            Usage::Consumer { usage: Consumer::HistoricalGameCapture } => 12 << 16 | 210,
            Usage::Consumer { usage: Consumer::CaptureGameScreenshot } => 12 << 16 | 211,
            Usage::Consumer { usage: Consumer::ShoworHideRecordingIndicator } => 12 << 16 | 212,
            Usage::Consumer { usage: Consumer::StartorStopMicrophoneCapture } => 12 << 16 | 213,
            Usage::Consumer { usage: Consumer::StartorStopCameraCapture } => 12 << 16 | 214,
            Usage::Consumer { usage: Consumer::StartorStopGameBroadcast } => 12 << 16 | 215,
            Usage::Consumer { usage: Consumer::StartorStopVoiceDictationSession } => 12 << 16 | 216,
            Usage::Consumer { usage: Consumer::InvokeDismissEmojiPicker } => 12 << 16 | 217,
            Usage::Consumer { usage: Consumer::Volume } => 12 << 16 | 224,
            Usage::Consumer { usage: Consumer::Balance } => 12 << 16 | 225,
            Usage::Consumer { usage: Consumer::Mute } => 12 << 16 | 226,
            Usage::Consumer { usage: Consumer::Bass } => 12 << 16 | 227,
            Usage::Consumer { usage: Consumer::Treble } => 12 << 16 | 228,
            Usage::Consumer { usage: Consumer::BassBoost } => 12 << 16 | 229,
            Usage::Consumer { usage: Consumer::SurroundMode } => 12 << 16 | 230,
            Usage::Consumer { usage: Consumer::Loudness } => 12 << 16 | 231,
            Usage::Consumer { usage: Consumer::MPX } => 12 << 16 | 232,
            Usage::Consumer { usage: Consumer::VolumeIncrement } => 12 << 16 | 233,
            Usage::Consumer { usage: Consumer::VolumeDecrement } => 12 << 16 | 234,
            Usage::Consumer { usage: Consumer::SpeedSelect } => 12 << 16 | 240,
            Usage::Consumer { usage: Consumer::PlaybackSpeed } => 12 << 16 | 241,
            Usage::Consumer { usage: Consumer::StandardPlay } => 12 << 16 | 242,
            Usage::Consumer { usage: Consumer::LongPlay } => 12 << 16 | 243,
            Usage::Consumer { usage: Consumer::ExtendedPlay } => 12 << 16 | 244,
            Usage::Consumer { usage: Consumer::Slow } => 12 << 16 | 245,
            Usage::Consumer { usage: Consumer::FanEnable } => 12 << 16 | 256,
            Usage::Consumer { usage: Consumer::FanSpeed } => 12 << 16 | 257,
            Usage::Consumer { usage: Consumer::LightEnable } => 12 << 16 | 258,
            Usage::Consumer { usage: Consumer::LightIlluminationLevel } => 12 << 16 | 259,
            Usage::Consumer { usage: Consumer::ClimateControlEnable } => 12 << 16 | 260,
            Usage::Consumer { usage: Consumer::RoomTemperature } => 12 << 16 | 261,
            Usage::Consumer { usage: Consumer::SecurityEnable } => 12 << 16 | 262,
            Usage::Consumer { usage: Consumer::FireAlarm } => 12 << 16 | 263,
            Usage::Consumer { usage: Consumer::PoliceAlarm } => 12 << 16 | 264,
            Usage::Consumer { usage: Consumer::Proximity } => 12 << 16 | 265,
            Usage::Consumer { usage: Consumer::Motion } => 12 << 16 | 266,
            Usage::Consumer { usage: Consumer::DuressAlarm } => 12 << 16 | 267,
            Usage::Consumer { usage: Consumer::HoldupAlarm } => 12 << 16 | 268,
            Usage::Consumer { usage: Consumer::MedicalAlarm } => 12 << 16 | 269,
            Usage::Consumer { usage: Consumer::BalanceRight } => 12 << 16 | 336,
            Usage::Consumer { usage: Consumer::BalanceLeft } => 12 << 16 | 337,
            Usage::Consumer { usage: Consumer::BassIncrement } => 12 << 16 | 338,
            Usage::Consumer { usage: Consumer::BassDecrement } => 12 << 16 | 339,
            Usage::Consumer { usage: Consumer::TrebleIncrement } => 12 << 16 | 340,
            Usage::Consumer { usage: Consumer::TrebleDecrement } => 12 << 16 | 341,
            Usage::Consumer { usage: Consumer::SpeakerSystem } => 12 << 16 | 352,
            Usage::Consumer { usage: Consumer::ChannelLeft } => 12 << 16 | 353,
            Usage::Consumer { usage: Consumer::ChannelRight } => 12 << 16 | 354,
            Usage::Consumer { usage: Consumer::ChannelCenter } => 12 << 16 | 355,
            Usage::Consumer { usage: Consumer::ChannelFront } => 12 << 16 | 356,
            Usage::Consumer { usage: Consumer::ChannelCenterFront } => 12 << 16 | 357,
            Usage::Consumer { usage: Consumer::ChannelSide } => 12 << 16 | 358,
            Usage::Consumer { usage: Consumer::ChannelSurround } => 12 << 16 | 359,
            Usage::Consumer { usage: Consumer::ChannelLowFrequencyEnhancement } => 12 << 16 | 360,
            Usage::Consumer { usage: Consumer::ChannelTop } => 12 << 16 | 361,
            Usage::Consumer { usage: Consumer::ChannelUnknown } => 12 << 16 | 362,
            Usage::Consumer { usage: Consumer::Subchannel } => 12 << 16 | 368,
            Usage::Consumer { usage: Consumer::SubchannelIncrement } => 12 << 16 | 369,
            Usage::Consumer { usage: Consumer::SubchannelDecrement } => 12 << 16 | 370,
            Usage::Consumer { usage: Consumer::AlternateAudioIncrement } => 12 << 16 | 371,
            Usage::Consumer { usage: Consumer::AlternateAudioDecrement } => 12 << 16 | 372,
            Usage::Consumer { usage: Consumer::ApplicationLaunchButtons } => 12 << 16 | 384,
            Usage::Consumer { usage: Consumer::ALLaunchButtonConfigurationTool } => 12 << 16 | 385,
            Usage::Consumer { usage: Consumer::ALProgrammableButtonConfiguration } => 12 << 16 | 386,
            Usage::Consumer { usage: Consumer::ALConsumerControlConfiguration } => 12 << 16 | 387,
            Usage::Consumer { usage: Consumer::ALWordProcessor } => 12 << 16 | 388,
            Usage::Consumer { usage: Consumer::ALTextEditor } => 12 << 16 | 389,
            Usage::Consumer { usage: Consumer::ALSpreadsheet } => 12 << 16 | 390,
            Usage::Consumer { usage: Consumer::ALGraphicsEditor } => 12 << 16 | 391,
            Usage::Consumer { usage: Consumer::ALPresentationApp } => 12 << 16 | 392,
            Usage::Consumer { usage: Consumer::ALDatabaseApp } => 12 << 16 | 393,
            Usage::Consumer { usage: Consumer::ALEmailReader } => 12 << 16 | 394,
            Usage::Consumer { usage: Consumer::ALNewsreader } => 12 << 16 | 395,
            Usage::Consumer { usage: Consumer::ALVoicemail } => 12 << 16 | 396,
            Usage::Consumer { usage: Consumer::ALContactsAddressBook } => 12 << 16 | 397,
            Usage::Consumer { usage: Consumer::ALCalendarSchedule } => 12 << 16 | 398,
            Usage::Consumer { usage: Consumer::ALTaskProjectManager } => 12 << 16 | 399,
            Usage::Consumer { usage: Consumer::ALLogJournalTimecard } => 12 << 16 | 400,
            Usage::Consumer { usage: Consumer::ALCheckbookFinance } => 12 << 16 | 401,
            Usage::Consumer { usage: Consumer::ALCalculator } => 12 << 16 | 402,
            Usage::Consumer { usage: Consumer::ALAVCapturePlayback } => 12 << 16 | 403,
            Usage::Consumer { usage: Consumer::ALLocalMachineBrowser } => 12 << 16 | 404,
            Usage::Consumer { usage: Consumer::ALLANWANBrowser } => 12 << 16 | 405,
            Usage::Consumer { usage: Consumer::ALInternetBrowser } => 12 << 16 | 406,
            Usage::Consumer { usage: Consumer::ALRemoteNetworkingISPConnect } => 12 << 16 | 407,
            Usage::Consumer { usage: Consumer::ALNetworkConference } => 12 << 16 | 408,
            Usage::Consumer { usage: Consumer::ALNetworkChat } => 12 << 16 | 409,
            Usage::Consumer { usage: Consumer::ALTelephonyDialer } => 12 << 16 | 410,
            Usage::Consumer { usage: Consumer::ALLogon } => 12 << 16 | 411,
            Usage::Consumer { usage: Consumer::ALLogoff } => 12 << 16 | 412,
            Usage::Consumer { usage: Consumer::ALLogonLogoff } => 12 << 16 | 413,
            Usage::Consumer { usage: Consumer::ALTerminalLockScreensaver } => 12 << 16 | 414,
            Usage::Consumer { usage: Consumer::ALControlPanel } => 12 << 16 | 415,
            Usage::Consumer { usage: Consumer::ALCommandLineProcessorRun } => 12 << 16 | 416,
            Usage::Consumer { usage: Consumer::ALProcessTaskManager } => 12 << 16 | 417,
            Usage::Consumer { usage: Consumer::ALSelectTaskApplication } => 12 << 16 | 418,
            Usage::Consumer { usage: Consumer::ALNextTaskApplication } => 12 << 16 | 419,
            Usage::Consumer { usage: Consumer::ALPreviousTaskApplication } => 12 << 16 | 420,
            Usage::Consumer { usage: Consumer::ALPreemptiveHaltTaskApplication } => 12 << 16 | 421,
            Usage::Consumer { usage: Consumer::ALIntegratedHelpCenter } => 12 << 16 | 422,
            Usage::Consumer { usage: Consumer::ALDocuments } => 12 << 16 | 423,
            Usage::Consumer { usage: Consumer::ALThesaurus } => 12 << 16 | 424,
            Usage::Consumer { usage: Consumer::ALDictionary } => 12 << 16 | 425,
            Usage::Consumer { usage: Consumer::ALDesktop } => 12 << 16 | 426,
            Usage::Consumer { usage: Consumer::ALSpellCheck } => 12 << 16 | 427,
            Usage::Consumer { usage: Consumer::ALGrammarCheck } => 12 << 16 | 428,
            Usage::Consumer { usage: Consumer::ALWirelessStatus } => 12 << 16 | 429,
            Usage::Consumer { usage: Consumer::ALKeyboardLayout } => 12 << 16 | 430,
            Usage::Consumer { usage: Consumer::ALVirusProtection } => 12 << 16 | 431,
            Usage::Consumer { usage: Consumer::ALEncryption } => 12 << 16 | 432,
            Usage::Consumer { usage: Consumer::ALScreenSaver } => 12 << 16 | 433,
            Usage::Consumer { usage: Consumer::ALAlarms } => 12 << 16 | 434,
            Usage::Consumer { usage: Consumer::ALClock } => 12 << 16 | 435,
            Usage::Consumer { usage: Consumer::ALFileBrowser } => 12 << 16 | 436,
            Usage::Consumer { usage: Consumer::ALPowerStatus } => 12 << 16 | 437,
            Usage::Consumer { usage: Consumer::ALImageBrowser } => 12 << 16 | 438,
            Usage::Consumer { usage: Consumer::ALAudioBrowser } => 12 << 16 | 439,
            Usage::Consumer { usage: Consumer::ALMovieBrowser } => 12 << 16 | 440,
            Usage::Consumer { usage: Consumer::ALDigitalRightsManager } => 12 << 16 | 441,
            Usage::Consumer { usage: Consumer::ALDigitalWallet } => 12 << 16 | 442,
            Usage::Consumer { usage: Consumer::ALInstantMessaging } => 12 << 16 | 444,
            Usage::Consumer { usage: Consumer::ALOEMFeaturesTipsTutorialBrowser } => 12 << 16 | 445,
            Usage::Consumer { usage: Consumer::ALOEMHelp } => 12 << 16 | 446,
            Usage::Consumer { usage: Consumer::ALOnlineCommunity } => 12 << 16 | 447,
            Usage::Consumer { usage: Consumer::ALEntertainmentContentBrowser } => 12 << 16 | 448,
            Usage::Consumer { usage: Consumer::ALOnlineShoppingBrowser } => 12 << 16 | 449,
            Usage::Consumer { usage: Consumer::ALSmartCardInformationHelp } => 12 << 16 | 450,
            Usage::Consumer { usage: Consumer::ALMarketMonitorFinanceBrowser } => 12 << 16 | 451,
            Usage::Consumer { usage: Consumer::ALCustomizedCorporateNewsBrowser } => 12 << 16 | 452,
            Usage::Consumer { usage: Consumer::ALOnlineActivityBrowser } => 12 << 16 | 453,
            Usage::Consumer { usage: Consumer::ALResearchSearchBrowser } => 12 << 16 | 454,
            Usage::Consumer { usage: Consumer::ALAudioPlayer } => 12 << 16 | 455,
            Usage::Consumer { usage: Consumer::ALMessageStatus } => 12 << 16 | 456,
            Usage::Consumer { usage: Consumer::ALContactSync } => 12 << 16 | 457,
            Usage::Consumer { usage: Consumer::ALNavigation } => 12 << 16 | 458,
            Usage::Consumer { usage: Consumer::ALContextawareDesktopAssistant } => 12 << 16 | 459,
            Usage::Consumer { usage: Consumer::GenericGUIApplicationControls } => 12 << 16 | 512,
            Usage::Consumer { usage: Consumer::ACNew } => 12 << 16 | 513,
            Usage::Consumer { usage: Consumer::ACOpen } => 12 << 16 | 514,
            Usage::Consumer { usage: Consumer::ACClose } => 12 << 16 | 515,
            Usage::Consumer { usage: Consumer::ACExit } => 12 << 16 | 516,
            Usage::Consumer { usage: Consumer::ACMaximize } => 12 << 16 | 517,
            Usage::Consumer { usage: Consumer::ACMinimize } => 12 << 16 | 518,
            Usage::Consumer { usage: Consumer::ACSave } => 12 << 16 | 519,
            Usage::Consumer { usage: Consumer::ACPrint } => 12 << 16 | 520,
            Usage::Consumer { usage: Consumer::ACProperties } => 12 << 16 | 521,
            Usage::Consumer { usage: Consumer::ACUndo } => 12 << 16 | 538,
            Usage::Consumer { usage: Consumer::ACCopy } => 12 << 16 | 539,
            Usage::Consumer { usage: Consumer::ACCut } => 12 << 16 | 540,
            Usage::Consumer { usage: Consumer::ACPaste } => 12 << 16 | 541,
            Usage::Consumer { usage: Consumer::ACSelectAll } => 12 << 16 | 542,
            Usage::Consumer { usage: Consumer::ACFind } => 12 << 16 | 543,
            Usage::Consumer { usage: Consumer::ACFindandReplace } => 12 << 16 | 544,
            Usage::Consumer { usage: Consumer::ACSearch } => 12 << 16 | 545,
            Usage::Consumer { usage: Consumer::ACGoTo } => 12 << 16 | 546,
            Usage::Consumer { usage: Consumer::ACHome } => 12 << 16 | 547,
            Usage::Consumer { usage: Consumer::ACBack } => 12 << 16 | 548,
            Usage::Consumer { usage: Consumer::ACForward } => 12 << 16 | 549,
            Usage::Consumer { usage: Consumer::ACStop } => 12 << 16 | 550,
            Usage::Consumer { usage: Consumer::ACRefresh } => 12 << 16 | 551,
            Usage::Consumer { usage: Consumer::ACPreviousLink } => 12 << 16 | 552,
            Usage::Consumer { usage: Consumer::ACNextLink } => 12 << 16 | 553,
            Usage::Consumer { usage: Consumer::ACBookmarks } => 12 << 16 | 554,
            Usage::Consumer { usage: Consumer::ACHistory } => 12 << 16 | 555,
            Usage::Consumer { usage: Consumer::ACSubscriptions } => 12 << 16 | 556,
            Usage::Consumer { usage: Consumer::ACZoomIn } => 12 << 16 | 557,
            Usage::Consumer { usage: Consumer::ACZoomOut } => 12 << 16 | 558,
            Usage::Consumer { usage: Consumer::ACZoom } => 12 << 16 | 559,
            Usage::Consumer { usage: Consumer::ACFullScreenView } => 12 << 16 | 560,
            Usage::Consumer { usage: Consumer::ACNormalView } => 12 << 16 | 561,
            Usage::Consumer { usage: Consumer::ACViewToggle } => 12 << 16 | 562,
            Usage::Consumer { usage: Consumer::ACScrollUp } => 12 << 16 | 563,
            Usage::Consumer { usage: Consumer::ACScrollDown } => 12 << 16 | 564,
            Usage::Consumer { usage: Consumer::ACScroll } => 12 << 16 | 565,
            Usage::Consumer { usage: Consumer::ACPanLeft } => 12 << 16 | 566,
            Usage::Consumer { usage: Consumer::ACPanRight } => 12 << 16 | 567,
            Usage::Consumer { usage: Consumer::ACPan } => 12 << 16 | 568,
            Usage::Consumer { usage: Consumer::ACNewWindow } => 12 << 16 | 569,
            Usage::Consumer { usage: Consumer::ACTileHorizontally } => 12 << 16 | 570,
            Usage::Consumer { usage: Consumer::ACTileVertically } => 12 << 16 | 571,
            Usage::Consumer { usage: Consumer::ACFormat } => 12 << 16 | 572,
            Usage::Consumer { usage: Consumer::ACEdit } => 12 << 16 | 573,
            Usage::Consumer { usage: Consumer::ACBold } => 12 << 16 | 574,
            Usage::Consumer { usage: Consumer::ACItalics } => 12 << 16 | 575,
            Usage::Consumer { usage: Consumer::ACUnderline } => 12 << 16 | 576,
            Usage::Consumer { usage: Consumer::ACStrikethrough } => 12 << 16 | 577,
            Usage::Consumer { usage: Consumer::ACSubscript } => 12 << 16 | 578,
            Usage::Consumer { usage: Consumer::ACSuperscript } => 12 << 16 | 579,
            Usage::Consumer { usage: Consumer::ACAllCaps } => 12 << 16 | 580,
            Usage::Consumer { usage: Consumer::ACRotate } => 12 << 16 | 581,
            Usage::Consumer { usage: Consumer::ACResize } => 12 << 16 | 582,
            Usage::Consumer { usage: Consumer::ACFlipHorizontal } => 12 << 16 | 583,
            Usage::Consumer { usage: Consumer::ACFlipVertical } => 12 << 16 | 584,
            Usage::Consumer { usage: Consumer::ACMirrorHorizontal } => 12 << 16 | 585,
            Usage::Consumer { usage: Consumer::ACMirrorVertical } => 12 << 16 | 586,
            Usage::Consumer { usage: Consumer::ACFontSelect } => 12 << 16 | 587,
            Usage::Consumer { usage: Consumer::ACFontColor } => 12 << 16 | 588,
            Usage::Consumer { usage: Consumer::ACFontSize } => 12 << 16 | 589,
            Usage::Consumer { usage: Consumer::ACJustifyLeft } => 12 << 16 | 590,
            Usage::Consumer { usage: Consumer::ACJustifyCenterH } => 12 << 16 | 591,
            Usage::Consumer { usage: Consumer::ACJustifyRight } => 12 << 16 | 592,
            Usage::Consumer { usage: Consumer::ACJustifyBlockH } => 12 << 16 | 593,
            Usage::Consumer { usage: Consumer::ACJustifyTop } => 12 << 16 | 594,
            Usage::Consumer { usage: Consumer::ACJustifyCenterV } => 12 << 16 | 595,
            Usage::Consumer { usage: Consumer::ACJustifyBottom } => 12 << 16 | 596,
            Usage::Consumer { usage: Consumer::ACJustifyBlockV } => 12 << 16 | 597,
            Usage::Consumer { usage: Consumer::ACIndentDecrease } => 12 << 16 | 598,
            Usage::Consumer { usage: Consumer::ACIndentIncrease } => 12 << 16 | 599,
            Usage::Consumer { usage: Consumer::ACNumberedList } => 12 << 16 | 600,
            Usage::Consumer { usage: Consumer::ACRestartNumbering } => 12 << 16 | 601,
            Usage::Consumer { usage: Consumer::ACBulletedList } => 12 << 16 | 602,
            Usage::Consumer { usage: Consumer::ACPromote } => 12 << 16 | 603,
            Usage::Consumer { usage: Consumer::ACDemote } => 12 << 16 | 604,
            Usage::Consumer { usage: Consumer::ACYes } => 12 << 16 | 605,
            Usage::Consumer { usage: Consumer::ACNo } => 12 << 16 | 606,
            Usage::Consumer { usage: Consumer::ACCancel } => 12 << 16 | 607,
            Usage::Consumer { usage: Consumer::ACCatalog } => 12 << 16 | 608,
            Usage::Consumer { usage: Consumer::ACBuyCheckout } => 12 << 16 | 609,
            Usage::Consumer { usage: Consumer::ACAddtoCart } => 12 << 16 | 610,
            Usage::Consumer { usage: Consumer::ACExpand } => 12 << 16 | 611,
            Usage::Consumer { usage: Consumer::ACExpandAll } => 12 << 16 | 612,
            Usage::Consumer { usage: Consumer::ACCollapse } => 12 << 16 | 613,
            Usage::Consumer { usage: Consumer::ACCollapseAll } => 12 << 16 | 614,
            Usage::Consumer { usage: Consumer::ACPrintPreview } => 12 << 16 | 615,
            Usage::Consumer { usage: Consumer::ACPasteSpecial } => 12 << 16 | 616,
            Usage::Consumer { usage: Consumer::ACInsertMode } => 12 << 16 | 617,
            Usage::Consumer { usage: Consumer::ACDelete } => 12 << 16 | 618,
            Usage::Consumer { usage: Consumer::ACLock } => 12 << 16 | 619,
            Usage::Consumer { usage: Consumer::ACUnlock } => 12 << 16 | 620,
            Usage::Consumer { usage: Consumer::ACProtect } => 12 << 16 | 621,
            Usage::Consumer { usage: Consumer::ACUnprotect } => 12 << 16 | 622,
            Usage::Consumer { usage: Consumer::ACAttachComment } => 12 << 16 | 623,
            Usage::Consumer { usage: Consumer::ACDeleteComment } => 12 << 16 | 624,
            Usage::Consumer { usage: Consumer::ACViewComment } => 12 << 16 | 625,
            Usage::Consumer { usage: Consumer::ACSelectWord } => 12 << 16 | 626,
            Usage::Consumer { usage: Consumer::ACSelectSentence } => 12 << 16 | 627,
            Usage::Consumer { usage: Consumer::ACSelectParagraph } => 12 << 16 | 628,
            Usage::Consumer { usage: Consumer::ACSelectColumn } => 12 << 16 | 629,
            Usage::Consumer { usage: Consumer::ACSelectRow } => 12 << 16 | 630,
            Usage::Consumer { usage: Consumer::ACSelectTable } => 12 << 16 | 631,
            Usage::Consumer { usage: Consumer::ACSelectObject } => 12 << 16 | 632,
            Usage::Consumer { usage: Consumer::ACRedoRepeat } => 12 << 16 | 633,
            Usage::Consumer { usage: Consumer::ACSort } => 12 << 16 | 634,
            Usage::Consumer { usage: Consumer::ACSortAscending } => 12 << 16 | 635,
            Usage::Consumer { usage: Consumer::ACSortDescending } => 12 << 16 | 636,
            Usage::Consumer { usage: Consumer::ACFilter } => 12 << 16 | 637,
            Usage::Consumer { usage: Consumer::ACSetClock } => 12 << 16 | 638,
            Usage::Consumer { usage: Consumer::ACViewClock } => 12 << 16 | 639,
            Usage::Consumer { usage: Consumer::ACSelectTimeZone } => 12 << 16 | 640,
            Usage::Consumer { usage: Consumer::ACEditTimeZones } => 12 << 16 | 641,
            Usage::Consumer { usage: Consumer::ACSetAlarm } => 12 << 16 | 642,
            Usage::Consumer { usage: Consumer::ACClearAlarm } => 12 << 16 | 643,
            Usage::Consumer { usage: Consumer::ACSnoozeAlarm } => 12 << 16 | 644,
            Usage::Consumer { usage: Consumer::ACResetAlarm } => 12 << 16 | 645,
            Usage::Consumer { usage: Consumer::ACSynchronize } => 12 << 16 | 646,
            Usage::Consumer { usage: Consumer::ACSendReceive } => 12 << 16 | 647,
            Usage::Consumer { usage: Consumer::ACSendTo } => 12 << 16 | 648,
            Usage::Consumer { usage: Consumer::ACReply } => 12 << 16 | 649,
            Usage::Consumer { usage: Consumer::ACReplyAll } => 12 << 16 | 650,
            Usage::Consumer { usage: Consumer::ACForwardMsg } => 12 << 16 | 651,
            Usage::Consumer { usage: Consumer::ACSend } => 12 << 16 | 652,
            Usage::Consumer { usage: Consumer::ACAttachFile } => 12 << 16 | 653,
            Usage::Consumer { usage: Consumer::ACUpload } => 12 << 16 | 654,
            Usage::Consumer { usage: Consumer::ACDownloadSaveTargetAs } => 12 << 16 | 655,
            Usage::Consumer { usage: Consumer::ACSetBorders } => 12 << 16 | 656,
            Usage::Consumer { usage: Consumer::ACInsertRow } => 12 << 16 | 657,
            Usage::Consumer { usage: Consumer::ACInsertColumn } => 12 << 16 | 658,
            Usage::Consumer { usage: Consumer::ACInsertFile } => 12 << 16 | 659,
            Usage::Consumer { usage: Consumer::ACInsertPicture } => 12 << 16 | 660,
            Usage::Consumer { usage: Consumer::ACInsertObject } => 12 << 16 | 661,
            Usage::Consumer { usage: Consumer::ACInsertSymbol } => 12 << 16 | 662,
            Usage::Consumer { usage: Consumer::ACSaveandClose } => 12 << 16 | 663,
            Usage::Consumer { usage: Consumer::ACRename } => 12 << 16 | 664,
            Usage::Consumer { usage: Consumer::ACMerge } => 12 << 16 | 665,
            Usage::Consumer { usage: Consumer::ACSplit } => 12 << 16 | 666,
            Usage::Consumer { usage: Consumer::ACDisributeHorizontally } => 12 << 16 | 667,
            Usage::Consumer { usage: Consumer::ACDistributeVertically } => 12 << 16 | 668,
            Usage::Consumer { usage: Consumer::ACNextKeyboardLayoutSelect } => 12 << 16 | 669,
            Usage::Consumer { usage: Consumer::ACNavigationGuidance } => 12 << 16 | 670,
            Usage::Consumer { usage: Consumer::ACDesktopShowAllWindows } => 12 << 16 | 671,
            Usage::Consumer { usage: Consumer::ACSoftKeyLeft } => 12 << 16 | 672,
            Usage::Consumer { usage: Consumer::ACSoftKeyRight } => 12 << 16 | 673,
            Usage::Consumer { usage: Consumer::ACDesktopShowAllApplications } => 12 << 16 | 674,
            Usage::Consumer { usage: Consumer::ACIdleKeepAlive } => 12 << 16 | 688,
            Usage::Consumer { usage: Consumer::ExtendedKeyboardAttributesCollection } => 12 << 16 | 704,
            Usage::Consumer { usage: Consumer::KeyboardFormFactor } => 12 << 16 | 705,
            Usage::Consumer { usage: Consumer::KeyboardKeyType } => 12 << 16 | 706,
            Usage::Consumer { usage: Consumer::KeyboardPhysicalLayout } => 12 << 16 | 707,
            Usage::Consumer { usage: Consumer::VendorSpecificKeyboardPhysicalLayout } => 12 << 16 | 708,
            Usage::Consumer { usage: Consumer::KeyboardIETFLanguageTagIndex } => 12 << 16 | 709,
            Usage::Consumer { usage: Consumer::ImplementedKeyboardInputAssistControls } => 12 << 16 | 710,
            Usage::Consumer { usage: Consumer::KeyboardInputAssistPrevious } => 12 << 16 | 711,
            Usage::Consumer { usage: Consumer::KeyboardInputAssistNext } => 12 << 16 | 712,
            Usage::Consumer { usage: Consumer::KeyboardInputAssistPreviousGroup } => 12 << 16 | 713,
            Usage::Consumer { usage: Consumer::KeyboardInputAssistNextGroup } => 12 << 16 | 714,
            Usage::Consumer { usage: Consumer::KeyboardInputAssistAccept } => 12 << 16 | 715,
            Usage::Consumer { usage: Consumer::KeyboardInputAssistCancel } => 12 << 16 | 716,
            Usage::Consumer { usage: Consumer::PrivacyScreenToggle } => 12 << 16 | 720,
            Usage::Consumer { usage: Consumer::PrivacyScreenLevelDecrement } => 12 << 16 | 721,
            Usage::Consumer { usage: Consumer::PrivacyScreenLevelIncrement } => 12 << 16 | 722,
            Usage::Consumer { usage: Consumer::PrivacyScreenLevelMinimum } => 12 << 16 | 723,
            Usage::Consumer { usage: Consumer::PrivacyScreenLevelMaximum } => 12 << 16 | 724,
            Usage::Consumer { usage: Consumer::ContactEdited } => 12 << 16 | 1280,
            Usage::Consumer { usage: Consumer::ContactAdded } => 12 << 16 | 1281,
            Usage::Consumer { usage: Consumer::ContactRecordActive } => 12 << 16 | 1282,
            Usage::Consumer { usage: Consumer::ContactIndex } => 12 << 16 | 1283,
            Usage::Consumer { usage: Consumer::ContactNickname } => 12 << 16 | 1284,
            Usage::Consumer { usage: Consumer::ContactFirstName } => 12 << 16 | 1285,
            Usage::Consumer { usage: Consumer::ContactLastName } => 12 << 16 | 1286,
            Usage::Consumer { usage: Consumer::ContactFullName } => 12 << 16 | 1287,
            Usage::Consumer { usage: Consumer::ContactPhoneNumberPersonal } => 12 << 16 | 1288,
            Usage::Consumer { usage: Consumer::ContactPhoneNumberBusiness } => 12 << 16 | 1289,
            Usage::Consumer { usage: Consumer::ContactPhoneNumberMobile } => 12 << 16 | 1290,
            Usage::Consumer { usage: Consumer::ContactPhoneNumberPager } => 12 << 16 | 1291,
            Usage::Consumer { usage: Consumer::ContactPhoneNumberFax } => 12 << 16 | 1292,
            Usage::Consumer { usage: Consumer::ContactPhoneNumberOther } => 12 << 16 | 1293,
            Usage::Consumer { usage: Consumer::ContactEmailPersonal } => 12 << 16 | 1294,
            Usage::Consumer { usage: Consumer::ContactEmailBusiness } => 12 << 16 | 1295,
            Usage::Consumer { usage: Consumer::ContactEmailOther } => 12 << 16 | 1296,
            Usage::Consumer { usage: Consumer::ContactEmailMain } => 12 << 16 | 1297,
            Usage::Consumer { usage: Consumer::ContactSpeedDialNumber } => 12 << 16 | 1298,
            Usage::Consumer { usage: Consumer::ContactStatusFlag } => 12 << 16 | 1299,
            Usage::Consumer { usage: Consumer::ContactMisc } => 12 << 16 | 1300,
            Usage::Digitizers { usage: Digitizers::Digitizer } => 13 << 16 | 1,
            Usage::Digitizers { usage: Digitizers::Pen } => 13 << 16 | 2,
            Usage::Digitizers { usage: Digitizers::LightPen } => 13 << 16 | 3,
            Usage::Digitizers { usage: Digitizers::TouchScreen } => 13 << 16 | 4,
            Usage::Digitizers { usage: Digitizers::TouchPad } => 13 << 16 | 5,
            Usage::Digitizers { usage: Digitizers::Whiteboard } => 13 << 16 | 6,
            Usage::Digitizers { usage: Digitizers::CoordinateMeasuringMachine } => 13 << 16 | 7,
            Usage::Digitizers { usage: Digitizers::ThreeDDigitizer } => 13 << 16 | 8,
            Usage::Digitizers { usage: Digitizers::StereoPlotter } => 13 << 16 | 9,
            Usage::Digitizers { usage: Digitizers::ArticulatedArm } => 13 << 16 | 10,
            Usage::Digitizers { usage: Digitizers::Armature } => 13 << 16 | 11,
            Usage::Digitizers { usage: Digitizers::MultiplePointDigitizer } => 13 << 16 | 12,
            Usage::Digitizers { usage: Digitizers::FreeSpaceWand } => 13 << 16 | 13,
            Usage::Digitizers { usage: Digitizers::DeviceConfiguration } => 13 << 16 | 14,
            Usage::Digitizers { usage: Digitizers::CapacitiveHeatMapDigitizer } => 13 << 16 | 15,
            Usage::Digitizers { usage: Digitizers::Stylus } => 13 << 16 | 32,
            Usage::Digitizers { usage: Digitizers::Puck } => 13 << 16 | 33,
            Usage::Digitizers { usage: Digitizers::Finger } => 13 << 16 | 34,
            Usage::Digitizers { usage: Digitizers::Devicesettings } => 13 << 16 | 35,
            Usage::Digitizers { usage: Digitizers::CharacterGesture } => 13 << 16 | 36,
            Usage::Digitizers { usage: Digitizers::TipPressure } => 13 << 16 | 48,
            Usage::Digitizers { usage: Digitizers::BarrelPressure } => 13 << 16 | 49,
            Usage::Digitizers { usage: Digitizers::InRange } => 13 << 16 | 50,
            Usage::Digitizers { usage: Digitizers::Touch } => 13 << 16 | 51,
            Usage::Digitizers { usage: Digitizers::Untouch } => 13 << 16 | 52,
            Usage::Digitizers { usage: Digitizers::Tap } => 13 << 16 | 53,
            Usage::Digitizers { usage: Digitizers::Quality } => 13 << 16 | 54,
            Usage::Digitizers { usage: Digitizers::DataValid } => 13 << 16 | 55,
            Usage::Digitizers { usage: Digitizers::TransducerIndex } => 13 << 16 | 56,
            Usage::Digitizers { usage: Digitizers::TabletFunctionKeys } => 13 << 16 | 57,
            Usage::Digitizers { usage: Digitizers::ProgramChangeKeys } => 13 << 16 | 58,
            Usage::Digitizers { usage: Digitizers::BatteryStrength } => 13 << 16 | 59,
            Usage::Digitizers { usage: Digitizers::Invert } => 13 << 16 | 60,
            Usage::Digitizers { usage: Digitizers::XTilt } => 13 << 16 | 61,
            Usage::Digitizers { usage: Digitizers::YTilt } => 13 << 16 | 62,
            Usage::Digitizers { usage: Digitizers::Azimuth } => 13 << 16 | 63,
            Usage::Digitizers { usage: Digitizers::Altitude } => 13 << 16 | 64,
            Usage::Digitizers { usage: Digitizers::Twist } => 13 << 16 | 65,
            Usage::Digitizers { usage: Digitizers::TipSwitch } => 13 << 16 | 66,
            Usage::Digitizers { usage: Digitizers::SecondaryTipSwitch } => 13 << 16 | 67,
            Usage::Digitizers { usage: Digitizers::BarrelSwitch } => 13 << 16 | 68,
            Usage::Digitizers { usage: Digitizers::Eraser } => 13 << 16 | 69,
            Usage::Digitizers { usage: Digitizers::TabletPick } => 13 << 16 | 70,
            Usage::Digitizers { usage: Digitizers::TouchValid } => 13 << 16 | 71,
            Usage::Digitizers { usage: Digitizers::Width } => 13 << 16 | 72,
            Usage::Digitizers { usage: Digitizers::Height } => 13 << 16 | 73,
            Usage::Digitizers { usage: Digitizers::ContactIdentifier } => 13 << 16 | 81,
            Usage::Digitizers { usage: Digitizers::DeviceMode } => 13 << 16 | 82,
            Usage::Digitizers { usage: Digitizers::DeviceIdentifier } => 13 << 16 | 83,
            Usage::Digitizers { usage: Digitizers::ContactCount } => 13 << 16 | 84,
            Usage::Digitizers { usage: Digitizers::ContactCountMaximum } => 13 << 16 | 85,
            Usage::Digitizers { usage: Digitizers::ScanTime } => 13 << 16 | 86,
            Usage::Digitizers { usage: Digitizers::SurfaceSwitch } => 13 << 16 | 87,
            Usage::Digitizers { usage: Digitizers::ButtonSwitch } => 13 << 16 | 88,
            Usage::Digitizers { usage: Digitizers::PadType } => 13 << 16 | 89,
            Usage::Digitizers { usage: Digitizers::SecondaryBarrelSwitch } => 13 << 16 | 90,
            Usage::Digitizers { usage: Digitizers::TransducerSerialNumber } => 13 << 16 | 91,
            Usage::Digitizers { usage: Digitizers::PreferredColor } => 13 << 16 | 92,
            Usage::Digitizers { usage: Digitizers::PreferredColorisLocked } => 13 << 16 | 93,
            Usage::Digitizers { usage: Digitizers::PreferredLineWidth } => 13 << 16 | 94,
            Usage::Digitizers { usage: Digitizers::PreferredLineWidthisLocked } => 13 << 16 | 95,
            Usage::Digitizers { usage: Digitizers::LatencyMode } => 13 << 16 | 96,
            Usage::Digitizers { usage: Digitizers::GestureCharacterQuality } => 13 << 16 | 97,
            Usage::Digitizers { usage: Digitizers::CharacterGestureDataLength } => 13 << 16 | 98,
            Usage::Digitizers { usage: Digitizers::CharacterGestureData } => 13 << 16 | 99,
            Usage::Digitizers { usage: Digitizers::GestureCharacterEncoding } => 13 << 16 | 100,
            Usage::Digitizers { usage: Digitizers::UTF8CharacterGestureEncoding } => 13 << 16 | 101,
            Usage::Digitizers { usage: Digitizers::UTF16LittleEndianCharacterGestureEncoding } => 13 << 16 | 102,
            Usage::Digitizers { usage: Digitizers::UTF16BigEndianCharacterGestureEncoding } => 13 << 16 | 103,
            Usage::Digitizers { usage: Digitizers::UTF32LittleEndianCharacterGestureEncoding } => 13 << 16 | 104,
            Usage::Digitizers { usage: Digitizers::UTF32BigEndianCharacterGestureEncoding } => 13 << 16 | 105,
            Usage::Digitizers { usage: Digitizers::CapacitiveHeatMapProtocolVendorID } => 13 << 16 | 106,
            Usage::Digitizers { usage: Digitizers::CapacitiveHeatMapProtocolVersion } => 13 << 16 | 107,
            Usage::Digitizers { usage: Digitizers::CapacitiveHeatMapFrameData } => 13 << 16 | 108,
            Usage::Digitizers { usage: Digitizers::GestureCharacterEnable } => 13 << 16 | 109,
            Usage::Digitizers { usage: Digitizers::TransducerSerialNumberPart2 } => 13 << 16 | 110,
            Usage::Digitizers { usage: Digitizers::NoPreferredColor } => 13 << 16 | 111,
            Usage::Digitizers { usage: Digitizers::PreferredLineStyle } => 13 << 16 | 112,
            Usage::Digitizers { usage: Digitizers::PreferredLineStyleisLocked } => 13 << 16 | 113,
            Usage::Digitizers { usage: Digitizers::Ink } => 13 << 16 | 114,
            Usage::Digitizers { usage: Digitizers::Pencil } => 13 << 16 | 115,
            Usage::Digitizers { usage: Digitizers::Highlighter } => 13 << 16 | 116,
            Usage::Digitizers { usage: Digitizers::ChiselMarker } => 13 << 16 | 117,
            Usage::Digitizers { usage: Digitizers::Brush } => 13 << 16 | 118,
            Usage::Digitizers { usage: Digitizers::NoPreference } => 13 << 16 | 119,
            Usage::Digitizers { usage: Digitizers::DigitizerDiagnostic } => 13 << 16 | 128,
            Usage::Digitizers { usage: Digitizers::DigitizerError } => 13 << 16 | 129,
            Usage::Digitizers { usage: Digitizers::ErrNormalStatus } => 13 << 16 | 130,
            Usage::Digitizers { usage: Digitizers::ErrTransducersExceeded } => 13 << 16 | 131,
            Usage::Digitizers { usage: Digitizers::ErrFullTransFeaturesUnavailable } => 13 << 16 | 132,
            Usage::Digitizers { usage: Digitizers::ErrChargeLow } => 13 << 16 | 133,
            Usage::Digitizers { usage: Digitizers::TransducerSoftwareInfo } => 13 << 16 | 144,
            Usage::Digitizers { usage: Digitizers::TransducerVendorId } => 13 << 16 | 145,
            Usage::Digitizers { usage: Digitizers::TransducerProductId } => 13 << 16 | 146,
            Usage::Digitizers { usage: Digitizers::DeviceSupportedProtocols } => 13 << 16 | 147,
            Usage::Digitizers { usage: Digitizers::TransducerSupportedProtocols } => 13 << 16 | 148,
            Usage::Digitizers { usage: Digitizers::NoProtocol } => 13 << 16 | 149,
            Usage::Digitizers { usage: Digitizers::WacomAESProtocol } => 13 << 16 | 150,
            Usage::Digitizers { usage: Digitizers::USIProtocol } => 13 << 16 | 151,
            Usage::Digitizers { usage: Digitizers::MicrosoftPenProtocol } => 13 << 16 | 152,
            Usage::Digitizers { usage: Digitizers::SupportedReportRates } => 13 << 16 | 160,
            Usage::Digitizers { usage: Digitizers::ReportRate } => 13 << 16 | 161,
            Usage::Digitizers { usage: Digitizers::TransducerConnected } => 13 << 16 | 162,
            Usage::Digitizers { usage: Digitizers::SwitchDisabled } => 13 << 16 | 163,
            Usage::Digitizers { usage: Digitizers::SwitchUnimplemented } => 13 << 16 | 164,
            Usage::Digitizers { usage: Digitizers::TransducerSwitches } => 13 << 16 | 165,
            Usage::Digitizers { usage: Digitizers::TransducerIndexSelector } => 13 << 16 | 166,
            Usage::Digitizers { usage: Digitizers::ButtonPressThreshold } => 13 << 16 | 176,
            Usage::Haptics { usage: Haptics::SimpleHapticController } => 14 << 16 | 1,
            Usage::Haptics { usage: Haptics::WaveformList } => 14 << 16 | 16,
            Usage::Haptics { usage: Haptics::DurationList } => 14 << 16 | 17,
            Usage::Haptics { usage: Haptics::AutoTrigger } => 14 << 16 | 32,
            Usage::Haptics { usage: Haptics::ManualTrigger } => 14 << 16 | 33,
            Usage::Haptics { usage: Haptics::AutoTriggerAssociatedControl } => 14 << 16 | 34,
            Usage::Haptics { usage: Haptics::Intensity } => 14 << 16 | 35,
            Usage::Haptics { usage: Haptics::RepeatCount } => 14 << 16 | 36,
            Usage::Haptics { usage: Haptics::RetriggerPeriod } => 14 << 16 | 37,
            Usage::Haptics { usage: Haptics::WaveformVendorPage } => 14 << 16 | 38,
            Usage::Haptics { usage: Haptics::WaveformVendorID } => 14 << 16 | 39,
            Usage::Haptics { usage: Haptics::WaveformCutoffTime } => 14 << 16 | 40,
            Usage::Haptics { usage: Haptics::WaveformNone } => 14 << 16 | 4097,
            Usage::Haptics { usage: Haptics::WaveformStop } => 14 << 16 | 4098,
            Usage::Haptics { usage: Haptics::WaveformClick } => 14 << 16 | 4099,
            Usage::Haptics { usage: Haptics::WaveformBuzzContinuous } => 14 << 16 | 4100,
            Usage::Haptics { usage: Haptics::WaveformRumbleContinuous } => 14 << 16 | 4101,
            Usage::Haptics { usage: Haptics::WaveformPress } => 14 << 16 | 4102,
            Usage::Haptics { usage: Haptics::WaveformRelease } => 14 << 16 | 4103,
            Usage::Haptics { usage: Haptics::WaveformHover } => 14 << 16 | 4104,
            Usage::Haptics { usage: Haptics::WaveformSuccess } => 14 << 16 | 4105,
            Usage::Haptics { usage: Haptics::WaveformError } => 14 << 16 | 4106,
            Usage::Haptics { usage: Haptics::WaveformInkContinuous } => 14 << 16 | 4107,
            Usage::Haptics { usage: Haptics::WaveformPencilContinuous } => 14 << 16 | 4108,
            Usage::Haptics { usage: Haptics::WaveformMarkerContinuous } => 14 << 16 | 4109,
            Usage::Haptics { usage: Haptics::WaveformChiselMarkerContinuous } => 14 << 16 | 4110,
            Usage::Haptics { usage: Haptics::WaveformBrushContinuous } => 14 << 16 | 4111,
            Usage::Haptics { usage: Haptics::WaveformEraserContinuous } => 14 << 16 | 4112,
            Usage::Haptics { usage: Haptics::WaveformSparkleContinuous } => 14 << 16 | 4113,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PhysicalInputDevice } => 15 << 16 | 1,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Normal } => 15 << 16 | 32,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetEffectReport } => 15 << 16 | 33,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectParameterBlockIndex } => 15 << 16 | 34,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ParameterBlockOffset } => 15 << 16 | 35,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ROMFlag } => 15 << 16 | 36,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectType } => 15 << 16 | 37,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETConstantForce } => 15 << 16 | 38,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETRamp } => 15 << 16 | 39,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETCustomForce } => 15 << 16 | 40,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSquare } => 15 << 16 | 48,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSine } => 15 << 16 | 49,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETTriangle } => 15 << 16 | 50,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSawtoothUp } => 15 << 16 | 51,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSawtoothDown } => 15 << 16 | 52,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSpring } => 15 << 16 | 64,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETDamper } => 15 << 16 | 65,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETInertia } => 15 << 16 | 66,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETFriction } => 15 << 16 | 67,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Duration } => 15 << 16 | 80,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SamplePeriod } => 15 << 16 | 81,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Gain } => 15 << 16 | 82,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::TriggerButton } => 15 << 16 | 83,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::TriggerRepeatInterval } => 15 << 16 | 84,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::AxesEnable } => 15 << 16 | 85,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DirectionEnable } => 15 << 16 | 86,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Direction } => 15 << 16 | 87,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::TypeSpecificBlockOffset } => 15 << 16 | 88,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockType } => 15 << 16 | 89,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetEnvelopeReport } => 15 << 16 | 90,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::AttackLevel } => 15 << 16 | 91,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::AttackTime } => 15 << 16 | 92,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::FadeLevel } => 15 << 16 | 93,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::FadeTime } => 15 << 16 | 94,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetConditionReport } => 15 << 16 | 95,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CenterPointOffset } => 15 << 16 | 96,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PositiveCoefficient } => 15 << 16 | 97,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::NegativeCoefficient } => 15 << 16 | 98,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PositiveSaturation } => 15 << 16 | 99,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::NegativeSaturation } => 15 << 16 | 100,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DeadBand } => 15 << 16 | 101,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DownloadForceSample } => 15 << 16 | 102,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::IsochCustomForceEnable } => 15 << 16 | 103,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CustomForceDataReport } => 15 << 16 | 104,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CustomForceData } => 15 << 16 | 105,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CustomForceVendorDefinedData } => 15 << 16 | 106,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetCustomForceReport } => 15 << 16 | 107,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CustomForceDataOffset } => 15 << 16 | 108,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SampleCount } => 15 << 16 | 109,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetPeriodicReport } => 15 << 16 | 110,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Offset } => 15 << 16 | 111,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Magnitude } => 15 << 16 | 112,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Phase } => 15 << 16 | 113,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Period } => 15 << 16 | 114,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetConstantForceReport } => 15 << 16 | 115,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetRampForceReport } => 15 << 16 | 116,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::RampStart } => 15 << 16 | 117,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::RampEnd } => 15 << 16 | 118,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectOperationReport } => 15 << 16 | 119,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectOperation } => 15 << 16 | 120,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::OpEffectStart } => 15 << 16 | 121,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::OpEffectStartSolo } => 15 << 16 | 122,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::OpEffectStop } => 15 << 16 | 123,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::LoopCount } => 15 << 16 | 124,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DeviceGainReport } => 15 << 16 | 125,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DeviceGain } => 15 << 16 | 126,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ParameterBlockPoolsReport } => 15 << 16 | 127,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::RAMPoolSize } => 15 << 16 | 128,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ROMPoolSize } => 15 << 16 | 129,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ROMEffectBlockCount } => 15 << 16 | 130,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SimultaneousEffectsMax } => 15 << 16 | 131,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PoolAlignment } => 15 << 16 | 132,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ParameterBlockMoveReport } => 15 << 16 | 133,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::MoveSource } => 15 << 16 | 134,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::MoveDestination } => 15 << 16 | 135,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::MoveLength } => 15 << 16 | 136,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectParameterBlockLoadReport } => 15 << 16 | 137,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectParameterBlockLoadStatus } => 15 << 16 | 139,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockLoadSuccess } => 15 << 16 | 140,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockLoadFull } => 15 << 16 | 141,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockLoadError } => 15 << 16 | 142,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockHandle } => 15 << 16 | 143,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectParameterBlockFreeReport } => 15 << 16 | 144,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::TypeSpecificBlockHandle } => 15 << 16 | 145,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PIDStateReport } => 15 << 16 | 146,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectPlaying } => 15 << 16 | 148,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PIDDeviceControlReport } => 15 << 16 | 149,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PIDDeviceControl } => 15 << 16 | 150,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCEnableActuators } => 15 << 16 | 151,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCDisableActuators } => 15 << 16 | 152,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCStopAllEffects } => 15 << 16 | 153,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCReset } => 15 << 16 | 154,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCPause } => 15 << 16 | 155,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCContinue } => 15 << 16 | 156,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DevicePaused } => 15 << 16 | 159,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ActuatorsEnabled } => 15 << 16 | 160,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SafetySwitch } => 15 << 16 | 164,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ActuatorOverrideSwitch } => 15 << 16 | 165,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ActuatorPower } => 15 << 16 | 166,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::StartDelay } => 15 << 16 | 167,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ParameterBlockSize } => 15 << 16 | 168,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DeviceManagedPool } => 15 << 16 | 169,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SharedParameterBlocks } => 15 << 16 | 170,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CreateNewEffectParameterBlockReport } => 15 << 16 | 171,
            Usage::PhysicalInputDevice { usage: PhysicalInputDevice::RAMPoolAvailable } => 15 << 16 | 172,
            Usage::SoC { usage: SoC::SocControl } => 17 << 16 | 1,
            Usage::SoC { usage: SoC::FirmwareTransfer } => 17 << 16 | 2,
            Usage::SoC { usage: SoC::FirmwareFileId } => 17 << 16 | 3,
            Usage::SoC { usage: SoC::FileOffsetInBytes } => 17 << 16 | 4,
            Usage::SoC { usage: SoC::FileTransferSizeMaxInBytes } => 17 << 16 | 5,
            Usage::SoC { usage: SoC::FilePayload } => 17 << 16 | 6,
            Usage::SoC { usage: SoC::FilePayloadSizeInBytes } => 17 << 16 | 7,
            Usage::SoC { usage: SoC::FilePayloadContainsLastBytes } => 17 << 16 | 8,
            Usage::SoC { usage: SoC::FileTransferStop } => 17 << 16 | 9,
            Usage::SoC { usage: SoC::FileTransferTillEnd } => 17 << 16 | 10,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::EyeTracker } => 18 << 16 | 1,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::HeadTracker } => 18 << 16 | 2,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::TrackingData } => 18 << 16 | 16,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::Capabilities } => 18 << 16 | 17,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::Configuration } => 18 << 16 | 18,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::Status } => 18 << 16 | 19,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::Control } => 18 << 16 | 20,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::SensorTimestamp } => 18 << 16 | 32,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::PositionX } => 18 << 16 | 33,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::PositionY } => 18 << 16 | 34,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::PositionZ } => 18 << 16 | 35,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::GazePoint } => 18 << 16 | 36,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::LeftEyePosition } => 18 << 16 | 37,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::RightEyePosition } => 18 << 16 | 38,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::HeadPosition } => 18 << 16 | 39,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::HeadDirectionPoint } => 18 << 16 | 40,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::RotationaboutXaxis } => 18 << 16 | 41,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::RotationaboutYaxis } => 18 << 16 | 42,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::RotationaboutZaxis } => 18 << 16 | 43,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::TrackerQuality } => 18 << 16 | 256,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::MinimumTrackingDistance } => 18 << 16 | 257,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::OptimumTrackingDistance } => 18 << 16 | 258,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::MaximumTrackingDistance } => 18 << 16 | 259,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::MaximumScreenPlaneWidth } => 18 << 16 | 260,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::MaximumScreenPlaneHeight } => 18 << 16 | 261,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DisplayManufacturerID } => 18 << 16 | 512,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DisplayProductID } => 18 << 16 | 513,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DisplaySerialNumber } => 18 << 16 | 514,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DisplayManufacturerDate } => 18 << 16 | 515,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::CalibratedScreenWidth } => 18 << 16 | 516,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::CalibratedScreenHeight } => 18 << 16 | 517,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::SamplingFrequency } => 18 << 16 | 768,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::ConfigurationStatus } => 18 << 16 | 769,
            Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DeviceModeRequest } => 18 << 16 | 1024,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AlphanumericDisplay } => 20 << 16 | 1,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AuxiliaryDisplay } => 20 << 16 | 2,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayAttributesReport } => 20 << 16 | 32,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ASCIICharacterSet } => 20 << 16 | 33,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DataReadBack } => 20 << 16 | 34,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::FontReadBack } => 20 << 16 | 35,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayControlReport } => 20 << 16 | 36,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ClearDisplay } => 20 << 16 | 37,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayEnable } => 20 << 16 | 38,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ScreenSaverDelay } => 20 << 16 | 39,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ScreenSaverEnable } => 20 << 16 | 40,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::VerticalScroll } => 20 << 16 | 41,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::HorizontalScroll } => 20 << 16 | 42,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterReport } => 20 << 16 | 43,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayData } => 20 << 16 | 44,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayStatus } => 20 << 16 | 45,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::StatNotReady } => 20 << 16 | 46,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::StatReady } => 20 << 16 | 47,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ErrNotaloadablecharacter } => 20 << 16 | 48,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ErrFontdatacannotberead } => 20 << 16 | 49,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorPositionReport } => 20 << 16 | 50,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Row } => 20 << 16 | 51,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Column } => 20 << 16 | 52,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Rows } => 20 << 16 | 53,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Columns } => 20 << 16 | 54,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorPixelPositioning } => 20 << 16 | 55,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorMode } => 20 << 16 | 56,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorEnable } => 20 << 16 | 57,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorBlink } => 20 << 16 | 58,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::FontReport } => 20 << 16 | 59,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::FontData } => 20 << 16 | 60,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterWidth } => 20 << 16 | 61,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterHeight } => 20 << 16 | 62,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterSpacingHorizontal } => 20 << 16 | 63,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterSpacingVertical } => 20 << 16 | 64,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::UnicodeCharacterSet } => 20 << 16 | 65,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Font7Segment } => 20 << 16 | 66,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SevenSegmentDirectMap } => 20 << 16 | 67,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Font14Segment } => 20 << 16 | 68,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::One4SegmentDirectMap } => 20 << 16 | 69,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayBrightness } => 20 << 16 | 70,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayContrast } => 20 << 16 | 71,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterAttribute } => 20 << 16 | 72,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AttributeReadback } => 20 << 16 | 73,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AttributeData } => 20 << 16 | 74,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharAttrEnhance } => 20 << 16 | 75,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharAttrUnderline } => 20 << 16 | 76,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharAttrBlink } => 20 << 16 | 77,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BitmapSizeX } => 20 << 16 | 128,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BitmapSizeY } => 20 << 16 | 129,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::MaxBlitSize } => 20 << 16 | 130,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BitDepthFormat } => 20 << 16 | 131,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayOrientation } => 20 << 16 | 132,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::PaletteReport } => 20 << 16 | 133,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::PaletteDataSize } => 20 << 16 | 134,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::PaletteDataOffset } => 20 << 16 | 135,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::PaletteData } => 20 << 16 | 136,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitReport } => 20 << 16 | 138,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitRectangleX1 } => 20 << 16 | 139,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitRectangleY1 } => 20 << 16 | 140,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitRectangleX2 } => 20 << 16 | 141,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitRectangleY2 } => 20 << 16 | 142,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitData } => 20 << 16 | 143,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButton } => 20 << 16 | 144,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonID } => 20 << 16 | 145,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonSide } => 20 << 16 | 146,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonOffset1 } => 20 << 16 | 147,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonOffset2 } => 20 << 16 | 148,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonReport } => 20 << 16 | 149,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftKeys } => 20 << 16 | 194,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayDataExtensions } => 20 << 16 | 204,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterMapping } => 20 << 16 | 207,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::UnicodeEquivalent } => 20 << 16 | 221,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterPageMapping } => 20 << 16 | 223,
            Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::RequestReport } => 20 << 16 | 255,
            Usage::Sensors { usage: Sensors::Sensor } => 32 << 16 | 1,
            Usage::Sensors { usage: Sensors::Biometric } => 32 << 16 | 16,
            Usage::Sensors { usage: Sensors::BiometricHumanPresence } => 32 << 16 | 17,
            Usage::Sensors { usage: Sensors::BiometricHumanProximity } => 32 << 16 | 18,
            Usage::Sensors { usage: Sensors::BiometricHumanTouch } => 32 << 16 | 19,
            Usage::Sensors { usage: Sensors::BiometricBloodPressure } => 32 << 16 | 20,
            Usage::Sensors { usage: Sensors::BiometricBodyTemperature } => 32 << 16 | 21,
            Usage::Sensors { usage: Sensors::BiometricHeartRate } => 32 << 16 | 22,
            Usage::Sensors { usage: Sensors::BiometricHeartRateVariability } => 32 << 16 | 23,
            Usage::Sensors { usage: Sensors::BiometricPeripheralOxygenSaturation } => 32 << 16 | 24,
            Usage::Sensors { usage: Sensors::BiometricRespiratoryRate } => 32 << 16 | 25,
            Usage::Sensors { usage: Sensors::Electrical } => 32 << 16 | 32,
            Usage::Sensors { usage: Sensors::ElectricalCapacitance } => 32 << 16 | 33,
            Usage::Sensors { usage: Sensors::ElectricalCurrent } => 32 << 16 | 34,
            Usage::Sensors { usage: Sensors::ElectricalPower } => 32 << 16 | 35,
            Usage::Sensors { usage: Sensors::ElectricalInductance } => 32 << 16 | 36,
            Usage::Sensors { usage: Sensors::ElectricalResistance } => 32 << 16 | 37,
            Usage::Sensors { usage: Sensors::ElectricalVoltage } => 32 << 16 | 38,
            Usage::Sensors { usage: Sensors::ElectricalPotentiometer } => 32 << 16 | 39,
            Usage::Sensors { usage: Sensors::ElectricalFrequency } => 32 << 16 | 40,
            Usage::Sensors { usage: Sensors::ElectricalPeriod } => 32 << 16 | 41,
            Usage::Sensors { usage: Sensors::Environmental } => 32 << 16 | 48,
            Usage::Sensors { usage: Sensors::EnvironmentalAtmosphericPressure } => 32 << 16 | 49,
            Usage::Sensors { usage: Sensors::EnvironmentalHumidity } => 32 << 16 | 50,
            Usage::Sensors { usage: Sensors::EnvironmentalTemperature } => 32 << 16 | 51,
            Usage::Sensors { usage: Sensors::EnvironmentalWindDirection } => 32 << 16 | 52,
            Usage::Sensors { usage: Sensors::EnvironmentalWindSpeed } => 32 << 16 | 53,
            Usage::Sensors { usage: Sensors::EnvironmentalAirQuality } => 32 << 16 | 54,
            Usage::Sensors { usage: Sensors::EnvironmentalHeatIndex } => 32 << 16 | 55,
            Usage::Sensors { usage: Sensors::EnvironmentalSurfaceTemperature } => 32 << 16 | 56,
            Usage::Sensors { usage: Sensors::EnvironmentalVolatileOrganicCompounds } => 32 << 16 | 57,
            Usage::Sensors { usage: Sensors::EnvironmentalObjectPresence } => 32 << 16 | 58,
            Usage::Sensors { usage: Sensors::EnvironmentalObjectProximity } => 32 << 16 | 59,
            Usage::Sensors { usage: Sensors::Light } => 32 << 16 | 64,
            Usage::Sensors { usage: Sensors::LightAmbientLight } => 32 << 16 | 65,
            Usage::Sensors { usage: Sensors::LightConsumerInfrared } => 32 << 16 | 66,
            Usage::Sensors { usage: Sensors::LightInfraredLight } => 32 << 16 | 67,
            Usage::Sensors { usage: Sensors::LightVisibleLight } => 32 << 16 | 68,
            Usage::Sensors { usage: Sensors::LightUltravioletLight } => 32 << 16 | 69,
            Usage::Sensors { usage: Sensors::Location } => 32 << 16 | 80,
            Usage::Sensors { usage: Sensors::LocationBroadcast } => 32 << 16 | 81,
            Usage::Sensors { usage: Sensors::LocationDeadReckoning } => 32 << 16 | 82,
            Usage::Sensors { usage: Sensors::LocationGPSGlobalPositioningSystem } => 32 << 16 | 83,
            Usage::Sensors { usage: Sensors::LocationLookup } => 32 << 16 | 84,
            Usage::Sensors { usage: Sensors::LocationOther } => 32 << 16 | 85,
            Usage::Sensors { usage: Sensors::LocationStatic } => 32 << 16 | 86,
            Usage::Sensors { usage: Sensors::LocationTriangulation } => 32 << 16 | 87,
            Usage::Sensors { usage: Sensors::Mechanical } => 32 << 16 | 96,
            Usage::Sensors { usage: Sensors::MechanicalBooleanSwitch } => 32 << 16 | 97,
            Usage::Sensors { usage: Sensors::MechanicalBooleanSwitchArray } => 32 << 16 | 98,
            Usage::Sensors { usage: Sensors::MechanicalMultivalueSwitch } => 32 << 16 | 99,
            Usage::Sensors { usage: Sensors::MechanicalForce } => 32 << 16 | 100,
            Usage::Sensors { usage: Sensors::MechanicalPressure } => 32 << 16 | 101,
            Usage::Sensors { usage: Sensors::MechanicalStrain } => 32 << 16 | 102,
            Usage::Sensors { usage: Sensors::MechanicalWeight } => 32 << 16 | 103,
            Usage::Sensors { usage: Sensors::MechanicalHapticVibrator } => 32 << 16 | 104,
            Usage::Sensors { usage: Sensors::MechanicalHallEffectSwitch } => 32 << 16 | 105,
            Usage::Sensors { usage: Sensors::Motion } => 32 << 16 | 112,
            Usage::Sensors { usage: Sensors::MotionAccelerometer1D } => 32 << 16 | 113,
            Usage::Sensors { usage: Sensors::MotionAccelerometer2D } => 32 << 16 | 114,
            Usage::Sensors { usage: Sensors::MotionAccelerometer3D } => 32 << 16 | 115,
            Usage::Sensors { usage: Sensors::MotionGyrometer1D } => 32 << 16 | 116,
            Usage::Sensors { usage: Sensors::MotionGyrometer2D } => 32 << 16 | 117,
            Usage::Sensors { usage: Sensors::MotionGyrometer3D } => 32 << 16 | 118,
            Usage::Sensors { usage: Sensors::MotionMotionDetector } => 32 << 16 | 119,
            Usage::Sensors { usage: Sensors::MotionSpeedometer } => 32 << 16 | 120,
            Usage::Sensors { usage: Sensors::MotionAccelerometer } => 32 << 16 | 121,
            Usage::Sensors { usage: Sensors::MotionGyrometer } => 32 << 16 | 122,
            Usage::Sensors { usage: Sensors::MotionGravityVector } => 32 << 16 | 123,
            Usage::Sensors { usage: Sensors::MotionLinearAccelerometer } => 32 << 16 | 124,
            Usage::Sensors { usage: Sensors::Orientation } => 32 << 16 | 128,
            Usage::Sensors { usage: Sensors::OrientationCompass1D } => 32 << 16 | 129,
            Usage::Sensors { usage: Sensors::OrientationCompass2D } => 32 << 16 | 130,
            Usage::Sensors { usage: Sensors::OrientationCompass3D } => 32 << 16 | 131,
            Usage::Sensors { usage: Sensors::OrientationInclinometer1D } => 32 << 16 | 132,
            Usage::Sensors { usage: Sensors::OrientationInclinometer2D } => 32 << 16 | 133,
            Usage::Sensors { usage: Sensors::OrientationInclinometer3D } => 32 << 16 | 134,
            Usage::Sensors { usage: Sensors::OrientationDistance1D } => 32 << 16 | 135,
            Usage::Sensors { usage: Sensors::OrientationDistance2D } => 32 << 16 | 136,
            Usage::Sensors { usage: Sensors::OrientationDistance3D } => 32 << 16 | 137,
            Usage::Sensors { usage: Sensors::OrientationDeviceOrientation } => 32 << 16 | 138,
            Usage::Sensors { usage: Sensors::OrientationCompass } => 32 << 16 | 139,
            Usage::Sensors { usage: Sensors::OrientationInclinometer } => 32 << 16 | 140,
            Usage::Sensors { usage: Sensors::OrientationDistance } => 32 << 16 | 141,
            Usage::Sensors { usage: Sensors::OrientationRelativeOrientation } => 32 << 16 | 142,
            Usage::Sensors { usage: Sensors::OrientationSimpleOrientation } => 32 << 16 | 143,
            Usage::Sensors { usage: Sensors::Scanner } => 32 << 16 | 144,
            Usage::Sensors { usage: Sensors::ScannerBarcode } => 32 << 16 | 145,
            Usage::Sensors { usage: Sensors::ScannerRFID } => 32 << 16 | 146,
            Usage::Sensors { usage: Sensors::ScannerNFC } => 32 << 16 | 147,
            Usage::Sensors { usage: Sensors::Time } => 32 << 16 | 160,
            Usage::Sensors { usage: Sensors::TimeAlarmTimer } => 32 << 16 | 161,
            Usage::Sensors { usage: Sensors::TimeRealTimeClock } => 32 << 16 | 162,
            Usage::Sensors { usage: Sensors::PersonalActivity } => 32 << 16 | 176,
            Usage::Sensors { usage: Sensors::PersonalActivityActivityDetection } => 32 << 16 | 177,
            Usage::Sensors { usage: Sensors::PersonalActivityDevicePosition } => 32 << 16 | 178,
            Usage::Sensors { usage: Sensors::PersonalActivityFloorTracker } => 32 << 16 | 179,
            Usage::Sensors { usage: Sensors::PersonalActivityPedometer } => 32 << 16 | 180,
            Usage::Sensors { usage: Sensors::PersonalActivityStepDetection } => 32 << 16 | 181,
            Usage::Sensors { usage: Sensors::OrientationExtended } => 32 << 16 | 192,
            Usage::Sensors { usage: Sensors::OrientationExtendedGeomagneticOrientation } => 32 << 16 | 193,
            Usage::Sensors { usage: Sensors::OrientationExtendedMagnetometer } => 32 << 16 | 194,
            Usage::Sensors { usage: Sensors::Gesture } => 32 << 16 | 208,
            Usage::Sensors { usage: Sensors::GestureChassisFlipGesture } => 32 << 16 | 209,
            Usage::Sensors { usage: Sensors::GestureHingeFoldGesture } => 32 << 16 | 210,
            Usage::Sensors { usage: Sensors::Other } => 32 << 16 | 224,
            Usage::Sensors { usage: Sensors::OtherCustom } => 32 << 16 | 225,
            Usage::Sensors { usage: Sensors::OtherGeneric } => 32 << 16 | 226,
            Usage::Sensors { usage: Sensors::OtherGenericEnumerator } => 32 << 16 | 227,
            Usage::Sensors { usage: Sensors::OtherHingeAngle } => 32 << 16 | 228,
            Usage::Sensors { usage: Sensors::VendorReserved1 } => 32 << 16 | 240,
            Usage::Sensors { usage: Sensors::VendorReserved2 } => 32 << 16 | 241,
            Usage::Sensors { usage: Sensors::VendorReserved3 } => 32 << 16 | 242,
            Usage::Sensors { usage: Sensors::VendorReserved4 } => 32 << 16 | 243,
            Usage::Sensors { usage: Sensors::VendorReserved5 } => 32 << 16 | 244,
            Usage::Sensors { usage: Sensors::VendorReserved6 } => 32 << 16 | 245,
            Usage::Sensors { usage: Sensors::VendorReserved7 } => 32 << 16 | 246,
            Usage::Sensors { usage: Sensors::VendorReserved8 } => 32 << 16 | 247,
            Usage::Sensors { usage: Sensors::VendorReserved9 } => 32 << 16 | 248,
            Usage::Sensors { usage: Sensors::VendorReserved10 } => 32 << 16 | 249,
            Usage::Sensors { usage: Sensors::VendorReserved11 } => 32 << 16 | 250,
            Usage::Sensors { usage: Sensors::VendorReserved12 } => 32 << 16 | 251,
            Usage::Sensors { usage: Sensors::VendorReserved13 } => 32 << 16 | 252,
            Usage::Sensors { usage: Sensors::VendorReserved14 } => 32 << 16 | 253,
            Usage::Sensors { usage: Sensors::VendorReserved15 } => 32 << 16 | 254,
            Usage::Sensors { usage: Sensors::VendorReserved16 } => 32 << 16 | 255,
            Usage::Sensors { usage: Sensors::Event } => 32 << 16 | 512,
            Usage::Sensors { usage: Sensors::EventSensorState } => 32 << 16 | 513,
            Usage::Sensors { usage: Sensors::EventSensorEvent } => 32 << 16 | 514,
            Usage::Sensors { usage: Sensors::Property } => 32 << 16 | 768,
            Usage::Sensors { usage: Sensors::PropertyFriendlyName } => 32 << 16 | 769,
            Usage::Sensors { usage: Sensors::PropertyPersistentUniqueID } => 32 << 16 | 770,
            Usage::Sensors { usage: Sensors::PropertySensorStatus } => 32 << 16 | 771,
            Usage::Sensors { usage: Sensors::PropertyMinimumReportInterval } => 32 << 16 | 772,
            Usage::Sensors { usage: Sensors::PropertySensorManufacturer } => 32 << 16 | 773,
            Usage::Sensors { usage: Sensors::PropertySensorModel } => 32 << 16 | 774,
            Usage::Sensors { usage: Sensors::PropertySensorSerialNumber } => 32 << 16 | 775,
            Usage::Sensors { usage: Sensors::PropertySensorDescription } => 32 << 16 | 776,
            Usage::Sensors { usage: Sensors::PropertySensorConnectionType } => 32 << 16 | 777,
            Usage::Sensors { usage: Sensors::PropertySensorDevicePath } => 32 << 16 | 778,
            Usage::Sensors { usage: Sensors::PropertyHardwareRevision } => 32 << 16 | 779,
            Usage::Sensors { usage: Sensors::PropertyFirmwareVersion } => 32 << 16 | 780,
            Usage::Sensors { usage: Sensors::PropertyReleaseDate } => 32 << 16 | 781,
            Usage::Sensors { usage: Sensors::PropertyReportInterval } => 32 << 16 | 782,
            Usage::Sensors { usage: Sensors::PropertyChangeSensitivityAbsolute } => 32 << 16 | 783,
            Usage::Sensors { usage: Sensors::PropertyChangeSensitivityPercentofRange } => 32 << 16 | 784,
            Usage::Sensors { usage: Sensors::PropertyChangeSensitivityPercentRelative } => 32 << 16 | 785,
            Usage::Sensors { usage: Sensors::PropertyAccuracy } => 32 << 16 | 786,
            Usage::Sensors { usage: Sensors::PropertyResolution } => 32 << 16 | 787,
            Usage::Sensors { usage: Sensors::PropertyMaximum } => 32 << 16 | 788,
            Usage::Sensors { usage: Sensors::PropertyMinimum } => 32 << 16 | 789,
            Usage::Sensors { usage: Sensors::PropertyReportingState } => 32 << 16 | 790,
            Usage::Sensors { usage: Sensors::PropertySamplingRate } => 32 << 16 | 791,
            Usage::Sensors { usage: Sensors::PropertyResponseCurve } => 32 << 16 | 792,
            Usage::Sensors { usage: Sensors::PropertyPowerState } => 32 << 16 | 793,
            Usage::Sensors { usage: Sensors::PropertyMaximumFIFOEvents } => 32 << 16 | 794,
            Usage::Sensors { usage: Sensors::PropertyReportLatency } => 32 << 16 | 795,
            Usage::Sensors { usage: Sensors::PropertyFlushFIFOEvents } => 32 << 16 | 796,
            Usage::Sensors { usage: Sensors::PropertyMaximumPowerConsumption } => 32 << 16 | 797,
            Usage::Sensors { usage: Sensors::PropertyIsPrimary } => 32 << 16 | 798,
            Usage::Sensors { usage: Sensors::PropertyHumanPresenceDetectionType } => 32 << 16 | 799,
            Usage::Sensors { usage: Sensors::DataFieldLocation } => 32 << 16 | 1024,
            Usage::Sensors { usage: Sensors::DataFieldAltitudeAntennaSeaLevel } => 32 << 16 | 1026,
            Usage::Sensors { usage: Sensors::DataFieldDifferentialReferenceStationID } => 32 << 16 | 1027,
            Usage::Sensors { usage: Sensors::DataFieldAltitudeEllipsoidError } => 32 << 16 | 1028,
            Usage::Sensors { usage: Sensors::DataFieldAltitudeEllipsoid } => 32 << 16 | 1029,
            Usage::Sensors { usage: Sensors::DataFieldAltitudeSeaLevelError } => 32 << 16 | 1030,
            Usage::Sensors { usage: Sensors::DataFieldAltitudeSeaLevel } => 32 << 16 | 1031,
            Usage::Sensors { usage: Sensors::DataFieldDifferentialGPSDataAge } => 32 << 16 | 1032,
            Usage::Sensors { usage: Sensors::DataFieldErrorRadius } => 32 << 16 | 1033,
            Usage::Sensors { usage: Sensors::DataFieldFixQuality } => 32 << 16 | 1034,
            Usage::Sensors { usage: Sensors::DataFieldFixType } => 32 << 16 | 1035,
            Usage::Sensors { usage: Sensors::DataFieldGeoidalSeparation } => 32 << 16 | 1036,
            Usage::Sensors { usage: Sensors::DataFieldGPSOperationMode } => 32 << 16 | 1037,
            Usage::Sensors { usage: Sensors::DataFieldGPSSelectionMode } => 32 << 16 | 1038,
            Usage::Sensors { usage: Sensors::DataFieldGPSStatus } => 32 << 16 | 1039,
            Usage::Sensors { usage: Sensors::DataFieldPositionDilutionofPrecision } => 32 << 16 | 1040,
            Usage::Sensors { usage: Sensors::DataFieldHorizontalDilutionofPrecision } => 32 << 16 | 1041,
            Usage::Sensors { usage: Sensors::DataFieldVerticalDilutionofPrecision } => 32 << 16 | 1042,
            Usage::Sensors { usage: Sensors::DataFieldLatitude } => 32 << 16 | 1043,
            Usage::Sensors { usage: Sensors::DataFieldLongitude } => 32 << 16 | 1044,
            Usage::Sensors { usage: Sensors::DataFieldTrueHeading } => 32 << 16 | 1045,
            Usage::Sensors { usage: Sensors::DataFieldMagneticHeading } => 32 << 16 | 1046,
            Usage::Sensors { usage: Sensors::DataFieldMagneticVariation } => 32 << 16 | 1047,
            Usage::Sensors { usage: Sensors::DataFieldSpeed } => 32 << 16 | 1048,
            Usage::Sensors { usage: Sensors::DataFieldSatellitesinView } => 32 << 16 | 1049,
            Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewAzimuth } => 32 << 16 | 1050,
            Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewElevation } => 32 << 16 | 1051,
            Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewIDs } => 32 << 16 | 1052,
            Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewPRNs } => 32 << 16 | 1053,
            Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewSNRatios } => 32 << 16 | 1054,
            Usage::Sensors { usage: Sensors::DataFieldSatellitesUsedCount } => 32 << 16 | 1055,
            Usage::Sensors { usage: Sensors::DataFieldSatellitesUsedPRNs } => 32 << 16 | 1056,
            Usage::Sensors { usage: Sensors::DataFieldNMEASentence } => 32 << 16 | 1057,
            Usage::Sensors { usage: Sensors::DataFieldAddressLine1 } => 32 << 16 | 1058,
            Usage::Sensors { usage: Sensors::DataFieldAddressLine2 } => 32 << 16 | 1059,
            Usage::Sensors { usage: Sensors::DataFieldCity } => 32 << 16 | 1060,
            Usage::Sensors { usage: Sensors::DataFieldStateorProvince } => 32 << 16 | 1061,
            Usage::Sensors { usage: Sensors::DataFieldCountryorRegion } => 32 << 16 | 1062,
            Usage::Sensors { usage: Sensors::DataFieldPostalCode } => 32 << 16 | 1063,
            Usage::Sensors { usage: Sensors::PropertyLocation } => 32 << 16 | 1066,
            Usage::Sensors { usage: Sensors::PropertyLocationDesiredAccuracy } => 32 << 16 | 1067,
            Usage::Sensors { usage: Sensors::DataFieldEnvironmental } => 32 << 16 | 1072,
            Usage::Sensors { usage: Sensors::DataFieldAtmosphericPressure } => 32 << 16 | 1073,
            Usage::Sensors { usage: Sensors::DataFieldRelativeHumidity } => 32 << 16 | 1075,
            Usage::Sensors { usage: Sensors::DataFieldTemperature } => 32 << 16 | 1076,
            Usage::Sensors { usage: Sensors::DataFieldWindDirection } => 32 << 16 | 1077,
            Usage::Sensors { usage: Sensors::DataFieldWindSpeed } => 32 << 16 | 1078,
            Usage::Sensors { usage: Sensors::DataFieldAirQualityIndex } => 32 << 16 | 1079,
            Usage::Sensors { usage: Sensors::DataFieldEquivalentCO2 } => 32 << 16 | 1080,
            Usage::Sensors { usage: Sensors::DataFieldVolatileOrganicCompoundConcentration } => 32 << 16 | 1081,
            Usage::Sensors { usage: Sensors::DataFieldObjectPresence } => 32 << 16 | 1082,
            Usage::Sensors { usage: Sensors::DataFieldObjectProximityRange } => 32 << 16 | 1083,
            Usage::Sensors { usage: Sensors::DataFieldObjectProximityOutofRange } => 32 << 16 | 1084,
            Usage::Sensors { usage: Sensors::PropertyEnvironmental } => 32 << 16 | 1088,
            Usage::Sensors { usage: Sensors::PropertyReferencePressure } => 32 << 16 | 1089,
            Usage::Sensors { usage: Sensors::DataFieldMotion } => 32 << 16 | 1104,
            Usage::Sensors { usage: Sensors::DataFieldMotionState } => 32 << 16 | 1105,
            Usage::Sensors { usage: Sensors::DataFieldAcceleration } => 32 << 16 | 1106,
            Usage::Sensors { usage: Sensors::DataFieldAccelerationAxisX } => 32 << 16 | 1107,
            Usage::Sensors { usage: Sensors::DataFieldAccelerationAxisY } => 32 << 16 | 1108,
            Usage::Sensors { usage: Sensors::DataFieldAccelerationAxisZ } => 32 << 16 | 1109,
            Usage::Sensors { usage: Sensors::DataFieldAngularVelocity } => 32 << 16 | 1110,
            Usage::Sensors { usage: Sensors::DataFieldAngularVelocityaboutXAxis } => 32 << 16 | 1111,
            Usage::Sensors { usage: Sensors::DataFieldAngularVelocityaboutYAxis } => 32 << 16 | 1112,
            Usage::Sensors { usage: Sensors::DataFieldAngularVelocityaboutZAxis } => 32 << 16 | 1113,
            Usage::Sensors { usage: Sensors::DataFieldAngularPosition } => 32 << 16 | 1114,
            Usage::Sensors { usage: Sensors::DataFieldAngularPositionaboutXAxis } => 32 << 16 | 1115,
            Usage::Sensors { usage: Sensors::DataFieldAngularPositionaboutYAxis } => 32 << 16 | 1116,
            Usage::Sensors { usage: Sensors::DataFieldAngularPositionaboutZAxis } => 32 << 16 | 1117,
            Usage::Sensors { usage: Sensors::DataFieldMotionSpeed } => 32 << 16 | 1118,
            Usage::Sensors { usage: Sensors::DataFieldMotionIntensity } => 32 << 16 | 1119,
            Usage::Sensors { usage: Sensors::DataFieldOrientation } => 32 << 16 | 1136,
            Usage::Sensors { usage: Sensors::DataFieldHeading } => 32 << 16 | 1137,
            Usage::Sensors { usage: Sensors::DataFieldHeadingXAxis } => 32 << 16 | 1138,
            Usage::Sensors { usage: Sensors::DataFieldHeadingYAxis } => 32 << 16 | 1139,
            Usage::Sensors { usage: Sensors::DataFieldHeadingZAxis } => 32 << 16 | 1140,
            Usage::Sensors { usage: Sensors::DataFieldHeadingCompensatedMagneticNorth } => 32 << 16 | 1141,
            Usage::Sensors { usage: Sensors::DataFieldHeadingCompensatedTrueNorth } => 32 << 16 | 1142,
            Usage::Sensors { usage: Sensors::DataFieldHeadingMagneticNorth } => 32 << 16 | 1143,
            Usage::Sensors { usage: Sensors::DataFieldHeadingTrueNorth } => 32 << 16 | 1144,
            Usage::Sensors { usage: Sensors::DataFieldDistance } => 32 << 16 | 1145,
            Usage::Sensors { usage: Sensors::DataFieldDistanceXAxis } => 32 << 16 | 1146,
            Usage::Sensors { usage: Sensors::DataFieldDistanceYAxis } => 32 << 16 | 1147,
            Usage::Sensors { usage: Sensors::DataFieldDistanceZAxis } => 32 << 16 | 1148,
            Usage::Sensors { usage: Sensors::DataFieldDistanceOutofRange } => 32 << 16 | 1149,
            Usage::Sensors { usage: Sensors::DataFieldTilt } => 32 << 16 | 1150,
            Usage::Sensors { usage: Sensors::DataFieldTiltXAxis } => 32 << 16 | 1151,
            Usage::Sensors { usage: Sensors::DataFieldTiltYAxis } => 32 << 16 | 1152,
            Usage::Sensors { usage: Sensors::DataFieldTiltZAxis } => 32 << 16 | 1153,
            Usage::Sensors { usage: Sensors::DataFieldRotationMatrix } => 32 << 16 | 1154,
            Usage::Sensors { usage: Sensors::DataFieldQuaternion } => 32 << 16 | 1155,
            Usage::Sensors { usage: Sensors::DataFieldMagneticFlux } => 32 << 16 | 1156,
            Usage::Sensors { usage: Sensors::DataFieldMagneticFluxXAxis } => 32 << 16 | 1157,
            Usage::Sensors { usage: Sensors::DataFieldMagneticFluxYAxis } => 32 << 16 | 1158,
            Usage::Sensors { usage: Sensors::DataFieldMagneticFluxZAxis } => 32 << 16 | 1159,
            Usage::Sensors { usage: Sensors::DataFieldMagnetometerAccuracy } => 32 << 16 | 1160,
            Usage::Sensors { usage: Sensors::DataFieldSimpleOrientationDirection } => 32 << 16 | 1161,
            Usage::Sensors { usage: Sensors::DataFieldMechanical } => 32 << 16 | 1168,
            Usage::Sensors { usage: Sensors::DataFieldBooleanSwitchState } => 32 << 16 | 1169,
            Usage::Sensors { usage: Sensors::DataFieldBooleanSwitchArrayStates } => 32 << 16 | 1170,
            Usage::Sensors { usage: Sensors::DataFieldMultivalueSwitchValue } => 32 << 16 | 1171,
            Usage::Sensors { usage: Sensors::DataFieldForce } => 32 << 16 | 1172,
            Usage::Sensors { usage: Sensors::DataFieldAbsolutePressure } => 32 << 16 | 1173,
            Usage::Sensors { usage: Sensors::DataFieldGaugePressure } => 32 << 16 | 1174,
            Usage::Sensors { usage: Sensors::DataFieldStrain } => 32 << 16 | 1175,
            Usage::Sensors { usage: Sensors::DataFieldWeight } => 32 << 16 | 1176,
            Usage::Sensors { usage: Sensors::PropertyMechanical } => 32 << 16 | 1184,
            Usage::Sensors { usage: Sensors::PropertyVibrationState } => 32 << 16 | 1185,
            Usage::Sensors { usage: Sensors::PropertyForwardVibrationSpeed } => 32 << 16 | 1186,
            Usage::Sensors { usage: Sensors::PropertyBackwardVibrationSpeed } => 32 << 16 | 1187,
            Usage::Sensors { usage: Sensors::DataFieldBiometric } => 32 << 16 | 1200,
            Usage::Sensors { usage: Sensors::DataFieldHumanPresence } => 32 << 16 | 1201,
            Usage::Sensors { usage: Sensors::DataFieldHumanProximityRange } => 32 << 16 | 1202,
            Usage::Sensors { usage: Sensors::DataFieldHumanProximityOutofRange } => 32 << 16 | 1203,
            Usage::Sensors { usage: Sensors::DataFieldHumanTouchState } => 32 << 16 | 1204,
            Usage::Sensors { usage: Sensors::DataFieldBloodPressure } => 32 << 16 | 1205,
            Usage::Sensors { usage: Sensors::DataFieldBloodPressureDiastolic } => 32 << 16 | 1206,
            Usage::Sensors { usage: Sensors::DataFieldBloodPressureSystolic } => 32 << 16 | 1207,
            Usage::Sensors { usage: Sensors::DataFieldHeartRate } => 32 << 16 | 1208,
            Usage::Sensors { usage: Sensors::DataFieldRestingHeartRate } => 32 << 16 | 1209,
            Usage::Sensors { usage: Sensors::DataFieldHeartbeatInterval } => 32 << 16 | 1210,
            Usage::Sensors { usage: Sensors::DataFieldRespiratoryRate } => 32 << 16 | 1211,
            Usage::Sensors { usage: Sensors::DataFieldSpO2 } => 32 << 16 | 1212,
            Usage::Sensors { usage: Sensors::DataFieldHumanAttentionDetected } => 32 << 16 | 1213,
            Usage::Sensors { usage: Sensors::DataFieldHumanHeadAzimuth } => 32 << 16 | 1214,
            Usage::Sensors { usage: Sensors::DataFieldHumanHeadAltitude } => 32 << 16 | 1215,
            Usage::Sensors { usage: Sensors::DataFieldHumanHeadRoll } => 32 << 16 | 1216,
            Usage::Sensors { usage: Sensors::DataFieldHumanHeadPitch } => 32 << 16 | 1217,
            Usage::Sensors { usage: Sensors::DataFieldHumanHeadYaw } => 32 << 16 | 1218,
            Usage::Sensors { usage: Sensors::DataFieldHumanCorrelationId } => 32 << 16 | 1219,
            Usage::Sensors { usage: Sensors::DataFieldLight } => 32 << 16 | 1232,
            Usage::Sensors { usage: Sensors::DataFieldIlluminance } => 32 << 16 | 1233,
            Usage::Sensors { usage: Sensors::DataFieldColorTemperature } => 32 << 16 | 1234,
            Usage::Sensors { usage: Sensors::DataFieldChromaticity } => 32 << 16 | 1235,
            Usage::Sensors { usage: Sensors::DataFieldChromaticityX } => 32 << 16 | 1236,
            Usage::Sensors { usage: Sensors::DataFieldChromaticityY } => 32 << 16 | 1237,
            Usage::Sensors { usage: Sensors::DataFieldConsumerIRSentenceReceive } => 32 << 16 | 1238,
            Usage::Sensors { usage: Sensors::DataFieldInfraredLight } => 32 << 16 | 1239,
            Usage::Sensors { usage: Sensors::DataFieldRedLight } => 32 << 16 | 1240,
            Usage::Sensors { usage: Sensors::DataFieldGreenLight } => 32 << 16 | 1241,
            Usage::Sensors { usage: Sensors::DataFieldBlueLight } => 32 << 16 | 1242,
            Usage::Sensors { usage: Sensors::DataFieldUltravioletALight } => 32 << 16 | 1243,
            Usage::Sensors { usage: Sensors::DataFieldUltravioletBLight } => 32 << 16 | 1244,
            Usage::Sensors { usage: Sensors::DataFieldUltravioletIndex } => 32 << 16 | 1245,
            Usage::Sensors { usage: Sensors::DataFieldNearInfraredLight } => 32 << 16 | 1246,
            Usage::Sensors { usage: Sensors::PropertyLight } => 32 << 16 | 1247,
            Usage::Sensors { usage: Sensors::PropertyConsumerIRSentenceSend } => 32 << 16 | 1248,
            Usage::Sensors { usage: Sensors::PropertyAutoBrightnessPreferred } => 32 << 16 | 1250,
            Usage::Sensors { usage: Sensors::PropertyAutoColorPreferred } => 32 << 16 | 1251,
            Usage::Sensors { usage: Sensors::DataFieldScanner } => 32 << 16 | 1264,
            Usage::Sensors { usage: Sensors::DataFieldRFIDTag40Bit } => 32 << 16 | 1265,
            Usage::Sensors { usage: Sensors::DataFieldNFCSentenceReceive } => 32 << 16 | 1266,
            Usage::Sensors { usage: Sensors::PropertyScanner } => 32 << 16 | 1272,
            Usage::Sensors { usage: Sensors::PropertyNFCSentenceSend } => 32 << 16 | 1273,
            Usage::Sensors { usage: Sensors::DataFieldElectrical } => 32 << 16 | 1280,
            Usage::Sensors { usage: Sensors::DataFieldCapacitance } => 32 << 16 | 1281,
            Usage::Sensors { usage: Sensors::DataFieldCurrent } => 32 << 16 | 1282,
            Usage::Sensors { usage: Sensors::DataFieldElectricalPower } => 32 << 16 | 1283,
            Usage::Sensors { usage: Sensors::DataFieldInductance } => 32 << 16 | 1284,
            Usage::Sensors { usage: Sensors::DataFieldResistance } => 32 << 16 | 1285,
            Usage::Sensors { usage: Sensors::DataFieldVoltage } => 32 << 16 | 1286,
            Usage::Sensors { usage: Sensors::DataFieldFrequency } => 32 << 16 | 1287,
            Usage::Sensors { usage: Sensors::DataFieldPeriod } => 32 << 16 | 1288,
            Usage::Sensors { usage: Sensors::DataFieldPercentofRange } => 32 << 16 | 1289,
            Usage::Sensors { usage: Sensors::DataFieldTime } => 32 << 16 | 1312,
            Usage::Sensors { usage: Sensors::DataFieldYear } => 32 << 16 | 1313,
            Usage::Sensors { usage: Sensors::DataFieldMonth } => 32 << 16 | 1314,
            Usage::Sensors { usage: Sensors::DataFieldDay } => 32 << 16 | 1315,
            Usage::Sensors { usage: Sensors::DataFieldDayofWeek } => 32 << 16 | 1316,
            Usage::Sensors { usage: Sensors::DataFieldHour } => 32 << 16 | 1317,
            Usage::Sensors { usage: Sensors::DataFieldMinute } => 32 << 16 | 1318,
            Usage::Sensors { usage: Sensors::DataFieldSecond } => 32 << 16 | 1319,
            Usage::Sensors { usage: Sensors::DataFieldMillisecond } => 32 << 16 | 1320,
            Usage::Sensors { usage: Sensors::DataFieldTimestamp } => 32 << 16 | 1321,
            Usage::Sensors { usage: Sensors::DataFieldJulianDayofYear } => 32 << 16 | 1322,
            Usage::Sensors { usage: Sensors::DataFieldTimeSinceSystemBoot } => 32 << 16 | 1323,
            Usage::Sensors { usage: Sensors::PropertyTime } => 32 << 16 | 1328,
            Usage::Sensors { usage: Sensors::PropertyTimeZoneOffsetfromUTC } => 32 << 16 | 1329,
            Usage::Sensors { usage: Sensors::PropertyTimeZoneName } => 32 << 16 | 1330,
            Usage::Sensors { usage: Sensors::PropertyDaylightSavingsTimeObserved } => 32 << 16 | 1331,
            Usage::Sensors { usage: Sensors::PropertyTimeTrimAdjustment } => 32 << 16 | 1332,
            Usage::Sensors { usage: Sensors::PropertyArmAlarm } => 32 << 16 | 1333,
            Usage::Sensors { usage: Sensors::DataFieldCustom } => 32 << 16 | 1344,
            Usage::Sensors { usage: Sensors::DataFieldCustomUsage } => 32 << 16 | 1345,
            Usage::Sensors { usage: Sensors::DataFieldCustomBooleanArray } => 32 << 16 | 1346,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue } => 32 << 16 | 1347,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue1 } => 32 << 16 | 1348,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue2 } => 32 << 16 | 1349,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue3 } => 32 << 16 | 1350,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue4 } => 32 << 16 | 1351,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue5 } => 32 << 16 | 1352,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue6 } => 32 << 16 | 1353,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue7 } => 32 << 16 | 1354,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue8 } => 32 << 16 | 1355,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue9 } => 32 << 16 | 1356,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue10 } => 32 << 16 | 1357,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue11 } => 32 << 16 | 1358,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue12 } => 32 << 16 | 1359,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue13 } => 32 << 16 | 1360,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue14 } => 32 << 16 | 1361,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue15 } => 32 << 16 | 1362,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue16 } => 32 << 16 | 1363,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue17 } => 32 << 16 | 1364,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue18 } => 32 << 16 | 1365,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue19 } => 32 << 16 | 1366,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue20 } => 32 << 16 | 1367,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue21 } => 32 << 16 | 1368,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue22 } => 32 << 16 | 1369,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue23 } => 32 << 16 | 1370,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue24 } => 32 << 16 | 1371,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue25 } => 32 << 16 | 1372,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue26 } => 32 << 16 | 1373,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue27 } => 32 << 16 | 1374,
            Usage::Sensors { usage: Sensors::DataFieldCustomValue28 } => 32 << 16 | 1375,
            Usage::Sensors { usage: Sensors::DataFieldGeneric } => 32 << 16 | 1376,
            Usage::Sensors { usage: Sensors::DataFieldGenericGUIDorPROPERTYKEY } => 32 << 16 | 1377,
            Usage::Sensors { usage: Sensors::DataFieldGenericCategoryGUID } => 32 << 16 | 1378,
            Usage::Sensors { usage: Sensors::DataFieldGenericTypeGUID } => 32 << 16 | 1379,
            Usage::Sensors { usage: Sensors::DataFieldGenericEventPROPERTYKEY } => 32 << 16 | 1380,
            Usage::Sensors { usage: Sensors::DataFieldGenericPropertyPROPERTYKEY } => 32 << 16 | 1381,
            Usage::Sensors { usage: Sensors::DataFieldGenericDataFieldPROPERTYKEY } => 32 << 16 | 1382,
            Usage::Sensors { usage: Sensors::DataFieldGenericEvent } => 32 << 16 | 1383,
            Usage::Sensors { usage: Sensors::DataFieldGenericProperty } => 32 << 16 | 1384,
            Usage::Sensors { usage: Sensors::DataFieldGenericDataField } => 32 << 16 | 1385,
            Usage::Sensors { usage: Sensors::DataFieldEnumeratorTableRowIndex } => 32 << 16 | 1386,
            Usage::Sensors { usage: Sensors::DataFieldEnumeratorTableRowCount } => 32 << 16 | 1387,
            Usage::Sensors { usage: Sensors::DataFieldGenericGUIDorPROPERTYKEYkind } => 32 << 16 | 1388,
            Usage::Sensors { usage: Sensors::DataFieldGenericGUID } => 32 << 16 | 1389,
            Usage::Sensors { usage: Sensors::DataFieldGenericPROPERTYKEY } => 32 << 16 | 1390,
            Usage::Sensors { usage: Sensors::DataFieldGenericTopLevelCollectionID } => 32 << 16 | 1391,
            Usage::Sensors { usage: Sensors::DataFieldGenericReportID } => 32 << 16 | 1392,
            Usage::Sensors { usage: Sensors::DataFieldGenericReportItemPositionIndex } => 32 << 16 | 1393,
            Usage::Sensors { usage: Sensors::DataFieldGenericFirmwareVARTYPE } => 32 << 16 | 1394,
            Usage::Sensors { usage: Sensors::DataFieldGenericUnitofMeasure } => 32 << 16 | 1395,
            Usage::Sensors { usage: Sensors::DataFieldGenericUnitExponent } => 32 << 16 | 1396,
            Usage::Sensors { usage: Sensors::DataFieldGenericReportSize } => 32 << 16 | 1397,
            Usage::Sensors { usage: Sensors::DataFieldGenericReportCount } => 32 << 16 | 1398,
            Usage::Sensors { usage: Sensors::PropertyGeneric } => 32 << 16 | 1408,
            Usage::Sensors { usage: Sensors::PropertyEnumeratorTableRowIndex } => 32 << 16 | 1409,
            Usage::Sensors { usage: Sensors::PropertyEnumeratorTableRowCount } => 32 << 16 | 1410,
            Usage::Sensors { usage: Sensors::DataFieldPersonalActivity } => 32 << 16 | 1424,
            Usage::Sensors { usage: Sensors::DataFieldActivityType } => 32 << 16 | 1425,
            Usage::Sensors { usage: Sensors::DataFieldActivityState } => 32 << 16 | 1426,
            Usage::Sensors { usage: Sensors::DataFieldDevicePosition } => 32 << 16 | 1427,
            Usage::Sensors { usage: Sensors::DataFieldStepCount } => 32 << 16 | 1428,
            Usage::Sensors { usage: Sensors::DataFieldStepCountReset } => 32 << 16 | 1429,
            Usage::Sensors { usage: Sensors::DataFieldStepDuration } => 32 << 16 | 1430,
            Usage::Sensors { usage: Sensors::DataFieldStepType } => 32 << 16 | 1431,
            Usage::Sensors { usage: Sensors::PropertyMinimumActivityDetectionInterval } => 32 << 16 | 1440,
            Usage::Sensors { usage: Sensors::PropertySupportedActivityTypes } => 32 << 16 | 1441,
            Usage::Sensors { usage: Sensors::PropertySubscribedActivityTypes } => 32 << 16 | 1442,
            Usage::Sensors { usage: Sensors::PropertySupportedStepTypes } => 32 << 16 | 1443,
            Usage::Sensors { usage: Sensors::PropertySubscribedStepTypes } => 32 << 16 | 1444,
            Usage::Sensors { usage: Sensors::PropertyFloorHeight } => 32 << 16 | 1445,
            Usage::Sensors { usage: Sensors::DataFieldCustomTypeID } => 32 << 16 | 1456,
            Usage::Sensors { usage: Sensors::PropertyCustom } => 32 << 16 | 1472,
            Usage::Sensors { usage: Sensors::PropertyCustomValue1 } => 32 << 16 | 1473,
            Usage::Sensors { usage: Sensors::PropertyCustomValue2 } => 32 << 16 | 1474,
            Usage::Sensors { usage: Sensors::PropertyCustomValue3 } => 32 << 16 | 1475,
            Usage::Sensors { usage: Sensors::PropertyCustomValue4 } => 32 << 16 | 1476,
            Usage::Sensors { usage: Sensors::PropertyCustomValue5 } => 32 << 16 | 1477,
            Usage::Sensors { usage: Sensors::PropertyCustomValue6 } => 32 << 16 | 1478,
            Usage::Sensors { usage: Sensors::PropertyCustomValue7 } => 32 << 16 | 1479,
            Usage::Sensors { usage: Sensors::PropertyCustomValue8 } => 32 << 16 | 1480,
            Usage::Sensors { usage: Sensors::PropertyCustomValue9 } => 32 << 16 | 1481,
            Usage::Sensors { usage: Sensors::PropertyCustomValue10 } => 32 << 16 | 1482,
            Usage::Sensors { usage: Sensors::PropertyCustomValue11 } => 32 << 16 | 1483,
            Usage::Sensors { usage: Sensors::PropertyCustomValue12 } => 32 << 16 | 1484,
            Usage::Sensors { usage: Sensors::PropertyCustomValue13 } => 32 << 16 | 1485,
            Usage::Sensors { usage: Sensors::PropertyCustomValue14 } => 32 << 16 | 1486,
            Usage::Sensors { usage: Sensors::PropertyCustomValue15 } => 32 << 16 | 1487,
            Usage::Sensors { usage: Sensors::PropertyCustomValue16 } => 32 << 16 | 1488,
            Usage::Sensors { usage: Sensors::DataFieldHinge } => 32 << 16 | 1504,
            Usage::Sensors { usage: Sensors::DataFieldHingeAngle } => 32 << 16 | 1505,
            Usage::Sensors { usage: Sensors::DataFieldGestureSensor } => 32 << 16 | 1520,
            Usage::Sensors { usage: Sensors::DataFieldGestureState } => 32 << 16 | 1521,
            Usage::Sensors { usage: Sensors::DataFieldHingeFoldInitialAngle } => 32 << 16 | 1522,
            Usage::Sensors { usage: Sensors::DataFieldHingeFoldFinalAngle } => 32 << 16 | 1523,
            Usage::Sensors { usage: Sensors::DataFieldHingeFoldContributingPanel } => 32 << 16 | 1524,
            Usage::Sensors { usage: Sensors::DataFieldHingeFoldType } => 32 << 16 | 1525,
            Usage::Sensors { usage: Sensors::SensorStateUndefined } => 32 << 16 | 2048,
            Usage::Sensors { usage: Sensors::SensorStateReady } => 32 << 16 | 2049,
            Usage::Sensors { usage: Sensors::SensorStateNotAvailable } => 32 << 16 | 2050,
            Usage::Sensors { usage: Sensors::SensorStateNoData } => 32 << 16 | 2051,
            Usage::Sensors { usage: Sensors::SensorStateInitializing } => 32 << 16 | 2052,
            Usage::Sensors { usage: Sensors::SensorStateAccessDenied } => 32 << 16 | 2053,
            Usage::Sensors { usage: Sensors::SensorStateError } => 32 << 16 | 2054,
            Usage::Sensors { usage: Sensors::SensorEventUnknown } => 32 << 16 | 2064,
            Usage::Sensors { usage: Sensors::SensorEventStateChanged } => 32 << 16 | 2065,
            Usage::Sensors { usage: Sensors::SensorEventPropertyChanged } => 32 << 16 | 2066,
            Usage::Sensors { usage: Sensors::SensorEventDataUpdated } => 32 << 16 | 2067,
            Usage::Sensors { usage: Sensors::SensorEventPollResponse } => 32 << 16 | 2068,
            Usage::Sensors { usage: Sensors::SensorEventChangeSensitivity } => 32 << 16 | 2069,
            Usage::Sensors { usage: Sensors::SensorEventRangeMaximumReached } => 32 << 16 | 2070,
            Usage::Sensors { usage: Sensors::SensorEventRangeMinimumReached } => 32 << 16 | 2071,
            Usage::Sensors { usage: Sensors::SensorEventHighThresholdCrossUpward } => 32 << 16 | 2072,
            Usage::Sensors { usage: Sensors::SensorEventHighThresholdCrossDownward } => 32 << 16 | 2073,
            Usage::Sensors { usage: Sensors::SensorEventLowThresholdCrossUpward } => 32 << 16 | 2074,
            Usage::Sensors { usage: Sensors::SensorEventLowThresholdCrossDownward } => 32 << 16 | 2075,
            Usage::Sensors { usage: Sensors::SensorEventZeroThresholdCrossUpward } => 32 << 16 | 2076,
            Usage::Sensors { usage: Sensors::SensorEventZeroThresholdCrossDownward } => 32 << 16 | 2077,
            Usage::Sensors { usage: Sensors::SensorEventPeriodExceeded } => 32 << 16 | 2078,
            Usage::Sensors { usage: Sensors::SensorEventFrequencyExceeded } => 32 << 16 | 2079,
            Usage::Sensors { usage: Sensors::SensorEventComplexTrigger } => 32 << 16 | 2080,
            Usage::Sensors { usage: Sensors::ConnectionTypePCIntegrated } => 32 << 16 | 2096,
            Usage::Sensors { usage: Sensors::ConnectionTypePCAttached } => 32 << 16 | 2097,
            Usage::Sensors { usage: Sensors::ConnectionTypePCExternal } => 32 << 16 | 2098,
            Usage::Sensors { usage: Sensors::ReportingStateReportNoEvents } => 32 << 16 | 2112,
            Usage::Sensors { usage: Sensors::ReportingStateReportAllEvents } => 32 << 16 | 2113,
            Usage::Sensors { usage: Sensors::ReportingStateReportThresholdEvents } => 32 << 16 | 2114,
            Usage::Sensors { usage: Sensors::ReportingStateWakeOnNoEvents } => 32 << 16 | 2115,
            Usage::Sensors { usage: Sensors::ReportingStateWakeOnAllEvents } => 32 << 16 | 2116,
            Usage::Sensors { usage: Sensors::ReportingStateWakeOnThresholdEvents } => 32 << 16 | 2117,
            Usage::Sensors { usage: Sensors::ReportingStateAnytime } => 32 << 16 | 2118,
            Usage::Sensors { usage: Sensors::PowerStateUndefined } => 32 << 16 | 2128,
            Usage::Sensors { usage: Sensors::PowerStateD0FullPower } => 32 << 16 | 2129,
            Usage::Sensors { usage: Sensors::PowerStateD1LowPower } => 32 << 16 | 2130,
            Usage::Sensors { usage: Sensors::PowerStateD2StandbyPowerwithWakeup } => 32 << 16 | 2131,
            Usage::Sensors { usage: Sensors::PowerStateD3SleepwithWakeup } => 32 << 16 | 2132,
            Usage::Sensors { usage: Sensors::PowerStateD4PowerOff } => 32 << 16 | 2133,
            Usage::Sensors { usage: Sensors::AccuracyDefault } => 32 << 16 | 2144,
            Usage::Sensors { usage: Sensors::AccuracyHigh } => 32 << 16 | 2145,
            Usage::Sensors { usage: Sensors::AccuracyMedium } => 32 << 16 | 2146,
            Usage::Sensors { usage: Sensors::AccuracyLow } => 32 << 16 | 2147,
            Usage::Sensors { usage: Sensors::FixQualityNoFix } => 32 << 16 | 2160,
            Usage::Sensors { usage: Sensors::FixQualityGPS } => 32 << 16 | 2161,
            Usage::Sensors { usage: Sensors::FixQualityDGPS } => 32 << 16 | 2162,
            Usage::Sensors { usage: Sensors::FixTypeNoFix } => 32 << 16 | 2176,
            Usage::Sensors { usage: Sensors::FixTypeGPSSPSModeFixValid } => 32 << 16 | 2177,
            Usage::Sensors { usage: Sensors::FixTypeDGPSSPSModeFixValid } => 32 << 16 | 2178,
            Usage::Sensors { usage: Sensors::FixTypeGPSPPSModeFixValid } => 32 << 16 | 2179,
            Usage::Sensors { usage: Sensors::FixTypeRealTimeKinematic } => 32 << 16 | 2180,
            Usage::Sensors { usage: Sensors::FixTypeFloatRTK } => 32 << 16 | 2181,
            Usage::Sensors { usage: Sensors::FixTypeEstimateddeadreckoned } => 32 << 16 | 2182,
            Usage::Sensors { usage: Sensors::FixTypeManualInputMode } => 32 << 16 | 2183,
            Usage::Sensors { usage: Sensors::FixTypeSimulatorMode } => 32 << 16 | 2184,
            Usage::Sensors { usage: Sensors::GPSOperationModeManual } => 32 << 16 | 2192,
            Usage::Sensors { usage: Sensors::GPSOperationModeAutomatic } => 32 << 16 | 2193,
            Usage::Sensors { usage: Sensors::GPSSelectionModeAutonomous } => 32 << 16 | 2208,
            Usage::Sensors { usage: Sensors::GPSSelectionModeDGPS } => 32 << 16 | 2209,
            Usage::Sensors { usage: Sensors::GPSSelectionModeEstimateddeadreckoned } => 32 << 16 | 2210,
            Usage::Sensors { usage: Sensors::GPSSelectionModeManualInput } => 32 << 16 | 2211,
            Usage::Sensors { usage: Sensors::GPSSelectionModeSimulator } => 32 << 16 | 2212,
            Usage::Sensors { usage: Sensors::GPSSelectionModeDataNotValid } => 32 << 16 | 2213,
            Usage::Sensors { usage: Sensors::GPSStatusDataValid } => 32 << 16 | 2224,
            Usage::Sensors { usage: Sensors::GPSStatusDataNotValid } => 32 << 16 | 2225,
            Usage::Sensors { usage: Sensors::DayofWeekSunday } => 32 << 16 | 2240,
            Usage::Sensors { usage: Sensors::DayofWeekMonday } => 32 << 16 | 2241,
            Usage::Sensors { usage: Sensors::DayofWeekTuesday } => 32 << 16 | 2242,
            Usage::Sensors { usage: Sensors::DayofWeekWednesday } => 32 << 16 | 2243,
            Usage::Sensors { usage: Sensors::DayofWeekThursday } => 32 << 16 | 2244,
            Usage::Sensors { usage: Sensors::DayofWeekFriday } => 32 << 16 | 2245,
            Usage::Sensors { usage: Sensors::DayofWeekSaturday } => 32 << 16 | 2246,
            Usage::Sensors { usage: Sensors::KindCategory } => 32 << 16 | 2256,
            Usage::Sensors { usage: Sensors::KindType } => 32 << 16 | 2257,
            Usage::Sensors { usage: Sensors::KindEvent } => 32 << 16 | 2258,
            Usage::Sensors { usage: Sensors::KindProperty } => 32 << 16 | 2259,
            Usage::Sensors { usage: Sensors::KindDataField } => 32 << 16 | 2260,
            Usage::Sensors { usage: Sensors::MagnetometerAccuracyLow } => 32 << 16 | 2272,
            Usage::Sensors { usage: Sensors::MagnetometerAccuracyMedium } => 32 << 16 | 2273,
            Usage::Sensors { usage: Sensors::MagnetometerAccuracyHigh } => 32 << 16 | 2274,
            Usage::Sensors { usage: Sensors::SimpleOrientationDirectionNotRotated } => 32 << 16 | 2288,
            Usage::Sensors { usage: Sensors::SimpleOrientationDirectionRotated90DegreesCCW } => 32 << 16 | 2289,
            Usage::Sensors { usage: Sensors::SimpleOrientationDirectionRotated180DegreesCCW } => 32 << 16 | 2290,
            Usage::Sensors { usage: Sensors::SimpleOrientationDirectionRotated270DegreesCCW } => 32 << 16 | 2291,
            Usage::Sensors { usage: Sensors::SimpleOrientationDirectionFaceUp } => 32 << 16 | 2292,
            Usage::Sensors { usage: Sensors::SimpleOrientationDirectionFaceDown } => 32 << 16 | 2293,
            Usage::Sensors { usage: Sensors::VT_NULL } => 32 << 16 | 2304,
            Usage::Sensors { usage: Sensors::VT_BOOL } => 32 << 16 | 2305,
            Usage::Sensors { usage: Sensors::VT_UI1 } => 32 << 16 | 2306,
            Usage::Sensors { usage: Sensors::VT_I1 } => 32 << 16 | 2307,
            Usage::Sensors { usage: Sensors::VT_UI2 } => 32 << 16 | 2308,
            Usage::Sensors { usage: Sensors::VT_I2 } => 32 << 16 | 2309,
            Usage::Sensors { usage: Sensors::VT_UI4 } => 32 << 16 | 2310,
            Usage::Sensors { usage: Sensors::VT_I4 } => 32 << 16 | 2311,
            Usage::Sensors { usage: Sensors::VT_UI8 } => 32 << 16 | 2312,
            Usage::Sensors { usage: Sensors::VT_I8 } => 32 << 16 | 2313,
            Usage::Sensors { usage: Sensors::VT_R4 } => 32 << 16 | 2314,
            Usage::Sensors { usage: Sensors::VT_R8 } => 32 << 16 | 2315,
            Usage::Sensors { usage: Sensors::VT_WSTR } => 32 << 16 | 2316,
            Usage::Sensors { usage: Sensors::VT_STR } => 32 << 16 | 2317,
            Usage::Sensors { usage: Sensors::VT_CLSID } => 32 << 16 | 2318,
            Usage::Sensors { usage: Sensors::VT_VECTORVT_UI1 } => 32 << 16 | 2319,
            Usage::Sensors { usage: Sensors::VT_F16E0 } => 32 << 16 | 2320,
            Usage::Sensors { usage: Sensors::VT_F16E1 } => 32 << 16 | 2321,
            Usage::Sensors { usage: Sensors::VT_F16E2 } => 32 << 16 | 2322,
            Usage::Sensors { usage: Sensors::VT_F16E3 } => 32 << 16 | 2323,
            Usage::Sensors { usage: Sensors::VT_F16E4 } => 32 << 16 | 2324,
            Usage::Sensors { usage: Sensors::VT_F16E5 } => 32 << 16 | 2325,
            Usage::Sensors { usage: Sensors::VT_F16E6 } => 32 << 16 | 2326,
            Usage::Sensors { usage: Sensors::VT_F16E7 } => 32 << 16 | 2327,
            Usage::Sensors { usage: Sensors::VT_F16E8 } => 32 << 16 | 2328,
            Usage::Sensors { usage: Sensors::VT_F16E9 } => 32 << 16 | 2329,
            Usage::Sensors { usage: Sensors::VT_F16EA } => 32 << 16 | 2330,
            Usage::Sensors { usage: Sensors::VT_F16EB } => 32 << 16 | 2331,
            Usage::Sensors { usage: Sensors::VT_F16EC } => 32 << 16 | 2332,
            Usage::Sensors { usage: Sensors::VT_F16ED } => 32 << 16 | 2333,
            Usage::Sensors { usage: Sensors::VT_F16EE } => 32 << 16 | 2334,
            Usage::Sensors { usage: Sensors::VT_F16EF } => 32 << 16 | 2335,
            Usage::Sensors { usage: Sensors::VT_F32E0 } => 32 << 16 | 2336,
            Usage::Sensors { usage: Sensors::VT_F32E1 } => 32 << 16 | 2337,
            Usage::Sensors { usage: Sensors::VT_F32E2 } => 32 << 16 | 2338,
            Usage::Sensors { usage: Sensors::VT_F32E3 } => 32 << 16 | 2339,
            Usage::Sensors { usage: Sensors::VT_F32E4 } => 32 << 16 | 2340,
            Usage::Sensors { usage: Sensors::VT_F32E5 } => 32 << 16 | 2341,
            Usage::Sensors { usage: Sensors::VT_F32E6 } => 32 << 16 | 2342,
            Usage::Sensors { usage: Sensors::VT_F32E7 } => 32 << 16 | 2343,
            Usage::Sensors { usage: Sensors::VT_F32E8 } => 32 << 16 | 2344,
            Usage::Sensors { usage: Sensors::VT_F32E9 } => 32 << 16 | 2345,
            Usage::Sensors { usage: Sensors::VT_F32EA } => 32 << 16 | 2346,
            Usage::Sensors { usage: Sensors::VT_F32EB } => 32 << 16 | 2347,
            Usage::Sensors { usage: Sensors::VT_F32EC } => 32 << 16 | 2348,
            Usage::Sensors { usage: Sensors::VT_F32ED } => 32 << 16 | 2349,
            Usage::Sensors { usage: Sensors::VT_F32EE } => 32 << 16 | 2350,
            Usage::Sensors { usage: Sensors::VT_F32EF } => 32 << 16 | 2351,
            Usage::Sensors { usage: Sensors::ActivityTypeUnknown } => 32 << 16 | 2352,
            Usage::Sensors { usage: Sensors::ActivityTypeStationary } => 32 << 16 | 2353,
            Usage::Sensors { usage: Sensors::ActivityTypeFidgeting } => 32 << 16 | 2354,
            Usage::Sensors { usage: Sensors::ActivityTypeWalking } => 32 << 16 | 2355,
            Usage::Sensors { usage: Sensors::ActivityTypeRunning } => 32 << 16 | 2356,
            Usage::Sensors { usage: Sensors::ActivityTypeInVehicle } => 32 << 16 | 2357,
            Usage::Sensors { usage: Sensors::ActivityTypeBiking } => 32 << 16 | 2358,
            Usage::Sensors { usage: Sensors::ActivityTypeIdle } => 32 << 16 | 2359,
            Usage::Sensors { usage: Sensors::UnitNotSpecified } => 32 << 16 | 2368,
            Usage::Sensors { usage: Sensors::UnitLux } => 32 << 16 | 2369,
            Usage::Sensors { usage: Sensors::UnitDegreesKelvin } => 32 << 16 | 2370,
            Usage::Sensors { usage: Sensors::UnitDegreesCelsius } => 32 << 16 | 2371,
            Usage::Sensors { usage: Sensors::UnitPascal } => 32 << 16 | 2372,
            Usage::Sensors { usage: Sensors::UnitNewton } => 32 << 16 | 2373,
            Usage::Sensors { usage: Sensors::UnitMetersSecond } => 32 << 16 | 2374,
            Usage::Sensors { usage: Sensors::UnitKilogram } => 32 << 16 | 2375,
            Usage::Sensors { usage: Sensors::UnitMeter } => 32 << 16 | 2376,
            Usage::Sensors { usage: Sensors::UnitMetersSecondSecond } => 32 << 16 | 2377,
            Usage::Sensors { usage: Sensors::UnitFarad } => 32 << 16 | 2378,
            Usage::Sensors { usage: Sensors::UnitAmpere } => 32 << 16 | 2379,
            Usage::Sensors { usage: Sensors::UnitWatt } => 32 << 16 | 2380,
            Usage::Sensors { usage: Sensors::UnitHenry } => 32 << 16 | 2381,
            Usage::Sensors { usage: Sensors::UnitOhm } => 32 << 16 | 2382,
            Usage::Sensors { usage: Sensors::UnitVolt } => 32 << 16 | 2383,
            Usage::Sensors { usage: Sensors::UnitHertz } => 32 << 16 | 2384,
            Usage::Sensors { usage: Sensors::UnitBar } => 32 << 16 | 2385,
            Usage::Sensors { usage: Sensors::UnitDegreesAnticlockwise } => 32 << 16 | 2386,
            Usage::Sensors { usage: Sensors::UnitDegreesClockwise } => 32 << 16 | 2387,
            Usage::Sensors { usage: Sensors::UnitDegrees } => 32 << 16 | 2388,
            Usage::Sensors { usage: Sensors::UnitDegreesSecond } => 32 << 16 | 2389,
            Usage::Sensors { usage: Sensors::UnitDegreesSecondSecond } => 32 << 16 | 2390,
            Usage::Sensors { usage: Sensors::UnitKnot } => 32 << 16 | 2391,
            Usage::Sensors { usage: Sensors::UnitPercent } => 32 << 16 | 2392,
            Usage::Sensors { usage: Sensors::UnitSecond } => 32 << 16 | 2393,
            Usage::Sensors { usage: Sensors::UnitMillisecond } => 32 << 16 | 2394,
            Usage::Sensors { usage: Sensors::UnitG } => 32 << 16 | 2395,
            Usage::Sensors { usage: Sensors::UnitBytes } => 32 << 16 | 2396,
            Usage::Sensors { usage: Sensors::UnitMilligauss } => 32 << 16 | 2397,
            Usage::Sensors { usage: Sensors::UnitBits } => 32 << 16 | 2398,
            Usage::Sensors { usage: Sensors::ActivityStateNoStateChange } => 32 << 16 | 2400,
            Usage::Sensors { usage: Sensors::ActivityStateStartActivity } => 32 << 16 | 2401,
            Usage::Sensors { usage: Sensors::ActivityStateEndActivity } => 32 << 16 | 2402,
            Usage::Sensors { usage: Sensors::Exponent0 } => 32 << 16 | 2416,
            Usage::Sensors { usage: Sensors::Exponent1 } => 32 << 16 | 2417,
            Usage::Sensors { usage: Sensors::Exponent2 } => 32 << 16 | 2418,
            Usage::Sensors { usage: Sensors::Exponent3 } => 32 << 16 | 2419,
            Usage::Sensors { usage: Sensors::Exponent4 } => 32 << 16 | 2420,
            Usage::Sensors { usage: Sensors::Exponent5 } => 32 << 16 | 2421,
            Usage::Sensors { usage: Sensors::Exponent6 } => 32 << 16 | 2422,
            Usage::Sensors { usage: Sensors::Exponent7 } => 32 << 16 | 2423,
            Usage::Sensors { usage: Sensors::Exponent8 } => 32 << 16 | 2424,
            Usage::Sensors { usage: Sensors::Exponent9 } => 32 << 16 | 2425,
            Usage::Sensors { usage: Sensors::ExponentA } => 32 << 16 | 2426,
            Usage::Sensors { usage: Sensors::ExponentB } => 32 << 16 | 2427,
            Usage::Sensors { usage: Sensors::ExponentC } => 32 << 16 | 2428,
            Usage::Sensors { usage: Sensors::ExponentD } => 32 << 16 | 2429,
            Usage::Sensors { usage: Sensors::ExponentE } => 32 << 16 | 2430,
            Usage::Sensors { usage: Sensors::ExponentF } => 32 << 16 | 2431,
            Usage::Sensors { usage: Sensors::DevicePositionUnknown } => 32 << 16 | 2432,
            Usage::Sensors { usage: Sensors::DevicePositionUnchanged } => 32 << 16 | 2433,
            Usage::Sensors { usage: Sensors::DevicePositionOnDesk } => 32 << 16 | 2434,
            Usage::Sensors { usage: Sensors::DevicePositionInHand } => 32 << 16 | 2435,
            Usage::Sensors { usage: Sensors::DevicePositionMovinginBag } => 32 << 16 | 2436,
            Usage::Sensors { usage: Sensors::DevicePositionStationaryinBag } => 32 << 16 | 2437,
            Usage::Sensors { usage: Sensors::StepTypeUnknown } => 32 << 16 | 2448,
            Usage::Sensors { usage: Sensors::StepTypeWalking } => 32 << 16 | 2449,
            Usage::Sensors { usage: Sensors::StepTypeRunning } => 32 << 16 | 2450,
            Usage::Sensors { usage: Sensors::GestureStateUnknown } => 32 << 16 | 2464,
            Usage::Sensors { usage: Sensors::GestureStateStarted } => 32 << 16 | 2465,
            Usage::Sensors { usage: Sensors::GestureStateCompleted } => 32 << 16 | 2466,
            Usage::Sensors { usage: Sensors::GestureStateCancelled } => 32 << 16 | 2467,
            Usage::Sensors { usage: Sensors::HingeFoldContributingPanelUnknown } => 32 << 16 | 2480,
            Usage::Sensors { usage: Sensors::HingeFoldContributingPanelPanel1 } => 32 << 16 | 2481,
            Usage::Sensors { usage: Sensors::HingeFoldContributingPanelPanel2 } => 32 << 16 | 2482,
            Usage::Sensors { usage: Sensors::HingeFoldContributingPanelBoth } => 32 << 16 | 2483,
            Usage::Sensors { usage: Sensors::HingeFoldTypeUnknown } => 32 << 16 | 2484,
            Usage::Sensors { usage: Sensors::HingeFoldTypeIncreasing } => 32 << 16 | 2485,
            Usage::Sensors { usage: Sensors::HingeFoldTypeDecreasing } => 32 << 16 | 2486,
            Usage::Sensors { usage: Sensors::HumanPresenceDetectionTypeVendorDefinedNonBiometric } => 32 << 16 | 2496,
            Usage::Sensors { usage: Sensors::HumanPresenceDetectionTypeVendorDefinedBiometric } => 32 << 16 | 2497,
            Usage::Sensors { usage: Sensors::HumanPresenceDetectionTypeFacialBiometric } => 32 << 16 | 2498,
            Usage::Sensors { usage: Sensors::HumanPresenceDetectionTypeAudioBiometric } => 32 << 16 | 2499,
            Usage::Sensors { usage: Sensors::ModifierChangeSensitivityAbsolute } => 32 << 16 | 4096,
            Usage::Sensors { usage: Sensors::ModifierMaximum } => 32 << 16 | 8192,
            Usage::Sensors { usage: Sensors::ModifierMinimum } => 32 << 16 | 12288,
            Usage::Sensors { usage: Sensors::ModifierAccuracy } => 32 << 16 | 16384,
            Usage::Sensors { usage: Sensors::ModifierResolution } => 32 << 16 | 20480,
            Usage::Sensors { usage: Sensors::ModifierThresholdHigh } => 32 << 16 | 24576,
            Usage::Sensors { usage: Sensors::ModifierThresholdLow } => 32 << 16 | 28672,
            Usage::Sensors { usage: Sensors::ModifierCalibrationOffset } => 32 << 16 | 32768,
            Usage::Sensors { usage: Sensors::ModifierCalibrationMultiplier } => 32 << 16 | 36864,
            Usage::Sensors { usage: Sensors::ModifierReportInterval } => 32 << 16 | 40960,
            Usage::Sensors { usage: Sensors::ModifierFrequencyMax } => 32 << 16 | 45056,
            Usage::Sensors { usage: Sensors::ModifierPeriodMax } => 32 << 16 | 49152,
            Usage::Sensors { usage: Sensors::ModifierChangeSensitivityPercentofRange } => 32 << 16 | 53248,
            Usage::Sensors { usage: Sensors::ModifierChangeSensitivityPercentRelative } => 32 << 16 | 57344,
            Usage::Sensors { usage: Sensors::ModifierVendorReserved } => 32 << 16 | 61440,
            Usage::MedicalInstrument { usage: MedicalInstrument::MedicalUltrasound } => 64 << 16 | 1,
            Usage::MedicalInstrument { usage: MedicalInstrument::VCRAcquisition } => 64 << 16 | 32,
            Usage::MedicalInstrument { usage: MedicalInstrument::FreezeThaw } => 64 << 16 | 33,
            Usage::MedicalInstrument { usage: MedicalInstrument::ClipStore } => 64 << 16 | 34,
            Usage::MedicalInstrument { usage: MedicalInstrument::Update } => 64 << 16 | 35,
            Usage::MedicalInstrument { usage: MedicalInstrument::Next } => 64 << 16 | 36,
            Usage::MedicalInstrument { usage: MedicalInstrument::Save } => 64 << 16 | 37,
            Usage::MedicalInstrument { usage: MedicalInstrument::Print } => 64 << 16 | 38,
            Usage::MedicalInstrument { usage: MedicalInstrument::MicrophoneEnable } => 64 << 16 | 39,
            Usage::MedicalInstrument { usage: MedicalInstrument::Cine } => 64 << 16 | 64,
            Usage::MedicalInstrument { usage: MedicalInstrument::TransmitPower } => 64 << 16 | 65,
            Usage::MedicalInstrument { usage: MedicalInstrument::Volume } => 64 << 16 | 66,
            Usage::MedicalInstrument { usage: MedicalInstrument::Focus } => 64 << 16 | 67,
            Usage::MedicalInstrument { usage: MedicalInstrument::Depth } => 64 << 16 | 68,
            Usage::MedicalInstrument { usage: MedicalInstrument::SoftStepPrimary } => 64 << 16 | 96,
            Usage::MedicalInstrument { usage: MedicalInstrument::SoftStepSecondary } => 64 << 16 | 97,
            Usage::MedicalInstrument { usage: MedicalInstrument::DepthGainCompensation } => 64 << 16 | 112,
            Usage::MedicalInstrument { usage: MedicalInstrument::ZoomSelect } => 64 << 16 | 128,
            Usage::MedicalInstrument { usage: MedicalInstrument::ZoomAdjust } => 64 << 16 | 129,
            Usage::MedicalInstrument { usage: MedicalInstrument::SpectralDopplerModeSelect } => 64 << 16 | 130,
            Usage::MedicalInstrument { usage: MedicalInstrument::SpectralDopplerAdjust } => 64 << 16 | 131,
            Usage::MedicalInstrument { usage: MedicalInstrument::ColorDopplerModeSelect } => 64 << 16 | 132,
            Usage::MedicalInstrument { usage: MedicalInstrument::ColorDopplerAdjust } => 64 << 16 | 133,
            Usage::MedicalInstrument { usage: MedicalInstrument::MotionModeSelect } => 64 << 16 | 134,
            Usage::MedicalInstrument { usage: MedicalInstrument::MotionModeAdjust } => 64 << 16 | 135,
            Usage::MedicalInstrument { usage: MedicalInstrument::TwoDModeSelect } => 64 << 16 | 136,
            Usage::MedicalInstrument { usage: MedicalInstrument::TwoDModeAdjust } => 64 << 16 | 137,
            Usage::MedicalInstrument { usage: MedicalInstrument::SoftControlSelect } => 64 << 16 | 160,
            Usage::MedicalInstrument { usage: MedicalInstrument::SoftControlAdjust } => 64 << 16 | 161,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDisplay } => 65 << 16 | 1,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRow } => 65 << 16 | 2,
            Usage::BrailleDisplay { usage: BrailleDisplay::EightDotBrailleCell } => 65 << 16 | 3,
            Usage::BrailleDisplay { usage: BrailleDisplay::SixDotBrailleCell } => 65 << 16 | 4,
            Usage::BrailleDisplay { usage: BrailleDisplay::NumberofBrailleCells } => 65 << 16 | 5,
            Usage::BrailleDisplay { usage: BrailleDisplay::ScreenReaderControl } => 65 << 16 | 6,
            Usage::BrailleDisplay { usage: BrailleDisplay::ScreenReaderIdentifier } => 65 << 16 | 7,
            Usage::BrailleDisplay { usage: BrailleDisplay::RouterSet1 } => 65 << 16 | 250,
            Usage::BrailleDisplay { usage: BrailleDisplay::RouterSet2 } => 65 << 16 | 251,
            Usage::BrailleDisplay { usage: BrailleDisplay::RouterSet3 } => 65 << 16 | 252,
            Usage::BrailleDisplay { usage: BrailleDisplay::RouterKey } => 65 << 16 | 256,
            Usage::BrailleDisplay { usage: BrailleDisplay::RowRouterKey } => 65 << 16 | 257,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleButtons } => 65 << 16 | 512,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot1 } => 65 << 16 | 513,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot2 } => 65 << 16 | 514,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot3 } => 65 << 16 | 515,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot4 } => 65 << 16 | 516,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot5 } => 65 << 16 | 517,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot6 } => 65 << 16 | 518,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot7 } => 65 << 16 | 519,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot8 } => 65 << 16 | 520,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardSpace } => 65 << 16 | 521,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardLeftSpace } => 65 << 16 | 522,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardRightSpace } => 65 << 16 | 523,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleFaceControls } => 65 << 16 | 524,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleLeftControls } => 65 << 16 | 525,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRightControls } => 65 << 16 | 526,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleTopControls } => 65 << 16 | 527,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickCenter } => 65 << 16 | 528,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickUp } => 65 << 16 | 529,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickDown } => 65 << 16 | 530,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickLeft } => 65 << 16 | 531,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickRight } => 65 << 16 | 532,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadCenter } => 65 << 16 | 533,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadUp } => 65 << 16 | 534,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadDown } => 65 << 16 | 535,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadLeft } => 65 << 16 | 536,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadRight } => 65 << 16 | 537,
            Usage::BrailleDisplay { usage: BrailleDisplay::BraillePanLeft } => 65 << 16 | 538,
            Usage::BrailleDisplay { usage: BrailleDisplay::BraillePanRight } => 65 << 16 | 539,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRockerUp } => 65 << 16 | 540,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRockerDown } => 65 << 16 | 541,
            Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRockerPress } => 65 << 16 | 542,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArray } => 89 << 16 | 1,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArrayAttributesReport } => 89 << 16 | 2,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampCount } => 89 << 16 | 3,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::BoundingBoxWidthInMicrometers } => 89 << 16 | 4,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::BoundingBoxHeightInMicrometers } => 89 << 16 | 5,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::BoundingBoxDepthInMicrometers } => 89 << 16 | 6,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArrayKind } => 89 << 16 | 7,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::MinUpdateIntervalInMicroseconds } => 89 << 16 | 8,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampAttributesRequestReport } => 89 << 16 | 32,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampId } => 89 << 16 | 33,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampAttributesResponseReport } => 89 << 16 | 34,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::PositionXInMicrometers } => 89 << 16 | 35,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::PositionYInMicrometers } => 89 << 16 | 36,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::PositionZInMicrometers } => 89 << 16 | 37,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampPurposes } => 89 << 16 | 38,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::UpdateLatencyInMicroseconds } => 89 << 16 | 39,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::RedLevelCount } => 89 << 16 | 40,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::GreenLevelCount } => 89 << 16 | 41,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::BlueLevelCount } => 89 << 16 | 42,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::IntensityLevelCount } => 89 << 16 | 43,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::IsProgrammable } => 89 << 16 | 44,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::InputBinding } => 89 << 16 | 45,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampMultiUpdateReport } => 89 << 16 | 80,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::RedUpdateChannel } => 89 << 16 | 81,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::GreenUpdateChannel } => 89 << 16 | 82,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::BlueUpdateChannel } => 89 << 16 | 83,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::IntensityUpdateChannel } => 89 << 16 | 84,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampUpdateFlags } => 89 << 16 | 85,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampRangeUpdateReport } => 89 << 16 | 96,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampIdStart } => 89 << 16 | 97,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampIdEnd } => 89 << 16 | 98,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArrayControlReport } => 89 << 16 | 112,
            Usage::LightingAndIllumination { usage: LightingAndIllumination::AutonomousMode } => 89 << 16 | 113,
            Usage::Monitor { usage: Monitor::MonitorControl } => 128 << 16 | 1,
            Usage::Monitor { usage: Monitor::EDIDInformation } => 128 << 16 | 2,
            Usage::Monitor { usage: Monitor::VDIFInformation } => 128 << 16 | 3,
            Usage::Monitor { usage: Monitor::VESAVersion } => 128 << 16 | 4,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::Degauss } => 130 << 16 | 1,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::Brightness } => 130 << 16 | 16,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::Contrast } => 130 << 16 | 18,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::RedVideoGain } => 130 << 16 | 22,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::GreenVideoGain } => 130 << 16 | 24,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::BlueVideoGain } => 130 << 16 | 26,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::Focus } => 130 << 16 | 28,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalPosition } => 130 << 16 | 32,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalSize } => 130 << 16 | 34,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalPincushion } => 130 << 16 | 36,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalPincushionBalance } => 130 << 16 | 38,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalMisconvergence } => 130 << 16 | 40,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalLinearity } => 130 << 16 | 42,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalLinearityBalance } => 130 << 16 | 44,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalPosition } => 130 << 16 | 48,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalSize } => 130 << 16 | 50,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalPincushion } => 130 << 16 | 52,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalPincushionBalance } => 130 << 16 | 54,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalMisconvergence } => 130 << 16 | 56,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalLinearity } => 130 << 16 | 58,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalLinearityBalance } => 130 << 16 | 60,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::ParallelogramDistortionKeyBalance } => 130 << 16 | 64,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::TrapezoidalDistortionKey } => 130 << 16 | 66,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::TiltRotation } => 130 << 16 | 68,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::TopCornerDistortionControl } => 130 << 16 | 70,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::TopCornerDistortionBalance } => 130 << 16 | 72,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::BottomCornerDistortionControl } => 130 << 16 | 74,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::BottomCornerDistortionBalance } => 130 << 16 | 76,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalMoiré } => 130 << 16 | 86,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalMoiré } => 130 << 16 | 88,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::InputLevelSelect } => 130 << 16 | 94,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::InputSourceSelect } => 130 << 16 | 96,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::RedVideoBlackLevel } => 130 << 16 | 108,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::GreenVideoBlackLevel } => 130 << 16 | 110,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::BlueVideoBlackLevel } => 130 << 16 | 112,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::AutoSizeCenter } => 130 << 16 | 162,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::PolarityHorizontalSynchronization } => 130 << 16 | 164,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::PolarityVerticalSynchronization } => 130 << 16 | 166,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::SynchronizationType } => 130 << 16 | 168,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::ScreenOrientation } => 130 << 16 | 170,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalFrequency } => 130 << 16 | 172,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalFrequency } => 130 << 16 | 174,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::Settings } => 130 << 16 | 176,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::OnScreenDisplay } => 130 << 16 | 202,
            Usage::VESAVirtualControls { usage: VESAVirtualControls::StereoMode } => 130 << 16 | 212,
            Usage::Power { usage: Power::iName } => 132 << 16 | 1,
            Usage::Power { usage: Power::PresentStatus } => 132 << 16 | 2,
            Usage::Power { usage: Power::ChangedStatus } => 132 << 16 | 3,
            Usage::Power { usage: Power::UPS } => 132 << 16 | 4,
            Usage::Power { usage: Power::PowerSupply } => 132 << 16 | 5,
            Usage::Power { usage: Power::BatterySystem } => 132 << 16 | 16,
            Usage::Power { usage: Power::BatterySystemId } => 132 << 16 | 17,
            Usage::Power { usage: Power::Battery } => 132 << 16 | 18,
            Usage::Power { usage: Power::BatteryId } => 132 << 16 | 19,
            Usage::Power { usage: Power::Charger } => 132 << 16 | 20,
            Usage::Power { usage: Power::ChargerId } => 132 << 16 | 21,
            Usage::Power { usage: Power::PowerConverter } => 132 << 16 | 22,
            Usage::Power { usage: Power::PowerConverterId } => 132 << 16 | 23,
            Usage::Power { usage: Power::OutletSystem } => 132 << 16 | 24,
            Usage::Power { usage: Power::OutletSystemId } => 132 << 16 | 25,
            Usage::Power { usage: Power::Input } => 132 << 16 | 26,
            Usage::Power { usage: Power::InputId } => 132 << 16 | 27,
            Usage::Power { usage: Power::Output } => 132 << 16 | 28,
            Usage::Power { usage: Power::OutputId } => 132 << 16 | 29,
            Usage::Power { usage: Power::Flow } => 132 << 16 | 30,
            Usage::Power { usage: Power::FlowId } => 132 << 16 | 31,
            Usage::Power { usage: Power::Outlet } => 132 << 16 | 32,
            Usage::Power { usage: Power::OutletId } => 132 << 16 | 33,
            Usage::Power { usage: Power::Gang } => 132 << 16 | 34,
            Usage::Power { usage: Power::GangId } => 132 << 16 | 35,
            Usage::Power { usage: Power::PowerSummary } => 132 << 16 | 36,
            Usage::Power { usage: Power::PowerSummaryId } => 132 << 16 | 37,
            Usage::Power { usage: Power::Voltage } => 132 << 16 | 48,
            Usage::Power { usage: Power::Current } => 132 << 16 | 49,
            Usage::Power { usage: Power::Frequency } => 132 << 16 | 50,
            Usage::Power { usage: Power::ApparentPower } => 132 << 16 | 51,
            Usage::Power { usage: Power::ActivePower } => 132 << 16 | 52,
            Usage::Power { usage: Power::PercentLoad } => 132 << 16 | 53,
            Usage::Power { usage: Power::Temperature } => 132 << 16 | 54,
            Usage::Power { usage: Power::Humidity } => 132 << 16 | 55,
            Usage::Power { usage: Power::BadCount } => 132 << 16 | 56,
            Usage::Power { usage: Power::ConfigVoltage } => 132 << 16 | 64,
            Usage::Power { usage: Power::ConfigCurrent } => 132 << 16 | 65,
            Usage::Power { usage: Power::ConfigFrequency } => 132 << 16 | 66,
            Usage::Power { usage: Power::ConfigApparentPower } => 132 << 16 | 67,
            Usage::Power { usage: Power::ConfigActivePower } => 132 << 16 | 68,
            Usage::Power { usage: Power::ConfigPercentLoad } => 132 << 16 | 69,
            Usage::Power { usage: Power::ConfigTemperature } => 132 << 16 | 70,
            Usage::Power { usage: Power::ConfigHumidity } => 132 << 16 | 71,
            Usage::Power { usage: Power::SwitchOnControl } => 132 << 16 | 80,
            Usage::Power { usage: Power::SwitchOffControl } => 132 << 16 | 81,
            Usage::Power { usage: Power::ToggleControl } => 132 << 16 | 82,
            Usage::Power { usage: Power::LowVoltageTransfer } => 132 << 16 | 83,
            Usage::Power { usage: Power::HighVoltageTransfer } => 132 << 16 | 84,
            Usage::Power { usage: Power::DelayBeforeReboot } => 132 << 16 | 85,
            Usage::Power { usage: Power::DelayBeforeStartup } => 132 << 16 | 86,
            Usage::Power { usage: Power::DelayBeforeShutdown } => 132 << 16 | 87,
            Usage::Power { usage: Power::Test } => 132 << 16 | 88,
            Usage::Power { usage: Power::ModuleReset } => 132 << 16 | 89,
            Usage::Power { usage: Power::AudibleAlarmControl } => 132 << 16 | 90,
            Usage::Power { usage: Power::Present } => 132 << 16 | 96,
            Usage::Power { usage: Power::Good } => 132 << 16 | 97,
            Usage::Power { usage: Power::InternalFailure } => 132 << 16 | 98,
            Usage::Power { usage: Power::VoltagOutOfRange } => 132 << 16 | 99,
            Usage::Power { usage: Power::FrequencyOutOfRange } => 132 << 16 | 100,
            Usage::Power { usage: Power::Overload } => 132 << 16 | 101,
            Usage::Power { usage: Power::OverCharged } => 132 << 16 | 102,
            Usage::Power { usage: Power::OverTemperature } => 132 << 16 | 103,
            Usage::Power { usage: Power::ShutdownRequested } => 132 << 16 | 104,
            Usage::Power { usage: Power::ShutdownImminent } => 132 << 16 | 105,
            Usage::Power { usage: Power::SwitchOnOff } => 132 << 16 | 107,
            Usage::Power { usage: Power::Switchable } => 132 << 16 | 108,
            Usage::Power { usage: Power::Used } => 132 << 16 | 109,
            Usage::Power { usage: Power::Boost } => 132 << 16 | 110,
            Usage::Power { usage: Power::Buck } => 132 << 16 | 111,
            Usage::Power { usage: Power::Initialized } => 132 << 16 | 112,
            Usage::Power { usage: Power::Tested } => 132 << 16 | 113,
            Usage::Power { usage: Power::AwaitingPower } => 132 << 16 | 114,
            Usage::Power { usage: Power::CommunicationLost } => 132 << 16 | 115,
            Usage::Power { usage: Power::iManufacturer } => 132 << 16 | 253,
            Usage::Power { usage: Power::iProduct } => 132 << 16 | 254,
            Usage::Power { usage: Power::iSerialNumber } => 132 << 16 | 255,
            Usage::BatterySystem { usage: BatterySystem::SmartBatteryBatteryMode } => 133 << 16 | 1,
            Usage::BatterySystem { usage: BatterySystem::SmartBatteryBatteryStatus } => 133 << 16 | 2,
            Usage::BatterySystem { usage: BatterySystem::SmartBatteryAlarmWarning } => 133 << 16 | 3,
            Usage::BatterySystem { usage: BatterySystem::SmartBatteryChargerMode } => 133 << 16 | 4,
            Usage::BatterySystem { usage: BatterySystem::SmartBatteryChargerStatus } => 133 << 16 | 5,
            Usage::BatterySystem { usage: BatterySystem::SmartBatteryChargerSpecInfo } => 133 << 16 | 6,
            Usage::BatterySystem { usage: BatterySystem::SmartBatterySelectorState } => 133 << 16 | 7,
            Usage::BatterySystem { usage: BatterySystem::SmartBatterySelectorPresets } => 133 << 16 | 8,
            Usage::BatterySystem { usage: BatterySystem::SmartBatterySelectorInfo } => 133 << 16 | 9,
            Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction1 } => 133 << 16 | 16,
            Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction2 } => 133 << 16 | 17,
            Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction3 } => 133 << 16 | 18,
            Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction4 } => 133 << 16 | 19,
            Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction5 } => 133 << 16 | 20,
            Usage::BatterySystem { usage: BatterySystem::ConnectionToSMBus } => 133 << 16 | 21,
            Usage::BatterySystem { usage: BatterySystem::OutputConnection } => 133 << 16 | 22,
            Usage::BatterySystem { usage: BatterySystem::ChargerConnection } => 133 << 16 | 23,
            Usage::BatterySystem { usage: BatterySystem::BatteryInsertion } => 133 << 16 | 24,
            Usage::BatterySystem { usage: BatterySystem::UseNext } => 133 << 16 | 25,
            Usage::BatterySystem { usage: BatterySystem::OKToUse } => 133 << 16 | 26,
            Usage::BatterySystem { usage: BatterySystem::BatterySupported } => 133 << 16 | 27,
            Usage::BatterySystem { usage: BatterySystem::SelectorRevision } => 133 << 16 | 28,
            Usage::BatterySystem { usage: BatterySystem::ChargingIndicator } => 133 << 16 | 29,
            Usage::BatterySystem { usage: BatterySystem::ManufacturerAccess } => 133 << 16 | 40,
            Usage::BatterySystem { usage: BatterySystem::RemainingCapacityLimit } => 133 << 16 | 41,
            Usage::BatterySystem { usage: BatterySystem::RemainingTimeLimit } => 133 << 16 | 42,
            Usage::BatterySystem { usage: BatterySystem::AtRate } => 133 << 16 | 43,
            Usage::BatterySystem { usage: BatterySystem::CapacityMode } => 133 << 16 | 44,
            Usage::BatterySystem { usage: BatterySystem::BroadcastToCharger } => 133 << 16 | 45,
            Usage::BatterySystem { usage: BatterySystem::PrimaryBattery } => 133 << 16 | 46,
            Usage::BatterySystem { usage: BatterySystem::ChargeController } => 133 << 16 | 47,
            Usage::BatterySystem { usage: BatterySystem::TerminateCharge } => 133 << 16 | 64,
            Usage::BatterySystem { usage: BatterySystem::TerminateDischarge } => 133 << 16 | 65,
            Usage::BatterySystem { usage: BatterySystem::BelowRemainingCapacityLimit } => 133 << 16 | 66,
            Usage::BatterySystem { usage: BatterySystem::RemainingTimeLimitExpired } => 133 << 16 | 67,
            Usage::BatterySystem { usage: BatterySystem::Charging } => 133 << 16 | 68,
            Usage::BatterySystem { usage: BatterySystem::Discharging } => 133 << 16 | 69,
            Usage::BatterySystem { usage: BatterySystem::FullyCharged } => 133 << 16 | 70,
            Usage::BatterySystem { usage: BatterySystem::FullyDischarged } => 133 << 16 | 71,
            Usage::BatterySystem { usage: BatterySystem::ConditioningFlag } => 133 << 16 | 72,
            Usage::BatterySystem { usage: BatterySystem::AtRateOK } => 133 << 16 | 73,
            Usage::BatterySystem { usage: BatterySystem::SmartBatteryErrorCode } => 133 << 16 | 74,
            Usage::BatterySystem { usage: BatterySystem::NeedReplacement } => 133 << 16 | 75,
            Usage::BatterySystem { usage: BatterySystem::AtRateTimeToFull } => 133 << 16 | 96,
            Usage::BatterySystem { usage: BatterySystem::AtRateTimeToEmpty } => 133 << 16 | 97,
            Usage::BatterySystem { usage: BatterySystem::AverageCurrent } => 133 << 16 | 98,
            Usage::BatterySystem { usage: BatterySystem::MaxError } => 133 << 16 | 99,
            Usage::BatterySystem { usage: BatterySystem::RelativeStateOfCharge } => 133 << 16 | 100,
            Usage::BatterySystem { usage: BatterySystem::AbsoluteStateOfCharge } => 133 << 16 | 101,
            Usage::BatterySystem { usage: BatterySystem::RemainingCapacity } => 133 << 16 | 102,
            Usage::BatterySystem { usage: BatterySystem::FullChargeCapacity } => 133 << 16 | 103,
            Usage::BatterySystem { usage: BatterySystem::RunTimeToEmpty } => 133 << 16 | 104,
            Usage::BatterySystem { usage: BatterySystem::AverageTimeToEmpty } => 133 << 16 | 105,
            Usage::BatterySystem { usage: BatterySystem::AverageTimeToFull } => 133 << 16 | 106,
            Usage::BatterySystem { usage: BatterySystem::CycleCount } => 133 << 16 | 107,
            Usage::BatterySystem { usage: BatterySystem::BatteryPackModelLevel } => 133 << 16 | 128,
            Usage::BatterySystem { usage: BatterySystem::InternalChargeController } => 133 << 16 | 129,
            Usage::BatterySystem { usage: BatterySystem::PrimaryBatterySupport } => 133 << 16 | 130,
            Usage::BatterySystem { usage: BatterySystem::DesignCapacity } => 133 << 16 | 131,
            Usage::BatterySystem { usage: BatterySystem::SpecificationInfo } => 133 << 16 | 132,
            Usage::BatterySystem { usage: BatterySystem::ManufactureDate } => 133 << 16 | 133,
            Usage::BatterySystem { usage: BatterySystem::SerialNumber } => 133 << 16 | 134,
            Usage::BatterySystem { usage: BatterySystem::iManufacturerName } => 133 << 16 | 135,
            Usage::BatterySystem { usage: BatterySystem::iDeviceName } => 133 << 16 | 136,
            Usage::BatterySystem { usage: BatterySystem::iDeviceChemistry } => 133 << 16 | 137,
            Usage::BatterySystem { usage: BatterySystem::ManufacturerData } => 133 << 16 | 138,
            Usage::BatterySystem { usage: BatterySystem::Rechargable } => 133 << 16 | 139,
            Usage::BatterySystem { usage: BatterySystem::WarningCapacityLimit } => 133 << 16 | 140,
            Usage::BatterySystem { usage: BatterySystem::CapacityGranularity1 } => 133 << 16 | 141,
            Usage::BatterySystem { usage: BatterySystem::CapacityGranularity2 } => 133 << 16 | 142,
            Usage::BatterySystem { usage: BatterySystem::iOEMInformation } => 133 << 16 | 143,
            Usage::BatterySystem { usage: BatterySystem::InhibitCharge } => 133 << 16 | 192,
            Usage::BatterySystem { usage: BatterySystem::EnablePolling } => 133 << 16 | 193,
            Usage::BatterySystem { usage: BatterySystem::ResetToZero } => 133 << 16 | 194,
            Usage::BatterySystem { usage: BatterySystem::ACPresent } => 133 << 16 | 208,
            Usage::BatterySystem { usage: BatterySystem::BatteryPresent } => 133 << 16 | 209,
            Usage::BatterySystem { usage: BatterySystem::PowerFail } => 133 << 16 | 210,
            Usage::BatterySystem { usage: BatterySystem::AlarmInhibited } => 133 << 16 | 211,
            Usage::BatterySystem { usage: BatterySystem::ThermistorUnderRange } => 133 << 16 | 212,
            Usage::BatterySystem { usage: BatterySystem::ThermistorHot } => 133 << 16 | 213,
            Usage::BatterySystem { usage: BatterySystem::ThermistorCold } => 133 << 16 | 214,
            Usage::BatterySystem { usage: BatterySystem::ThermistorOverRange } => 133 << 16 | 215,
            Usage::BatterySystem { usage: BatterySystem::VoltageOutOfRange } => 133 << 16 | 216,
            Usage::BatterySystem { usage: BatterySystem::CurrentOutOfRange } => 133 << 16 | 217,
            Usage::BatterySystem { usage: BatterySystem::CurrentNotRegulated } => 133 << 16 | 218,
            Usage::BatterySystem { usage: BatterySystem::VoltageNotRegulated } => 133 << 16 | 219,
            Usage::BatterySystem { usage: BatterySystem::MasterMode } => 133 << 16 | 220,
            Usage::BatterySystem { usage: BatterySystem::ChargerSelectorSupport } => 133 << 16 | 240,
            Usage::BatterySystem { usage: BatterySystem::ChargerSpec } => 133 << 16 | 241,
            Usage::BatterySystem { usage: BatterySystem::Level2 } => 133 << 16 | 242,
            Usage::BatterySystem { usage: BatterySystem::Level3 } => 133 << 16 | 243,
            Usage::BarcodeScanner { usage: BarcodeScanner::BarcodeBadgeReader } => 140 << 16 | 1,
            Usage::BarcodeScanner { usage: BarcodeScanner::BarcodeScanner } => 140 << 16 | 2,
            Usage::BarcodeScanner { usage: BarcodeScanner::DumbBarCodeScanner } => 140 << 16 | 3,
            Usage::BarcodeScanner { usage: BarcodeScanner::CordlessScannerBase } => 140 << 16 | 4,
            Usage::BarcodeScanner { usage: BarcodeScanner::BarCodeScannerCradle } => 140 << 16 | 5,
            Usage::BarcodeScanner { usage: BarcodeScanner::AttributeReport } => 140 << 16 | 16,
            Usage::BarcodeScanner { usage: BarcodeScanner::SettingsReport } => 140 << 16 | 17,
            Usage::BarcodeScanner { usage: BarcodeScanner::ScannedDataReport } => 140 << 16 | 18,
            Usage::BarcodeScanner { usage: BarcodeScanner::RawScannedDataReport } => 140 << 16 | 19,
            Usage::BarcodeScanner { usage: BarcodeScanner::TriggerReport } => 140 << 16 | 20,
            Usage::BarcodeScanner { usage: BarcodeScanner::StatusReport } => 140 << 16 | 21,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCEANControlReport } => 140 << 16 | 22,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN23LabelControlReport } => 140 << 16 | 23,
            Usage::BarcodeScanner { usage: BarcodeScanner::Code39ControlReport } => 140 << 16 | 24,
            Usage::BarcodeScanner { usage: BarcodeScanner::Interleaved2of5ControlReport } => 140 << 16 | 25,
            Usage::BarcodeScanner { usage: BarcodeScanner::Standard2of5ControlReport } => 140 << 16 | 26,
            Usage::BarcodeScanner { usage: BarcodeScanner::MSIPlesseyControlReport } => 140 << 16 | 27,
            Usage::BarcodeScanner { usage: BarcodeScanner::CodabarControlReport } => 140 << 16 | 28,
            Usage::BarcodeScanner { usage: BarcodeScanner::Code128ControlReport } => 140 << 16 | 29,
            Usage::BarcodeScanner { usage: BarcodeScanner::Misc1DControlReport } => 140 << 16 | 30,
            Usage::BarcodeScanner { usage: BarcodeScanner::TwoDControlReport } => 140 << 16 | 31,
            Usage::BarcodeScanner { usage: BarcodeScanner::AimingPointerMode } => 140 << 16 | 48,
            Usage::BarcodeScanner { usage: BarcodeScanner::BarCodePresentSensor } => 140 << 16 | 49,
            Usage::BarcodeScanner { usage: BarcodeScanner::Class1ALaser } => 140 << 16 | 50,
            Usage::BarcodeScanner { usage: BarcodeScanner::Class2Laser } => 140 << 16 | 51,
            Usage::BarcodeScanner { usage: BarcodeScanner::HeaterPresent } => 140 << 16 | 52,
            Usage::BarcodeScanner { usage: BarcodeScanner::ContactScanner } => 140 << 16 | 53,
            Usage::BarcodeScanner { usage: BarcodeScanner::ElectronicArticleSurveillanceNotification } => 140 << 16 | 54,
            Usage::BarcodeScanner { usage: BarcodeScanner::ConstantElectronicArticleSurveillance } => 140 << 16 | 55,
            Usage::BarcodeScanner { usage: BarcodeScanner::ErrorIndication } => 140 << 16 | 56,
            Usage::BarcodeScanner { usage: BarcodeScanner::FixedBeeper } => 140 << 16 | 57,
            Usage::BarcodeScanner { usage: BarcodeScanner::GoodDecodeIndication } => 140 << 16 | 58,
            Usage::BarcodeScanner { usage: BarcodeScanner::HandsFreeScanning } => 140 << 16 | 59,
            Usage::BarcodeScanner { usage: BarcodeScanner::IntrinsicallySafe } => 140 << 16 | 60,
            Usage::BarcodeScanner { usage: BarcodeScanner::KlasseEinsLaser } => 140 << 16 | 61,
            Usage::BarcodeScanner { usage: BarcodeScanner::LongRangeScanner } => 140 << 16 | 62,
            Usage::BarcodeScanner { usage: BarcodeScanner::MirrorSpeedControl } => 140 << 16 | 63,
            Usage::BarcodeScanner { usage: BarcodeScanner::NotOnFileIndication } => 140 << 16 | 64,
            Usage::BarcodeScanner { usage: BarcodeScanner::ProgrammableBeeper } => 140 << 16 | 65,
            Usage::BarcodeScanner { usage: BarcodeScanner::Triggerless } => 140 << 16 | 66,
            Usage::BarcodeScanner { usage: BarcodeScanner::Wand } => 140 << 16 | 67,
            Usage::BarcodeScanner { usage: BarcodeScanner::WaterResistant } => 140 << 16 | 68,
            Usage::BarcodeScanner { usage: BarcodeScanner::MultiRangeScanner } => 140 << 16 | 69,
            Usage::BarcodeScanner { usage: BarcodeScanner::ProximitySensor } => 140 << 16 | 70,
            Usage::BarcodeScanner { usage: BarcodeScanner::FragmentDecoding } => 140 << 16 | 77,
            Usage::BarcodeScanner { usage: BarcodeScanner::ScannerReadConfidence } => 140 << 16 | 78,
            Usage::BarcodeScanner { usage: BarcodeScanner::DataPrefix } => 140 << 16 | 79,
            Usage::BarcodeScanner { usage: BarcodeScanner::PrefixAIMI } => 140 << 16 | 80,
            Usage::BarcodeScanner { usage: BarcodeScanner::PrefixNone } => 140 << 16 | 81,
            Usage::BarcodeScanner { usage: BarcodeScanner::PrefixProprietary } => 140 << 16 | 82,
            Usage::BarcodeScanner { usage: BarcodeScanner::ActiveTime } => 140 << 16 | 85,
            Usage::BarcodeScanner { usage: BarcodeScanner::AimingLaserPattern } => 140 << 16 | 86,
            Usage::BarcodeScanner { usage: BarcodeScanner::BarCodePresent } => 140 << 16 | 87,
            Usage::BarcodeScanner { usage: BarcodeScanner::BeeperState } => 140 << 16 | 88,
            Usage::BarcodeScanner { usage: BarcodeScanner::LaserOnTime } => 140 << 16 | 89,
            Usage::BarcodeScanner { usage: BarcodeScanner::LaserState } => 140 << 16 | 90,
            Usage::BarcodeScanner { usage: BarcodeScanner::LockoutTime } => 140 << 16 | 91,
            Usage::BarcodeScanner { usage: BarcodeScanner::MotorState } => 140 << 16 | 92,
            Usage::BarcodeScanner { usage: BarcodeScanner::MotorTimeout } => 140 << 16 | 93,
            Usage::BarcodeScanner { usage: BarcodeScanner::PowerOnResetScanner } => 140 << 16 | 94,
            Usage::BarcodeScanner { usage: BarcodeScanner::PreventReadofBarcodes } => 140 << 16 | 95,
            Usage::BarcodeScanner { usage: BarcodeScanner::InitiateBarcodeRead } => 140 << 16 | 96,
            Usage::BarcodeScanner { usage: BarcodeScanner::TriggerState } => 140 << 16 | 97,
            Usage::BarcodeScanner { usage: BarcodeScanner::TriggerMode } => 140 << 16 | 98,
            Usage::BarcodeScanner { usage: BarcodeScanner::TriggerModeBlinkingLaserOn } => 140 << 16 | 99,
            Usage::BarcodeScanner { usage: BarcodeScanner::TriggerModeContinuousLaserOn } => 140 << 16 | 100,
            Usage::BarcodeScanner { usage: BarcodeScanner::TriggerModeLaseronwhilePulled } => 140 << 16 | 101,
            Usage::BarcodeScanner { usage: BarcodeScanner::TriggerModeLaserstaysonafterrelease } => 140 << 16 | 102,
            Usage::BarcodeScanner { usage: BarcodeScanner::CommitParameterstoNVM } => 140 << 16 | 109,
            Usage::BarcodeScanner { usage: BarcodeScanner::ParameterScanning } => 140 << 16 | 110,
            Usage::BarcodeScanner { usage: BarcodeScanner::ParametersChanged } => 140 << 16 | 111,
            Usage::BarcodeScanner { usage: BarcodeScanner::Setparameterdefaultvalues } => 140 << 16 | 112,
            Usage::BarcodeScanner { usage: BarcodeScanner::ScannerInCradle } => 140 << 16 | 117,
            Usage::BarcodeScanner { usage: BarcodeScanner::ScannerInRange } => 140 << 16 | 118,
            Usage::BarcodeScanner { usage: BarcodeScanner::AimDuration } => 140 << 16 | 122,
            Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadLampDuration } => 140 << 16 | 123,
            Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadLampIntensity } => 140 << 16 | 124,
            Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadLED } => 140 << 16 | 125,
            Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadToneFrequency } => 140 << 16 | 126,
            Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadToneLength } => 140 << 16 | 127,
            Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadToneVolume } => 140 << 16 | 128,
            Usage::BarcodeScanner { usage: BarcodeScanner::NoReadMessage } => 140 << 16 | 130,
            Usage::BarcodeScanner { usage: BarcodeScanner::NotonFileVolume } => 140 << 16 | 131,
            Usage::BarcodeScanner { usage: BarcodeScanner::PowerupBeep } => 140 << 16 | 132,
            Usage::BarcodeScanner { usage: BarcodeScanner::SoundErrorBeep } => 140 << 16 | 133,
            Usage::BarcodeScanner { usage: BarcodeScanner::SoundGoodReadBeep } => 140 << 16 | 134,
            Usage::BarcodeScanner { usage: BarcodeScanner::SoundNotOnFileBeep } => 140 << 16 | 135,
            Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadWhentoWrite } => 140 << 16 | 136,
            Usage::BarcodeScanner { usage: BarcodeScanner::GRWTIAfterDecode } => 140 << 16 | 137,
            Usage::BarcodeScanner { usage: BarcodeScanner::GRWTIBeepLampaftertransmit } => 140 << 16 | 138,
            Usage::BarcodeScanner { usage: BarcodeScanner::GRWTINoBeepLampuseatall } => 140 << 16 | 139,
            Usage::BarcodeScanner { usage: BarcodeScanner::BooklandEAN } => 140 << 16 | 145,
            Usage::BarcodeScanner { usage: BarcodeScanner::ConvertEAN8to13Type } => 140 << 16 | 146,
            Usage::BarcodeScanner { usage: BarcodeScanner::ConvertUPCAtoEAN13 } => 140 << 16 | 147,
            Usage::BarcodeScanner { usage: BarcodeScanner::ConvertUPCEtoA } => 140 << 16 | 148,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN13 } => 140 << 16 | 149,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN8 } => 140 << 16 | 150,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN99128Mandatory } => 140 << 16 | 151,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN99P5128Optional } => 140 << 16 | 152,
            Usage::BarcodeScanner { usage: BarcodeScanner::EnableEANTwoLabel } => 140 << 16 | 153,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCEAN } => 140 << 16 | 154,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCEANCouponCode } => 140 << 16 | 155,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCEANPeriodicals } => 140 << 16 | 156,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCA } => 140 << 16 | 157,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCAwith128Mandatory } => 140 << 16 | 158,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCAwith128Optional } => 140 << 16 | 159,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCAwithP5Optional } => 140 << 16 | 160,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCE } => 140 << 16 | 161,
            Usage::BarcodeScanner { usage: BarcodeScanner::UPCE1 } => 140 << 16 | 162,
            Usage::BarcodeScanner { usage: BarcodeScanner::Periodical } => 140 << 16 | 169,
            Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalAutoDiscriminatePlus2 } => 140 << 16 | 170,
            Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalOnlyDecodewithPlus2 } => 140 << 16 | 171,
            Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalIgnorePlus2 } => 140 << 16 | 172,
            Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalAutoDiscriminatePlus5 } => 140 << 16 | 173,
            Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalOnlyDecodewithPlus5 } => 140 << 16 | 174,
            Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalIgnorePlus5 } => 140 << 16 | 175,
            Usage::BarcodeScanner { usage: BarcodeScanner::Check } => 140 << 16 | 176,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDisablePrice } => 140 << 16 | 177,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckEnable4digitPrice } => 140 << 16 | 178,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckEnable5digitPrice } => 140 << 16 | 179,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckEnableEuropean4digitPrice } => 140 << 16 | 180,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckEnableEuropean5digitPrice } => 140 << 16 | 181,
            Usage::BarcodeScanner { usage: BarcodeScanner::EANTwoLabel } => 140 << 16 | 183,
            Usage::BarcodeScanner { usage: BarcodeScanner::EANThreeLabel } => 140 << 16 | 184,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN8FlagDigit1 } => 140 << 16 | 185,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN8FlagDigit2 } => 140 << 16 | 186,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN8FlagDigit3 } => 140 << 16 | 187,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN13FlagDigit1 } => 140 << 16 | 188,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN13FlagDigit2 } => 140 << 16 | 189,
            Usage::BarcodeScanner { usage: BarcodeScanner::EAN13FlagDigit3 } => 140 << 16 | 190,
            Usage::BarcodeScanner { usage: BarcodeScanner::AddEAN23LabelDefinition } => 140 << 16 | 191,
            Usage::BarcodeScanner { usage: BarcodeScanner::ClearallEAN23LabelDefinitions } => 140 << 16 | 192,
            Usage::BarcodeScanner { usage: BarcodeScanner::Codabar } => 140 << 16 | 195,
            Usage::BarcodeScanner { usage: BarcodeScanner::Code128 } => 140 << 16 | 196,
            Usage::BarcodeScanner { usage: BarcodeScanner::Code39 } => 140 << 16 | 199,
            Usage::BarcodeScanner { usage: BarcodeScanner::Code93 } => 140 << 16 | 200,
            Usage::BarcodeScanner { usage: BarcodeScanner::FullASCIIConversion } => 140 << 16 | 201,
            Usage::BarcodeScanner { usage: BarcodeScanner::Interleaved2of5 } => 140 << 16 | 202,
            Usage::BarcodeScanner { usage: BarcodeScanner::ItalianPharmacyCode } => 140 << 16 | 203,
            Usage::BarcodeScanner { usage: BarcodeScanner::MSIPlessey } => 140 << 16 | 204,
            Usage::BarcodeScanner { usage: BarcodeScanner::Standard2of5IATA } => 140 << 16 | 205,
            Usage::BarcodeScanner { usage: BarcodeScanner::Standard2of5 } => 140 << 16 | 206,
            Usage::BarcodeScanner { usage: BarcodeScanner::TransmitStartStop } => 140 << 16 | 211,
            Usage::BarcodeScanner { usage: BarcodeScanner::TriOptic } => 140 << 16 | 212,
            Usage::BarcodeScanner { usage: BarcodeScanner::UCCEAN128 } => 140 << 16 | 213,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigit } => 140 << 16 | 214,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitDisable } => 140 << 16 | 215,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableInterleaved2of5OPCC } => 140 << 16 | 216,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableInterleaved2of5USS } => 140 << 16 | 217,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableStandard2of5OPCC } => 140 << 16 | 218,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableStandard2of5USS } => 140 << 16 | 219,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableOneMSIPlessey } => 140 << 16 | 220,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableTwoMSIPlessey } => 140 << 16 | 221,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitCodabarEnable } => 140 << 16 | 222,
            Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitCode39Enable } => 140 << 16 | 223,
            Usage::BarcodeScanner { usage: BarcodeScanner::TransmitCheckDigit } => 140 << 16 | 240,
            Usage::BarcodeScanner { usage: BarcodeScanner::DisableCheckDigitTransmit } => 140 << 16 | 241,
            Usage::BarcodeScanner { usage: BarcodeScanner::EnableCheckDigitTransmit } => 140 << 16 | 242,
            Usage::BarcodeScanner { usage: BarcodeScanner::SymbologyIdentifier1 } => 140 << 16 | 251,
            Usage::BarcodeScanner { usage: BarcodeScanner::SymbologyIdentifier2 } => 140 << 16 | 252,
            Usage::BarcodeScanner { usage: BarcodeScanner::SymbologyIdentifier3 } => 140 << 16 | 253,
            Usage::BarcodeScanner { usage: BarcodeScanner::DecodedData } => 140 << 16 | 254,
            Usage::BarcodeScanner { usage: BarcodeScanner::DecodeDataContinued } => 140 << 16 | 255,
            Usage::BarcodeScanner { usage: BarcodeScanner::BarSpaceData } => 140 << 16 | 256,
            Usage::BarcodeScanner { usage: BarcodeScanner::ScannerDataAccuracy } => 140 << 16 | 257,
            Usage::BarcodeScanner { usage: BarcodeScanner::RawDataPolarity } => 140 << 16 | 258,
            Usage::BarcodeScanner { usage: BarcodeScanner::PolarityInvertedBarCode } => 140 << 16 | 259,
            Usage::BarcodeScanner { usage: BarcodeScanner::PolarityNormalBarCode } => 140 << 16 | 260,
            Usage::BarcodeScanner { usage: BarcodeScanner::MinimumLengthtoDecode } => 140 << 16 | 262,
            Usage::BarcodeScanner { usage: BarcodeScanner::MaximumLengthtoDecode } => 140 << 16 | 263,
            Usage::BarcodeScanner { usage: BarcodeScanner::DiscreteLengthtoDecode1 } => 140 << 16 | 264,
            Usage::BarcodeScanner { usage: BarcodeScanner::DiscreteLengthtoDecode2 } => 140 << 16 | 265,
            Usage::BarcodeScanner { usage: BarcodeScanner::DataLengthMethod } => 140 << 16 | 266,
            Usage::BarcodeScanner { usage: BarcodeScanner::DLMethodReadany } => 140 << 16 | 267,
            Usage::BarcodeScanner { usage: BarcodeScanner::DLMethodCheckinRange } => 140 << 16 | 268,
            Usage::BarcodeScanner { usage: BarcodeScanner::DLMethodCheckforDiscrete } => 140 << 16 | 269,
            Usage::BarcodeScanner { usage: BarcodeScanner::AztecCode } => 140 << 16 | 272,
            Usage::BarcodeScanner { usage: BarcodeScanner::BC412 } => 140 << 16 | 273,
            Usage::BarcodeScanner { usage: BarcodeScanner::ChannelCode } => 140 << 16 | 274,
            Usage::BarcodeScanner { usage: BarcodeScanner::Code16 } => 140 << 16 | 275,
            Usage::BarcodeScanner { usage: BarcodeScanner::Code32 } => 140 << 16 | 276,
            Usage::BarcodeScanner { usage: BarcodeScanner::Code49 } => 140 << 16 | 277,
            Usage::BarcodeScanner { usage: BarcodeScanner::CodeOne } => 140 << 16 | 278,
            Usage::BarcodeScanner { usage: BarcodeScanner::Colorcode } => 140 << 16 | 279,
            Usage::BarcodeScanner { usage: BarcodeScanner::DataMatrix } => 140 << 16 | 280,
            Usage::BarcodeScanner { usage: BarcodeScanner::MaxiCode } => 140 << 16 | 281,
            Usage::BarcodeScanner { usage: BarcodeScanner::MicroPDF } => 140 << 16 | 282,
            Usage::BarcodeScanner { usage: BarcodeScanner::PDF417 } => 140 << 16 | 283,
            Usage::BarcodeScanner { usage: BarcodeScanner::PosiCode } => 140 << 16 | 284,
            Usage::BarcodeScanner { usage: BarcodeScanner::QRCode } => 140 << 16 | 285,
            Usage::BarcodeScanner { usage: BarcodeScanner::SuperCode } => 140 << 16 | 286,
            Usage::BarcodeScanner { usage: BarcodeScanner::UltraCode } => 140 << 16 | 287,
            Usage::BarcodeScanner { usage: BarcodeScanner::USD5SlugCode } => 140 << 16 | 288,
            Usage::BarcodeScanner { usage: BarcodeScanner::VeriCode } => 140 << 16 | 289,
            Usage::Scales { usage: Scales::Scales } => 141 << 16 | 1,
            Usage::Scales { usage: Scales::ScaleDevice } => 141 << 16 | 32,
            Usage::Scales { usage: Scales::ScaleClass } => 141 << 16 | 33,
            Usage::Scales { usage: Scales::ScaleClassIMetric } => 141 << 16 | 34,
            Usage::Scales { usage: Scales::ScaleClassIIMetric } => 141 << 16 | 35,
            Usage::Scales { usage: Scales::ScaleClassIIIMetric } => 141 << 16 | 36,
            Usage::Scales { usage: Scales::ScaleClassIIILMetric } => 141 << 16 | 37,
            Usage::Scales { usage: Scales::ScaleClassIVMetric } => 141 << 16 | 38,
            Usage::Scales { usage: Scales::ScaleClassIIIEnglish } => 141 << 16 | 39,
            Usage::Scales { usage: Scales::ScaleClassIIILEnglish } => 141 << 16 | 40,
            Usage::Scales { usage: Scales::ScaleClassIVEnglish } => 141 << 16 | 41,
            Usage::Scales { usage: Scales::ScaleClassGeneric } => 141 << 16 | 42,
            Usage::Scales { usage: Scales::ScaleAttributeReport } => 141 << 16 | 48,
            Usage::Scales { usage: Scales::ScaleControlReport } => 141 << 16 | 49,
            Usage::Scales { usage: Scales::ScaleDataReport } => 141 << 16 | 50,
            Usage::Scales { usage: Scales::ScaleStatusReport } => 141 << 16 | 51,
            Usage::Scales { usage: Scales::ScaleWeightLimitReport } => 141 << 16 | 52,
            Usage::Scales { usage: Scales::ScaleStatisticsReport } => 141 << 16 | 53,
            Usage::Scales { usage: Scales::DataWeight } => 141 << 16 | 64,
            Usage::Scales { usage: Scales::DataScaling } => 141 << 16 | 65,
            Usage::Scales { usage: Scales::WeightUnit } => 141 << 16 | 80,
            Usage::Scales { usage: Scales::WeightUnitMilligram } => 141 << 16 | 81,
            Usage::Scales { usage: Scales::WeightUnitGram } => 141 << 16 | 82,
            Usage::Scales { usage: Scales::WeightUnitKilogram } => 141 << 16 | 83,
            Usage::Scales { usage: Scales::WeightUnitCarats } => 141 << 16 | 84,
            Usage::Scales { usage: Scales::WeightUnitTaels } => 141 << 16 | 85,
            Usage::Scales { usage: Scales::WeightUnitGrains } => 141 << 16 | 86,
            Usage::Scales { usage: Scales::WeightUnitPennyweights } => 141 << 16 | 87,
            Usage::Scales { usage: Scales::WeightUnitMetricTon } => 141 << 16 | 88,
            Usage::Scales { usage: Scales::WeightUnitAvoirTon } => 141 << 16 | 89,
            Usage::Scales { usage: Scales::WeightUnitTroyOunce } => 141 << 16 | 90,
            Usage::Scales { usage: Scales::WeightUnitOunce } => 141 << 16 | 91,
            Usage::Scales { usage: Scales::WeightUnitPound } => 141 << 16 | 92,
            Usage::Scales { usage: Scales::CalibrationCount } => 141 << 16 | 96,
            Usage::Scales { usage: Scales::ReZeroCount } => 141 << 16 | 97,
            Usage::Scales { usage: Scales::ScaleStatus } => 141 << 16 | 112,
            Usage::Scales { usage: Scales::ScaleStatusFault } => 141 << 16 | 113,
            Usage::Scales { usage: Scales::ScaleStatusStableatCenterofZero } => 141 << 16 | 114,
            Usage::Scales { usage: Scales::ScaleStatusInMotion } => 141 << 16 | 115,
            Usage::Scales { usage: Scales::ScaleStatusWeightStable } => 141 << 16 | 116,
            Usage::Scales { usage: Scales::ScaleStatusUnderZero } => 141 << 16 | 117,
            Usage::Scales { usage: Scales::ScaleStatusOverWeightLimit } => 141 << 16 | 118,
            Usage::Scales { usage: Scales::ScaleStatusRequiresCalibration } => 141 << 16 | 119,
            Usage::Scales { usage: Scales::ScaleStatusRequiresRezeroing } => 141 << 16 | 120,
            Usage::Scales { usage: Scales::ZeroScale } => 141 << 16 | 128,
            Usage::Scales { usage: Scales::EnforcedZeroReturn } => 141 << 16 | 129,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::MSRDeviceReadOnly } => 142 << 16 | 1,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::Track1Length } => 142 << 16 | 17,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::Track2Length } => 142 << 16 | 18,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::Track3Length } => 142 << 16 | 19,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::TrackJISLength } => 142 << 16 | 20,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::TrackData } => 142 << 16 | 32,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::Track1Data } => 142 << 16 | 33,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::Track2Data } => 142 << 16 | 34,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::Track3Data } => 142 << 16 | 35,
            Usage::MagneticStripeReader { usage: MagneticStripeReader::TrackJISData } => 142 << 16 | 36,
            Usage::CameraControl { usage: CameraControl::CameraAutofocus } => 144 << 16 | 32,
            Usage::CameraControl { usage: CameraControl::CameraShutter } => 144 << 16 | 33,
            Usage::Arcade { usage: Arcade::GeneralPurposeIOCard } => 145 << 16 | 1,
            Usage::Arcade { usage: Arcade::CoinDoor } => 145 << 16 | 2,
            Usage::Arcade { usage: Arcade::WatchdogTimer } => 145 << 16 | 3,
            Usage::Arcade { usage: Arcade::GeneralPurposeAnalogInputState } => 145 << 16 | 48,
            Usage::Arcade { usage: Arcade::GeneralPurposeDigitalInputState } => 145 << 16 | 49,
            Usage::Arcade { usage: Arcade::GeneralPurposeOpticalInputState } => 145 << 16 | 50,
            Usage::Arcade { usage: Arcade::GeneralPurposeDigitalOutputState } => 145 << 16 | 51,
            Usage::Arcade { usage: Arcade::NumberofCoinDoors } => 145 << 16 | 52,
            Usage::Arcade { usage: Arcade::CoinDrawerDropCount } => 145 << 16 | 53,
            Usage::Arcade { usage: Arcade::CoinDrawerStart } => 145 << 16 | 54,
            Usage::Arcade { usage: Arcade::CoinDrawerService } => 145 << 16 | 55,
            Usage::Arcade { usage: Arcade::CoinDrawerTilt } => 145 << 16 | 56,
            Usage::Arcade { usage: Arcade::CoinDoorTest } => 145 << 16 | 57,
            Usage::Arcade { usage: Arcade::CoinDoorLockout } => 145 << 16 | 64,
            Usage::Arcade { usage: Arcade::WatchdogTimeout } => 145 << 16 | 65,
            Usage::Arcade { usage: Arcade::WatchdogAction } => 145 << 16 | 66,
            Usage::Arcade { usage: Arcade::WatchdogReboot } => 145 << 16 | 67,
            Usage::Arcade { usage: Arcade::WatchdogRestart } => 145 << 16 | 68,
            Usage::Arcade { usage: Arcade::AlarmInput } => 145 << 16 | 69,
            Usage::Arcade { usage: Arcade::CoinDoorCounter } => 145 << 16 | 70,
            Usage::Arcade { usage: Arcade::IODirectionMapping } => 145 << 16 | 71,
            Usage::Arcade { usage: Arcade::SetIODirectionMapping } => 145 << 16 | 72,
            Usage::Arcade { usage: Arcade::ExtendedOpticalInputState } => 145 << 16 | 73,
            Usage::Arcade { usage: Arcade::PinPadInputState } => 145 << 16 | 74,
            Usage::Arcade { usage: Arcade::PinPadStatus } => 145 << 16 | 75,
            Usage::Arcade { usage: Arcade::PinPadOutput } => 145 << 16 | 76,
            Usage::Arcade { usage: Arcade::PinPadCommand } => 145 << 16 | 77,
            Usage::FIDOAlliance { usage: FIDOAlliance::U2FAuthenticatorDevice } => 61904 << 16 | 1,
            Usage::FIDOAlliance { usage: FIDOAlliance::InputReportData } => 61904 << 16 | 32,
            Usage::FIDOAlliance { usage: FIDOAlliance::OutputReportData } => 61904 << 16 | 33,
            Usage::VendorDefinedPage { vendor_page, usage: VendorDefinedPage::Undefined } => (u16::from(vendor_page) as u32) << 16,
            Usage::VendorDefinedPage { vendor_page, usage: VendorDefinedPage::VendorUsage { usage_id } } => (u16::from(vendor_page) as u32) << 16 | *usage_id as u32,
            _ => panic!("Unhandled usage {usage:?}"),
        }
    }
}

impl TryFrom<u32> for Usage {
    type Error = HutError;

    fn try_from(up: u32) -> Result<Usage> {
        match (up >> 16, up & 0xFFFF) {
            (1,  1) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Pointer }),
            (1,  2) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Mouse }),
            (1,  4) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Joystick }),
            (1,  5) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Gamepad }),
            (1,  6) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Keyboard }),
            (1,  7) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Keypad }),
            (1,  8) => Ok(Usage::GenericDesktop { usage: GenericDesktop::MultiaxisController }),
            (1,  9) => Ok(Usage::GenericDesktop { usage: GenericDesktop::TabletPCSystemControls }),
            (1,  10) => Ok(Usage::GenericDesktop { usage: GenericDesktop::WaterCoolingDevice }),
            (1,  11) => Ok(Usage::GenericDesktop { usage: GenericDesktop::ComputerChassisDevice }),
            (1,  12) => Ok(Usage::GenericDesktop { usage: GenericDesktop::WirelessRadioControls }),
            (1,  13) => Ok(Usage::GenericDesktop { usage: GenericDesktop::PortableDeviceControl }),
            (1,  14) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMultiAxisController }),
            (1,  15) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SpatialController }),
            (1,  16) => Ok(Usage::GenericDesktop { usage: GenericDesktop::AssistiveControl }),
            (1,  17) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DeviceDock }),
            (1,  18) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DockableDevice }),
            (1,  19) => Ok(Usage::GenericDesktop { usage: GenericDesktop::CallStateManagementControl }),
            (1,  48) => Ok(Usage::GenericDesktop { usage: GenericDesktop::X }),
            (1,  49) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Y }),
            (1,  50) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Z }),
            (1,  51) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Rx }),
            (1,  52) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Ry }),
            (1,  53) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Rz }),
            (1,  54) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Slider }),
            (1,  55) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Dial }),
            (1,  56) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Wheel }),
            (1,  57) => Ok(Usage::GenericDesktop { usage: GenericDesktop::HatSwitch }),
            (1,  58) => Ok(Usage::GenericDesktop { usage: GenericDesktop::CountedBuffer }),
            (1,  59) => Ok(Usage::GenericDesktop { usage: GenericDesktop::ByteCount }),
            (1,  60) => Ok(Usage::GenericDesktop { usage: GenericDesktop::MotionWakeup }),
            (1,  61) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Start }),
            (1,  62) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Select }),
            (1,  64) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Vx }),
            (1,  65) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Vy }),
            (1,  66) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Vz }),
            (1,  67) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Vbrx }),
            (1,  68) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Vbry }),
            (1,  69) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Vbrz }),
            (1,  70) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Vno }),
            (1,  71) => Ok(Usage::GenericDesktop { usage: GenericDesktop::FeatureNotification }),
            (1,  72) => Ok(Usage::GenericDesktop { usage: GenericDesktop::ResolutionMultiplier }),
            (1,  73) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Qx }),
            (1,  74) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Qy }),
            (1,  75) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Qz }),
            (1,  76) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Qw }),
            (1,  128) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemControl }),
            (1,  129) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemPowerDown }),
            (1,  130) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemSleep }),
            (1,  131) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemWakeUp }),
            (1,  132) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemContextMenu }),
            (1,  133) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMainMenu }),
            (1,  134) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemAppMenu }),
            (1,  135) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMenuHelp }),
            (1,  136) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMenuExit }),
            (1,  137) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMenuSelect }),
            (1,  138) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMenuRight }),
            (1,  139) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMenuLeft }),
            (1,  140) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMenuUp }),
            (1,  141) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMenuDown }),
            (1,  142) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemColdRestart }),
            (1,  143) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemWarmRestart }),
            (1,  144) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DpadUp }),
            (1,  145) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DpadDown }),
            (1,  146) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DpadRight }),
            (1,  147) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DpadLeft }),
            (1,  148) => Ok(Usage::GenericDesktop { usage: GenericDesktop::IndexTrigger }),
            (1,  149) => Ok(Usage::GenericDesktop { usage: GenericDesktop::PalmTrigger }),
            (1,  150) => Ok(Usage::GenericDesktop { usage: GenericDesktop::Thumbstick }),
            (1,  151) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemFunctionShift }),
            (1,  152) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemFunctionShiftLock }),
            (1,  153) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemFunctionShiftLockIndicator }),
            (1,  154) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDismissNotification }),
            (1,  155) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDoNotDisturb }),
            (1,  160) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDock }),
            (1,  161) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemUndock }),
            (1,  162) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemSetup }),
            (1,  163) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemBreak }),
            (1,  164) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDebuggerBreak }),
            (1,  165) => Ok(Usage::GenericDesktop { usage: GenericDesktop::ApplicationBreak }),
            (1,  166) => Ok(Usage::GenericDesktop { usage: GenericDesktop::ApplicationDebuggerBreak }),
            (1,  167) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemSpeakerMute }),
            (1,  168) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemHibernate }),
            (1,  169) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemMicrophoneMute }),
            (1,  176) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayInvert }),
            (1,  177) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayInternal }),
            (1,  178) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayExternal }),
            (1,  179) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayBoth }),
            (1,  180) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayDual }),
            (1,  181) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayToggleIntExtMode }),
            (1,  182) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplaySwapPrimarySecondary }),
            (1,  183) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayToggleLCDAutoscale }),
            (1,  192) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SensorZone }),
            (1,  193) => Ok(Usage::GenericDesktop { usage: GenericDesktop::RPM }),
            (1,  194) => Ok(Usage::GenericDesktop { usage: GenericDesktop::CoolantLevel }),
            (1,  195) => Ok(Usage::GenericDesktop { usage: GenericDesktop::CoolantCriticalLevel }),
            (1,  196) => Ok(Usage::GenericDesktop { usage: GenericDesktop::CoolantPump }),
            (1,  197) => Ok(Usage::GenericDesktop { usage: GenericDesktop::ChassisEnclosure }),
            (1,  198) => Ok(Usage::GenericDesktop { usage: GenericDesktop::WirelessRadioButton }),
            (1,  199) => Ok(Usage::GenericDesktop { usage: GenericDesktop::WirelessRadioLED }),
            (1,  200) => Ok(Usage::GenericDesktop { usage: GenericDesktop::WirelessRadioSliderSwitch }),
            (1,  201) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayRotationLockButton }),
            (1,  202) => Ok(Usage::GenericDesktop { usage: GenericDesktop::SystemDisplayRotationLockSliderSwitch }),
            (1,  203) => Ok(Usage::GenericDesktop { usage: GenericDesktop::ControlEnable }),
            (1,  208) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceUniqueID }),
            (1,  209) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceVendorID }),
            (1,  210) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DockableDevicePrimaryUsagePage }),
            (1,  211) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DockableDevicePrimaryUsageID }),
            (1,  212) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceDockingState }),
            (1,  213) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceDisplayOcclusion }),
            (1,  214) => Ok(Usage::GenericDesktop { usage: GenericDesktop::DockableDeviceObjectType }),
            (1,  224) => Ok(Usage::GenericDesktop { usage: GenericDesktop::CallActiveLED }),
            (1,  225) => Ok(Usage::GenericDesktop { usage: GenericDesktop::CallMuteToggle }),
            (1,  226) => Ok(Usage::GenericDesktop { usage: GenericDesktop::CallMuteLED }),
            (2,  1) => Ok(Usage::SimulationControls { usage: SimulationControls::FlightSimulationDevice }),
            (2,  2) => Ok(Usage::SimulationControls { usage: SimulationControls::AutomobileSimulationDevice }),
            (2,  3) => Ok(Usage::SimulationControls { usage: SimulationControls::TankSimulationDevice }),
            (2,  4) => Ok(Usage::SimulationControls { usage: SimulationControls::SpaceshipSimulationDevice }),
            (2,  5) => Ok(Usage::SimulationControls { usage: SimulationControls::SubmarineSimulationDevice }),
            (2,  6) => Ok(Usage::SimulationControls { usage: SimulationControls::SailingSimulationDevice }),
            (2,  7) => Ok(Usage::SimulationControls { usage: SimulationControls::MotorcycleSimulationDevice }),
            (2,  8) => Ok(Usage::SimulationControls { usage: SimulationControls::SportsSimulationDevice }),
            (2,  9) => Ok(Usage::SimulationControls { usage: SimulationControls::AirplaneSimulationDevice }),
            (2,  10) => Ok(Usage::SimulationControls { usage: SimulationControls::HelicopterSimulationDevice }),
            (2,  11) => Ok(Usage::SimulationControls { usage: SimulationControls::MagicCarpetSimulationDevice }),
            (2,  12) => Ok(Usage::SimulationControls { usage: SimulationControls::BicycleSimulationDevice }),
            (2,  32) => Ok(Usage::SimulationControls { usage: SimulationControls::FlightControlStick }),
            (2,  33) => Ok(Usage::SimulationControls { usage: SimulationControls::FlightStick }),
            (2,  34) => Ok(Usage::SimulationControls { usage: SimulationControls::CyclicControl }),
            (2,  35) => Ok(Usage::SimulationControls { usage: SimulationControls::CyclicTrim }),
            (2,  36) => Ok(Usage::SimulationControls { usage: SimulationControls::FlightYoke }),
            (2,  37) => Ok(Usage::SimulationControls { usage: SimulationControls::TrackControl }),
            (2,  176) => Ok(Usage::SimulationControls { usage: SimulationControls::Aileron }),
            (2,  177) => Ok(Usage::SimulationControls { usage: SimulationControls::AileronTrim }),
            (2,  178) => Ok(Usage::SimulationControls { usage: SimulationControls::AntiTorqueControl }),
            (2,  179) => Ok(Usage::SimulationControls { usage: SimulationControls::AutopilotEnable }),
            (2,  180) => Ok(Usage::SimulationControls { usage: SimulationControls::ChaffRelease }),
            (2,  181) => Ok(Usage::SimulationControls { usage: SimulationControls::CollectiveControl }),
            (2,  182) => Ok(Usage::SimulationControls { usage: SimulationControls::DiveBrake }),
            (2,  183) => Ok(Usage::SimulationControls { usage: SimulationControls::ElectronicCountermeasures }),
            (2,  184) => Ok(Usage::SimulationControls { usage: SimulationControls::Elevator }),
            (2,  185) => Ok(Usage::SimulationControls { usage: SimulationControls::ElevatorTrim }),
            (2,  186) => Ok(Usage::SimulationControls { usage: SimulationControls::Rudder }),
            (2,  187) => Ok(Usage::SimulationControls { usage: SimulationControls::Throttle }),
            (2,  188) => Ok(Usage::SimulationControls { usage: SimulationControls::FlightCommunications }),
            (2,  189) => Ok(Usage::SimulationControls { usage: SimulationControls::FlareRelease }),
            (2,  190) => Ok(Usage::SimulationControls { usage: SimulationControls::LandingGear }),
            (2,  191) => Ok(Usage::SimulationControls { usage: SimulationControls::ToeBrake }),
            (2,  192) => Ok(Usage::SimulationControls { usage: SimulationControls::Trigger }),
            (2,  193) => Ok(Usage::SimulationControls { usage: SimulationControls::WeaponsArm }),
            (2,  194) => Ok(Usage::SimulationControls { usage: SimulationControls::WeaponsSelect }),
            (2,  195) => Ok(Usage::SimulationControls { usage: SimulationControls::WingFlaps }),
            (2,  196) => Ok(Usage::SimulationControls { usage: SimulationControls::Accelerator }),
            (2,  197) => Ok(Usage::SimulationControls { usage: SimulationControls::Brake }),
            (2,  198) => Ok(Usage::SimulationControls { usage: SimulationControls::Clutch }),
            (2,  199) => Ok(Usage::SimulationControls { usage: SimulationControls::Shifter }),
            (2,  200) => Ok(Usage::SimulationControls { usage: SimulationControls::Steering }),
            (2,  201) => Ok(Usage::SimulationControls { usage: SimulationControls::TurretDirection }),
            (2,  202) => Ok(Usage::SimulationControls { usage: SimulationControls::BarrelElevation }),
            (2,  203) => Ok(Usage::SimulationControls { usage: SimulationControls::DivePlane }),
            (2,  204) => Ok(Usage::SimulationControls { usage: SimulationControls::Ballast }),
            (2,  205) => Ok(Usage::SimulationControls { usage: SimulationControls::BicycleCrank }),
            (2,  206) => Ok(Usage::SimulationControls { usage: SimulationControls::HandleBars }),
            (2,  207) => Ok(Usage::SimulationControls { usage: SimulationControls::FrontBrake }),
            (2,  208) => Ok(Usage::SimulationControls { usage: SimulationControls::RearBrake }),
            (3,  1) => Ok(Usage::VRControls { usage: VRControls::Belt }),
            (3,  2) => Ok(Usage::VRControls { usage: VRControls::BodySuit }),
            (3,  3) => Ok(Usage::VRControls { usage: VRControls::Flexor }),
            (3,  4) => Ok(Usage::VRControls { usage: VRControls::Glove }),
            (3,  5) => Ok(Usage::VRControls { usage: VRControls::HeadTracker }),
            (3,  6) => Ok(Usage::VRControls { usage: VRControls::HeadMountedDisplay }),
            (3,  7) => Ok(Usage::VRControls { usage: VRControls::HandTracker }),
            (3,  8) => Ok(Usage::VRControls { usage: VRControls::Oculometer }),
            (3,  9) => Ok(Usage::VRControls { usage: VRControls::Vest }),
            (3,  10) => Ok(Usage::VRControls { usage: VRControls::AnimatronicDevice }),
            (3,  32) => Ok(Usage::VRControls { usage: VRControls::StereoEnable }),
            (3,  33) => Ok(Usage::VRControls { usage: VRControls::DisplayEnable }),
            (4,  1) => Ok(Usage::SportControls { usage: SportControls::BaseballBat }),
            (4,  2) => Ok(Usage::SportControls { usage: SportControls::GolfClub }),
            (4,  3) => Ok(Usage::SportControls { usage: SportControls::RowingMachine }),
            (4,  4) => Ok(Usage::SportControls { usage: SportControls::Treadmill }),
            (4,  48) => Ok(Usage::SportControls { usage: SportControls::Oar }),
            (4,  49) => Ok(Usage::SportControls { usage: SportControls::Slope }),
            (4,  50) => Ok(Usage::SportControls { usage: SportControls::Rate }),
            (4,  51) => Ok(Usage::SportControls { usage: SportControls::StickSpeed }),
            (4,  52) => Ok(Usage::SportControls { usage: SportControls::StickFaceAngle }),
            (4,  53) => Ok(Usage::SportControls { usage: SportControls::StickHeelToe }),
            (4,  54) => Ok(Usage::SportControls { usage: SportControls::StickFollowThrough }),
            (4,  55) => Ok(Usage::SportControls { usage: SportControls::StickTempo }),
            (4,  56) => Ok(Usage::SportControls { usage: SportControls::StickType }),
            (4,  57) => Ok(Usage::SportControls { usage: SportControls::StickHeight }),
            (4,  80) => Ok(Usage::SportControls { usage: SportControls::Putter }),
            (4,  81) => Ok(Usage::SportControls { usage: SportControls::OneIron }),
            (4,  82) => Ok(Usage::SportControls { usage: SportControls::TwoIron }),
            (4,  83) => Ok(Usage::SportControls { usage: SportControls::ThreeIron }),
            (4,  84) => Ok(Usage::SportControls { usage: SportControls::FourIron }),
            (4,  85) => Ok(Usage::SportControls { usage: SportControls::FiveIron }),
            (4,  86) => Ok(Usage::SportControls { usage: SportControls::SixIron }),
            (4,  87) => Ok(Usage::SportControls { usage: SportControls::SevenIron }),
            (4,  88) => Ok(Usage::SportControls { usage: SportControls::EightIron }),
            (4,  89) => Ok(Usage::SportControls { usage: SportControls::NineIron }),
            (4,  90) => Ok(Usage::SportControls { usage: SportControls::One0Iron }),
            (4,  91) => Ok(Usage::SportControls { usage: SportControls::One1Iron }),
            (4,  92) => Ok(Usage::SportControls { usage: SportControls::SandWedge }),
            (4,  93) => Ok(Usage::SportControls { usage: SportControls::LoftWedge }),
            (4,  94) => Ok(Usage::SportControls { usage: SportControls::PowerWedge }),
            (4,  95) => Ok(Usage::SportControls { usage: SportControls::OneWood }),
            (4,  96) => Ok(Usage::SportControls { usage: SportControls::ThreeWood }),
            (4,  97) => Ok(Usage::SportControls { usage: SportControls::FiveWood }),
            (4,  98) => Ok(Usage::SportControls { usage: SportControls::SevenWood }),
            (4,  99) => Ok(Usage::SportControls { usage: SportControls::NineWood }),
            (5,  1) => Ok(Usage::GameControls { usage: GameControls::ThreeDGameController }),
            (5,  2) => Ok(Usage::GameControls { usage: GameControls::PinballDevice }),
            (5,  3) => Ok(Usage::GameControls { usage: GameControls::GunDevice }),
            (5,  32) => Ok(Usage::GameControls { usage: GameControls::PointofView }),
            (5,  33) => Ok(Usage::GameControls { usage: GameControls::TurnRightLeft }),
            (5,  34) => Ok(Usage::GameControls { usage: GameControls::PitchForwardBackward }),
            (5,  35) => Ok(Usage::GameControls { usage: GameControls::RollRightLeft }),
            (5,  36) => Ok(Usage::GameControls { usage: GameControls::MoveRightLeft }),
            (5,  37) => Ok(Usage::GameControls { usage: GameControls::MoveForwardBackward }),
            (5,  38) => Ok(Usage::GameControls { usage: GameControls::MoveUpDown }),
            (5,  39) => Ok(Usage::GameControls { usage: GameControls::LeanRightLeft }),
            (5,  40) => Ok(Usage::GameControls { usage: GameControls::LeanForwardBackward }),
            (5,  41) => Ok(Usage::GameControls { usage: GameControls::HeightofPOV }),
            (5,  42) => Ok(Usage::GameControls { usage: GameControls::Flipper }),
            (5,  43) => Ok(Usage::GameControls { usage: GameControls::SecondaryFlipper }),
            (5,  44) => Ok(Usage::GameControls { usage: GameControls::Bump }),
            (5,  45) => Ok(Usage::GameControls { usage: GameControls::NewGame }),
            (5,  46) => Ok(Usage::GameControls { usage: GameControls::ShootBall }),
            (5,  47) => Ok(Usage::GameControls { usage: GameControls::Player }),
            (5,  48) => Ok(Usage::GameControls { usage: GameControls::GunBolt }),
            (5,  49) => Ok(Usage::GameControls { usage: GameControls::GunClip }),
            (5,  50) => Ok(Usage::GameControls { usage: GameControls::GunSelector }),
            (5,  51) => Ok(Usage::GameControls { usage: GameControls::GunSingleShot }),
            (5,  52) => Ok(Usage::GameControls { usage: GameControls::GunBurst }),
            (5,  53) => Ok(Usage::GameControls { usage: GameControls::GunAutomatic }),
            (5,  54) => Ok(Usage::GameControls { usage: GameControls::GunSafety }),
            (5,  55) => Ok(Usage::GameControls { usage: GameControls::GamepadFireJump }),
            (5,  57) => Ok(Usage::GameControls { usage: GameControls::GamepadTrigger }),
            (5,  58) => Ok(Usage::GameControls { usage: GameControls::FormfittingGamepad }),
            (6,  1) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::BackgroundNonuserControls }),
            (6,  32) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::BatteryStrength }),
            (6,  33) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::WirelessChannel }),
            (6,  34) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::WirelessID }),
            (6,  35) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::DiscoverWirelessControl }),
            (6,  36) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::SecurityCodeCharacterEntered }),
            (6,  37) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::SecurityCodeCharacterErased }),
            (6,  38) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::SecurityCodeCleared }),
            (6,  39) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::SequenceID }),
            (6,  40) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::SequenceIDReset }),
            (6,  41) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::RFSignalStrength }),
            (6,  42) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::SoftwareVersion }),
            (6,  43) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::ProtocolVersion }),
            (6,  44) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::HardwareVersion }),
            (6,  45) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::Major }),
            (6,  46) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::Minor }),
            (6,  47) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::Revision }),
            (6,  48) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::Handedness }),
            (6,  49) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::EitherHand }),
            (6,  50) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::LeftHand }),
            (6,  51) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::RightHand }),
            (6,  52) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::BothHands }),
            (6,  64) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::GripPoseOffset }),
            (6,  65) => Ok(Usage::GenericDeviceControls { usage: GenericDeviceControls::PointerPoseOffset }),
            (7,  1) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::ErrorRollOver }),
            (7,  2) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::POSTFail }),
            (7,  3) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::ErrorUndefined }),
            (7,  4) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardA }),
            (7,  5) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardB }),
            (7,  6) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardC }),
            (7,  7) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardD }),
            (7,  8) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardE }),
            (7,  9) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF }),
            (7,  10) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardG }),
            (7,  11) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardH }),
            (7,  12) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardI }),
            (7,  13) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardJ }),
            (7,  14) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardK }),
            (7,  15) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardL }),
            (7,  16) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardM }),
            (7,  17) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardN }),
            (7,  18) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardO }),
            (7,  19) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardP }),
            (7,  20) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardQ }),
            (7,  21) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardR }),
            (7,  22) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardS }),
            (7,  23) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardT }),
            (7,  24) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardU }),
            (7,  25) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardV }),
            (7,  26) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardW }),
            (7,  27) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardX }),
            (7,  28) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardY }),
            (7,  29) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardZ }),
            (7,  30) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard1andBang }),
            (7,  31) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard2andAt }),
            (7,  32) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard3andHash }),
            (7,  33) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard4andDollar }),
            (7,  34) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard5andPercent }),
            (7,  35) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard6andCaret }),
            (7,  36) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard7andAmpersand }),
            (7,  37) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard8andStar }),
            (7,  38) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard9andLeftBracket }),
            (7,  39) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keyboard0andRightBracket }),
            (7,  40) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardReturnEnter }),
            (7,  41) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardEscape }),
            (7,  42) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardDelete }),
            (7,  43) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardTab }),
            (7,  44) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSpacebar }),
            (7,  45) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardDashandUnderscore }),
            (7,  46) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardEqualsandPlus }),
            (7,  47) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftBrace }),
            (7,  48) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightBrace }),
            (7,  49) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardBackslashandPipe }),
            (7,  50) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardNonUSHashandTilde }),
            (7,  51) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSemiColonandColon }),
            (7,  52) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftAposandDouble }),
            (7,  53) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardGraveAccentandTilde }),
            (7,  54) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCommaandLessThan }),
            (7,  55) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPeriodandGreaterThan }),
            (7,  56) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardForwardSlashandQuestionMark }),
            (7,  57) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCapsLock }),
            (7,  58) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF1 }),
            (7,  59) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF2 }),
            (7,  60) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF3 }),
            (7,  61) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF4 }),
            (7,  62) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF5 }),
            (7,  63) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF6 }),
            (7,  64) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF7 }),
            (7,  65) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF8 }),
            (7,  66) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF9 }),
            (7,  67) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF10 }),
            (7,  68) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF11 }),
            (7,  69) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF12 }),
            (7,  70) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPrintScreen }),
            (7,  71) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardScrollLock }),
            (7,  72) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPause }),
            (7,  73) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInsert }),
            (7,  74) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardHome }),
            (7,  75) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPageUp }),
            (7,  76) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardDeleteForward }),
            (7,  77) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardEnd }),
            (7,  78) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPageDown }),
            (7,  79) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightArrow }),
            (7,  80) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftArrow }),
            (7,  81) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardDownArrow }),
            (7,  82) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardUpArrow }),
            (7,  83) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadNumLockandClear }),
            (7,  84) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadForwardSlash }),
            (7,  85) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadStar }),
            (7,  86) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDash }),
            (7,  87) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadPlus }),
            (7,  88) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadENTER }),
            (7,  89) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad1andEnd }),
            (7,  90) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad2andDownArrow }),
            (7,  91) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad3andPageDn }),
            (7,  92) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad4andLeftArrow }),
            (7,  93) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad5 }),
            (7,  94) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad6andRightArrow }),
            (7,  95) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad7andHome }),
            (7,  96) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad8andUpArrow }),
            (7,  97) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad9andPageUp }),
            (7,  98) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::Keypad0andInsert }),
            (7,  99) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadPeriodandDelete }),
            (7,  100) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardNonUSBackslashandPipe }),
            (7,  101) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardApplication }),
            (7,  102) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPower }),
            (7,  103) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadEquals }),
            (7,  104) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF13 }),
            (7,  105) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF14 }),
            (7,  106) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF15 }),
            (7,  107) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF16 }),
            (7,  108) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF17 }),
            (7,  109) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF18 }),
            (7,  110) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF19 }),
            (7,  111) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF20 }),
            (7,  112) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF21 }),
            (7,  113) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF22 }),
            (7,  114) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF23 }),
            (7,  115) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardF24 }),
            (7,  116) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardExecute }),
            (7,  117) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardHelp }),
            (7,  118) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardMenu }),
            (7,  119) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSelect }),
            (7,  120) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardStop }),
            (7,  121) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardAgain }),
            (7,  122) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardUndo }),
            (7,  123) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCut }),
            (7,  124) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCopy }),
            (7,  125) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPaste }),
            (7,  126) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardFind }),
            (7,  127) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardMute }),
            (7,  128) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardVolumeUp }),
            (7,  129) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardVolumeDown }),
            (7,  130) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLockingCapsLock }),
            (7,  131) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLockingNumLock }),
            (7,  132) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLockingScrollLock }),
            (7,  133) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadComma }),
            (7,  134) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadEqualSign }),
            (7,  135) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational1 }),
            (7,  136) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational2 }),
            (7,  137) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational3 }),
            (7,  138) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational4 }),
            (7,  139) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational5 }),
            (7,  140) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational6 }),
            (7,  141) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational7 }),
            (7,  142) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational8 }),
            (7,  143) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardInternational9 }),
            (7,  144) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG1 }),
            (7,  145) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG2 }),
            (7,  146) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG3 }),
            (7,  147) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG4 }),
            (7,  148) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG5 }),
            (7,  149) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG6 }),
            (7,  150) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG7 }),
            (7,  151) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG8 }),
            (7,  152) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLANG9 }),
            (7,  153) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardAlternateErase }),
            (7,  154) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSysReqAttention }),
            (7,  155) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCancel }),
            (7,  156) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardClear }),
            (7,  157) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardPrior }),
            (7,  158) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardReturn }),
            (7,  159) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardSeparator }),
            (7,  160) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardOut }),
            (7,  161) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardOper }),
            (7,  162) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardClearAgain }),
            (7,  163) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardCrSelProps }),
            (7,  164) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardExSel }),
            (7,  176) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDouble0 }),
            (7,  177) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadTriple0 }),
            (7,  178) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::ThousandsSeparator }),
            (7,  179) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::DecimalSeparator }),
            (7,  180) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::CurrencyUnit }),
            (7,  181) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::CurrencySubunit }),
            (7,  182) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadLeftBracket }),
            (7,  183) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadRightBracket }),
            (7,  184) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadLeftBrace }),
            (7,  185) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadRightBrace }),
            (7,  186) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadTab }),
            (7,  187) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadBackspace }),
            (7,  188) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadA }),
            (7,  189) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadB }),
            (7,  190) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadC }),
            (7,  191) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadD }),
            (7,  192) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadE }),
            (7,  193) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadF }),
            (7,  194) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadXOR }),
            (7,  195) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadCaret }),
            (7,  196) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadPercentage }),
            (7,  197) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadLess }),
            (7,  198) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadGreater }),
            (7,  199) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadAmpersand }),
            (7,  200) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDoubleAmpersand }),
            (7,  201) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadBar }),
            (7,  202) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDoubleBar }),
            (7,  203) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadColon }),
            (7,  204) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadHash }),
            (7,  205) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadSpace }),
            (7,  206) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadAt }),
            (7,  207) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadBang }),
            (7,  208) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryStore }),
            (7,  209) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryRecall }),
            (7,  210) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryClear }),
            (7,  211) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryAdd }),
            (7,  212) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemorySubtract }),
            (7,  213) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryMultiply }),
            (7,  214) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadMemoryDivide }),
            (7,  215) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadPlusMinus }),
            (7,  216) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadClear }),
            (7,  217) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadClearEntry }),
            (7,  218) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadBinary }),
            (7,  219) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadOctal }),
            (7,  220) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadDecimal }),
            (7,  221) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeypadHexadecimal }),
            (7,  224) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftControl }),
            (7,  225) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftShift }),
            (7,  226) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftAlt }),
            (7,  227) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardLeftGUI }),
            (7,  228) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightControl }),
            (7,  229) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightShift }),
            (7,  230) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightAlt }),
            (7,  231) => Ok(Usage::KeyboardKeypad { usage: KeyboardKeypad::KeyboardRightGUI }),
            (8,  1) => Ok(Usage::LED { usage: LED::NumLock }),
            (8,  2) => Ok(Usage::LED { usage: LED::CapsLock }),
            (8,  3) => Ok(Usage::LED { usage: LED::ScrollLock }),
            (8,  4) => Ok(Usage::LED { usage: LED::Compose }),
            (8,  5) => Ok(Usage::LED { usage: LED::Kana }),
            (8,  6) => Ok(Usage::LED { usage: LED::Power }),
            (8,  7) => Ok(Usage::LED { usage: LED::Shift }),
            (8,  8) => Ok(Usage::LED { usage: LED::DoNotDisturb }),
            (8,  9) => Ok(Usage::LED { usage: LED::Mute }),
            (8,  10) => Ok(Usage::LED { usage: LED::ToneEnable }),
            (8,  11) => Ok(Usage::LED { usage: LED::HighCutFilter }),
            (8,  12) => Ok(Usage::LED { usage: LED::LowCutFilter }),
            (8,  13) => Ok(Usage::LED { usage: LED::EqualizerEnable }),
            (8,  14) => Ok(Usage::LED { usage: LED::SoundFieldOn }),
            (8,  15) => Ok(Usage::LED { usage: LED::SurroundOn }),
            (8,  16) => Ok(Usage::LED { usage: LED::Repeat }),
            (8,  17) => Ok(Usage::LED { usage: LED::Stereo }),
            (8,  18) => Ok(Usage::LED { usage: LED::SamplingRateDetect }),
            (8,  19) => Ok(Usage::LED { usage: LED::Spinning }),
            (8,  20) => Ok(Usage::LED { usage: LED::CAV }),
            (8,  21) => Ok(Usage::LED { usage: LED::CLV }),
            (8,  22) => Ok(Usage::LED { usage: LED::RecordingFormatDetect }),
            (8,  23) => Ok(Usage::LED { usage: LED::OffHook }),
            (8,  24) => Ok(Usage::LED { usage: LED::Ring }),
            (8,  25) => Ok(Usage::LED { usage: LED::MessageWaiting }),
            (8,  26) => Ok(Usage::LED { usage: LED::DataMode }),
            (8,  27) => Ok(Usage::LED { usage: LED::BatteryOperation }),
            (8,  28) => Ok(Usage::LED { usage: LED::BatteryOK }),
            (8,  29) => Ok(Usage::LED { usage: LED::BatteryLow }),
            (8,  30) => Ok(Usage::LED { usage: LED::Speaker }),
            (8,  31) => Ok(Usage::LED { usage: LED::Headset }),
            (8,  32) => Ok(Usage::LED { usage: LED::Hold }),
            (8,  33) => Ok(Usage::LED { usage: LED::Microphone }),
            (8,  34) => Ok(Usage::LED { usage: LED::Coverage }),
            (8,  35) => Ok(Usage::LED { usage: LED::NightMode }),
            (8,  36) => Ok(Usage::LED { usage: LED::SendCalls }),
            (8,  37) => Ok(Usage::LED { usage: LED::CallPickup }),
            (8,  38) => Ok(Usage::LED { usage: LED::Conference }),
            (8,  39) => Ok(Usage::LED { usage: LED::Standby }),
            (8,  40) => Ok(Usage::LED { usage: LED::CameraOn }),
            (8,  41) => Ok(Usage::LED { usage: LED::CameraOff }),
            (8,  42) => Ok(Usage::LED { usage: LED::OnLine }),
            (8,  43) => Ok(Usage::LED { usage: LED::OffLine }),
            (8,  44) => Ok(Usage::LED { usage: LED::Busy }),
            (8,  45) => Ok(Usage::LED { usage: LED::Ready }),
            (8,  46) => Ok(Usage::LED { usage: LED::PaperOut }),
            (8,  47) => Ok(Usage::LED { usage: LED::PaperJam }),
            (8,  48) => Ok(Usage::LED { usage: LED::Remote }),
            (8,  49) => Ok(Usage::LED { usage: LED::Forward }),
            (8,  50) => Ok(Usage::LED { usage: LED::Reverse }),
            (8,  51) => Ok(Usage::LED { usage: LED::Stop }),
            (8,  52) => Ok(Usage::LED { usage: LED::Rewind }),
            (8,  53) => Ok(Usage::LED { usage: LED::FastForward }),
            (8,  54) => Ok(Usage::LED { usage: LED::Play }),
            (8,  55) => Ok(Usage::LED { usage: LED::Pause }),
            (8,  56) => Ok(Usage::LED { usage: LED::Record }),
            (8,  57) => Ok(Usage::LED { usage: LED::Error }),
            (8,  58) => Ok(Usage::LED { usage: LED::UsageSelectedIndicator }),
            (8,  59) => Ok(Usage::LED { usage: LED::UsageInUseIndicator }),
            (8,  60) => Ok(Usage::LED { usage: LED::UsageMultiModeIndicator }),
            (8,  61) => Ok(Usage::LED { usage: LED::IndicatorOn }),
            (8,  62) => Ok(Usage::LED { usage: LED::IndicatorFlash }),
            (8,  63) => Ok(Usage::LED { usage: LED::IndicatorSlowBlink }),
            (8,  64) => Ok(Usage::LED { usage: LED::IndicatorFastBlink }),
            (8,  65) => Ok(Usage::LED { usage: LED::IndicatorOff }),
            (8,  66) => Ok(Usage::LED { usage: LED::FlashOnTime }),
            (8,  67) => Ok(Usage::LED { usage: LED::SlowBlinkOnTime }),
            (8,  68) => Ok(Usage::LED { usage: LED::SlowBlinkOffTime }),
            (8,  69) => Ok(Usage::LED { usage: LED::FastBlinkOnTime }),
            (8,  70) => Ok(Usage::LED { usage: LED::FastBlinkOffTime }),
            (8,  71) => Ok(Usage::LED { usage: LED::UsageIndicatorColor }),
            (8,  72) => Ok(Usage::LED { usage: LED::IndicatorRed }),
            (8,  73) => Ok(Usage::LED { usage: LED::IndicatorGreen }),
            (8,  74) => Ok(Usage::LED { usage: LED::IndicatorAmber }),
            (8,  75) => Ok(Usage::LED { usage: LED::GenericIndicator }),
            (8,  76) => Ok(Usage::LED { usage: LED::SystemSuspend }),
            (8,  77) => Ok(Usage::LED { usage: LED::ExternalPowerConnected }),
            (8,  78) => Ok(Usage::LED { usage: LED::IndicatorBlue }),
            (8,  79) => Ok(Usage::LED { usage: LED::IndicatorOrange }),
            (8,  80) => Ok(Usage::LED { usage: LED::GoodStatus }),
            (8,  81) => Ok(Usage::LED { usage: LED::WarningStatus }),
            (8,  82) => Ok(Usage::LED { usage: LED::RGBLED }),
            (8,  83) => Ok(Usage::LED { usage: LED::RedLEDChannel }),
            (8,  84) => Ok(Usage::LED { usage: LED::BlueLEDChannel }),
            (8,  85) => Ok(Usage::LED { usage: LED::GreenLEDChannel }),
            (8,  86) => Ok(Usage::LED { usage: LED::LEDIntensity }),
            (8,  87) => Ok(Usage::LED { usage: LED::SystemMicrophoneMute }),
            (8,  96) => Ok(Usage::LED { usage: LED::PlayerIndicator }),
            (8,  97) => Ok(Usage::LED { usage: LED::Player1 }),
            (8,  98) => Ok(Usage::LED { usage: LED::Player2 }),
            (8,  99) => Ok(Usage::LED { usage: LED::Player3 }),
            (8,  100) => Ok(Usage::LED { usage: LED::Player4 }),
            (8,  101) => Ok(Usage::LED { usage: LED::Player5 }),
            (8,  102) => Ok(Usage::LED { usage: LED::Player6 }),
            (8,  103) => Ok(Usage::LED { usage: LED::Player7 }),
            (8,  104) => Ok(Usage::LED { usage: LED::Player8 }),
            (11,  1) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Phone }),
            (11,  2) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::AnsweringMachine }),
            (11,  3) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::MessageControls }),
            (11,  4) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Handset }),
            (11,  5) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Headset }),
            (11,  6) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::TelephonyKeyPad }),
            (11,  7) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::ProgrammableButton }),
            (11,  32) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::HookSwitch }),
            (11,  33) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Flash }),
            (11,  34) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Feature }),
            (11,  35) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Hold }),
            (11,  36) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Redial }),
            (11,  37) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Transfer }),
            (11,  38) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Drop }),
            (11,  39) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Park }),
            (11,  40) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::ForwardCalls }),
            (11,  41) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::AlternateFunction }),
            (11,  42) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Line }),
            (11,  43) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::SpeakerPhone }),
            (11,  44) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Conference }),
            (11,  45) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::RingEnable }),
            (11,  46) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::RingSelect }),
            (11,  47) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneMute }),
            (11,  48) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::CallerID }),
            (11,  49) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Send }),
            (11,  80) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::SpeedDial }),
            (11,  81) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::StoreNumber }),
            (11,  82) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::RecallNumber }),
            (11,  83) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneDirectory }),
            (11,  112) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::VoiceMail }),
            (11,  113) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::ScreenCalls }),
            (11,  114) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::DoNotDisturb }),
            (11,  115) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Message }),
            (11,  116) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::AnswerOnOff }),
            (11,  144) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::InsideDialTone }),
            (11,  145) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::OutsideDialTone }),
            (11,  146) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::InsideRingTone }),
            (11,  147) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::OutsideRingTone }),
            (11,  148) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PriorityRingTone }),
            (11,  149) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::InsideRingback }),
            (11,  150) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PriorityRingback }),
            (11,  151) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::LineBusyTone }),
            (11,  152) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::ReorderTone }),
            (11,  153) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::CallWaitingTone }),
            (11,  154) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::ConfirmationTone1 }),
            (11,  155) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::ConfirmationTone2 }),
            (11,  156) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::TonesOff }),
            (11,  157) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::OutsideRingback }),
            (11,  158) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::Ringer }),
            (11,  176) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey0 }),
            (11,  177) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey1 }),
            (11,  178) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey2 }),
            (11,  179) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey3 }),
            (11,  180) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey4 }),
            (11,  181) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey5 }),
            (11,  182) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey6 }),
            (11,  183) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey7 }),
            (11,  184) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey8 }),
            (11,  185) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKey9 }),
            (11,  186) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyStar }),
            (11,  187) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyPound }),
            (11,  188) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyA }),
            (11,  189) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyB }),
            (11,  190) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyC }),
            (11,  191) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneKeyD }),
            (11,  192) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneCallHistoryKey }),
            (11,  193) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneCallerIDKey }),
            (11,  194) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneSettingsKey }),
            (11,  240) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::HostControl }),
            (11,  241) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::HostAvailable }),
            (11,  242) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::HostCallActive }),
            (11,  243) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::ActivateHandsetAudio }),
            (11,  244) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::RingType }),
            (11,  245) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::RedialablePhoneNumber }),
            (11,  248) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::StopRingTone }),
            (11,  249) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PSTNRingTone }),
            (11,  250) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::HostRingTone }),
            (11,  251) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::AlertSoundError }),
            (11,  252) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::AlertSoundConfirm }),
            (11,  253) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::AlertSoundNotification }),
            (11,  254) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::SilentRing }),
            (11,  264) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::EmailMessageWaiting }),
            (11,  265) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::VoicemailMessageWaiting }),
            (11,  266) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::HostHold }),
            (11,  272) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::IncomingCallHistoryCount }),
            (11,  273) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::OutgoingCallHistoryCount }),
            (11,  274) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::IncomingCallHistory }),
            (11,  275) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::OutgoingCallHistory }),
            (11,  276) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneLocale }),
            (11,  320) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneTimeSecond }),
            (11,  321) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneTimeMinute }),
            (11,  322) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneTimeHour }),
            (11,  323) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneDateDay }),
            (11,  324) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneDateMonth }),
            (11,  325) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::PhoneDateYear }),
            (11,  326) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::HandsetNickname }),
            (11,  327) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::AddressBookID }),
            (11,  330) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::CallDuration }),
            (11,  331) => Ok(Usage::TelephonyDevice { usage: TelephonyDevice::DualModePhone }),
            (12,  1) => Ok(Usage::Consumer { usage: Consumer::ConsumerControl }),
            (12,  2) => Ok(Usage::Consumer { usage: Consumer::NumericKeyPad }),
            (12,  3) => Ok(Usage::Consumer { usage: Consumer::ProgrammableButtons }),
            (12,  4) => Ok(Usage::Consumer { usage: Consumer::Microphone }),
            (12,  5) => Ok(Usage::Consumer { usage: Consumer::Headphone }),
            (12,  6) => Ok(Usage::Consumer { usage: Consumer::GraphicEqualizer }),
            (12,  32) => Ok(Usage::Consumer { usage: Consumer::Plus10 }),
            (12,  33) => Ok(Usage::Consumer { usage: Consumer::Plus100 }),
            (12,  34) => Ok(Usage::Consumer { usage: Consumer::AMPM }),
            (12,  48) => Ok(Usage::Consumer { usage: Consumer::Power }),
            (12,  49) => Ok(Usage::Consumer { usage: Consumer::Reset }),
            (12,  50) => Ok(Usage::Consumer { usage: Consumer::Sleep }),
            (12,  51) => Ok(Usage::Consumer { usage: Consumer::SleepAfter }),
            (12,  52) => Ok(Usage::Consumer { usage: Consumer::SleepMode }),
            (12,  53) => Ok(Usage::Consumer { usage: Consumer::Illumination }),
            (12,  54) => Ok(Usage::Consumer { usage: Consumer::FunctionButtons }),
            (12,  64) => Ok(Usage::Consumer { usage: Consumer::Menu }),
            (12,  65) => Ok(Usage::Consumer { usage: Consumer::MenuPick }),
            (12,  66) => Ok(Usage::Consumer { usage: Consumer::MenuUp }),
            (12,  67) => Ok(Usage::Consumer { usage: Consumer::MenuDown }),
            (12,  68) => Ok(Usage::Consumer { usage: Consumer::MenuLeft }),
            (12,  69) => Ok(Usage::Consumer { usage: Consumer::MenuRight }),
            (12,  70) => Ok(Usage::Consumer { usage: Consumer::MenuEscape }),
            (12,  71) => Ok(Usage::Consumer { usage: Consumer::MenuValueIncrease }),
            (12,  72) => Ok(Usage::Consumer { usage: Consumer::MenuValueDecrease }),
            (12,  96) => Ok(Usage::Consumer { usage: Consumer::DataOnScreen }),
            (12,  97) => Ok(Usage::Consumer { usage: Consumer::ClosedCaption }),
            (12,  98) => Ok(Usage::Consumer { usage: Consumer::ClosedCaptionSelect }),
            (12,  99) => Ok(Usage::Consumer { usage: Consumer::VCRTV }),
            (12,  100) => Ok(Usage::Consumer { usage: Consumer::BroadcastMode }),
            (12,  101) => Ok(Usage::Consumer { usage: Consumer::Snapshot }),
            (12,  102) => Ok(Usage::Consumer { usage: Consumer::Still }),
            (12,  103) => Ok(Usage::Consumer { usage: Consumer::PictureinPictureToggle }),
            (12,  104) => Ok(Usage::Consumer { usage: Consumer::PictureinPictureSwap }),
            (12,  105) => Ok(Usage::Consumer { usage: Consumer::RedMenuButton }),
            (12,  106) => Ok(Usage::Consumer { usage: Consumer::GreenMenuButton }),
            (12,  107) => Ok(Usage::Consumer { usage: Consumer::BlueMenuButton }),
            (12,  108) => Ok(Usage::Consumer { usage: Consumer::YellowMenuButton }),
            (12,  109) => Ok(Usage::Consumer { usage: Consumer::Aspect }),
            (12,  110) => Ok(Usage::Consumer { usage: Consumer::ThreeDModeSelect }),
            (12,  111) => Ok(Usage::Consumer { usage: Consumer::DisplayBrightnessIncrement }),
            (12,  112) => Ok(Usage::Consumer { usage: Consumer::DisplayBrightnessDecrement }),
            (12,  113) => Ok(Usage::Consumer { usage: Consumer::DisplayBrightness }),
            (12,  114) => Ok(Usage::Consumer { usage: Consumer::DisplayBacklightToggle }),
            (12,  115) => Ok(Usage::Consumer { usage: Consumer::DisplaySetBrightnesstoMinimum }),
            (12,  116) => Ok(Usage::Consumer { usage: Consumer::DisplaySetBrightnesstoMaximum }),
            (12,  117) => Ok(Usage::Consumer { usage: Consumer::DisplaySetAutoBrightness }),
            (12,  118) => Ok(Usage::Consumer { usage: Consumer::CameraAccessEnabled }),
            (12,  119) => Ok(Usage::Consumer { usage: Consumer::CameraAccessDisabled }),
            (12,  120) => Ok(Usage::Consumer { usage: Consumer::CameraAccessToggle }),
            (12,  121) => Ok(Usage::Consumer { usage: Consumer::KeyboardBrightnessIncrement }),
            (12,  122) => Ok(Usage::Consumer { usage: Consumer::KeyboardBrightnessDecrement }),
            (12,  123) => Ok(Usage::Consumer { usage: Consumer::KeyboardBacklightSetLevel }),
            (12,  124) => Ok(Usage::Consumer { usage: Consumer::KeyboardBacklightOOC }),
            (12,  125) => Ok(Usage::Consumer { usage: Consumer::KeyboardBacklightSetMinimum }),
            (12,  126) => Ok(Usage::Consumer { usage: Consumer::KeyboardBacklightSetMaximum }),
            (12,  127) => Ok(Usage::Consumer { usage: Consumer::KeyboardBacklightAuto }),
            (12,  128) => Ok(Usage::Consumer { usage: Consumer::Selection }),
            (12,  129) => Ok(Usage::Consumer { usage: Consumer::AssignSelection }),
            (12,  130) => Ok(Usage::Consumer { usage: Consumer::ModeStep }),
            (12,  131) => Ok(Usage::Consumer { usage: Consumer::RecallLast }),
            (12,  132) => Ok(Usage::Consumer { usage: Consumer::EnterChannel }),
            (12,  133) => Ok(Usage::Consumer { usage: Consumer::OrderMovie }),
            (12,  134) => Ok(Usage::Consumer { usage: Consumer::Channel }),
            (12,  135) => Ok(Usage::Consumer { usage: Consumer::MediaSelection }),
            (12,  136) => Ok(Usage::Consumer { usage: Consumer::MediaSelectComputer }),
            (12,  137) => Ok(Usage::Consumer { usage: Consumer::MediaSelectTV }),
            (12,  138) => Ok(Usage::Consumer { usage: Consumer::MediaSelectWWW }),
            (12,  139) => Ok(Usage::Consumer { usage: Consumer::MediaSelectDVD }),
            (12,  140) => Ok(Usage::Consumer { usage: Consumer::MediaSelectTelephone }),
            (12,  141) => Ok(Usage::Consumer { usage: Consumer::MediaSelectProgramGuide }),
            (12,  142) => Ok(Usage::Consumer { usage: Consumer::MediaSelectVideoPhone }),
            (12,  143) => Ok(Usage::Consumer { usage: Consumer::MediaSelectGames }),
            (12,  144) => Ok(Usage::Consumer { usage: Consumer::MediaSelectMessages }),
            (12,  145) => Ok(Usage::Consumer { usage: Consumer::MediaSelectCD }),
            (12,  146) => Ok(Usage::Consumer { usage: Consumer::MediaSelectVCR }),
            (12,  147) => Ok(Usage::Consumer { usage: Consumer::MediaSelectTuner }),
            (12,  148) => Ok(Usage::Consumer { usage: Consumer::Quit }),
            (12,  149) => Ok(Usage::Consumer { usage: Consumer::Help }),
            (12,  150) => Ok(Usage::Consumer { usage: Consumer::MediaSelectTape }),
            (12,  151) => Ok(Usage::Consumer { usage: Consumer::MediaSelectCable }),
            (12,  152) => Ok(Usage::Consumer { usage: Consumer::MediaSelectSatellite }),
            (12,  153) => Ok(Usage::Consumer { usage: Consumer::MediaSelectSecurity }),
            (12,  154) => Ok(Usage::Consumer { usage: Consumer::MediaSelectHome }),
            (12,  155) => Ok(Usage::Consumer { usage: Consumer::MediaSelectCall }),
            (12,  156) => Ok(Usage::Consumer { usage: Consumer::ChannelIncrement }),
            (12,  157) => Ok(Usage::Consumer { usage: Consumer::ChannelDecrement }),
            (12,  158) => Ok(Usage::Consumer { usage: Consumer::MediaSelectSAP }),
            (12,  160) => Ok(Usage::Consumer { usage: Consumer::VCRPlus }),
            (12,  161) => Ok(Usage::Consumer { usage: Consumer::Once }),
            (12,  162) => Ok(Usage::Consumer { usage: Consumer::Daily }),
            (12,  163) => Ok(Usage::Consumer { usage: Consumer::Weekly }),
            (12,  164) => Ok(Usage::Consumer { usage: Consumer::Monthly }),
            (12,  176) => Ok(Usage::Consumer { usage: Consumer::Play }),
            (12,  177) => Ok(Usage::Consumer { usage: Consumer::Pause }),
            (12,  178) => Ok(Usage::Consumer { usage: Consumer::Record }),
            (12,  179) => Ok(Usage::Consumer { usage: Consumer::FastForward }),
            (12,  180) => Ok(Usage::Consumer { usage: Consumer::Rewind }),
            (12,  181) => Ok(Usage::Consumer { usage: Consumer::ScanNextTrack }),
            (12,  182) => Ok(Usage::Consumer { usage: Consumer::ScanPreviousTrack }),
            (12,  183) => Ok(Usage::Consumer { usage: Consumer::Stop }),
            (12,  184) => Ok(Usage::Consumer { usage: Consumer::Eject }),
            (12,  185) => Ok(Usage::Consumer { usage: Consumer::RandomPlay }),
            (12,  186) => Ok(Usage::Consumer { usage: Consumer::SelectDisc }),
            (12,  187) => Ok(Usage::Consumer { usage: Consumer::EnterDisc }),
            (12,  188) => Ok(Usage::Consumer { usage: Consumer::Repeat }),
            (12,  189) => Ok(Usage::Consumer { usage: Consumer::Tracking }),
            (12,  190) => Ok(Usage::Consumer { usage: Consumer::TrackNormal }),
            (12,  191) => Ok(Usage::Consumer { usage: Consumer::SlowTracking }),
            (12,  192) => Ok(Usage::Consumer { usage: Consumer::FrameForward }),
            (12,  193) => Ok(Usage::Consumer { usage: Consumer::FrameBack }),
            (12,  194) => Ok(Usage::Consumer { usage: Consumer::Mark }),
            (12,  195) => Ok(Usage::Consumer { usage: Consumer::ClearMark }),
            (12,  196) => Ok(Usage::Consumer { usage: Consumer::RepeatFromMark }),
            (12,  197) => Ok(Usage::Consumer { usage: Consumer::ReturnToMark }),
            (12,  198) => Ok(Usage::Consumer { usage: Consumer::SearchMarkForward }),
            (12,  199) => Ok(Usage::Consumer { usage: Consumer::SearchMarkBackwards }),
            (12,  200) => Ok(Usage::Consumer { usage: Consumer::CounterReset }),
            (12,  201) => Ok(Usage::Consumer { usage: Consumer::ShowCounter }),
            (12,  202) => Ok(Usage::Consumer { usage: Consumer::TrackingIncrement }),
            (12,  203) => Ok(Usage::Consumer { usage: Consumer::TrackingDecrement }),
            (12,  204) => Ok(Usage::Consumer { usage: Consumer::StopEject }),
            (12,  205) => Ok(Usage::Consumer { usage: Consumer::PlayPause }),
            (12,  206) => Ok(Usage::Consumer { usage: Consumer::PlaySkip }),
            (12,  207) => Ok(Usage::Consumer { usage: Consumer::VoiceCommand }),
            (12,  208) => Ok(Usage::Consumer { usage: Consumer::InvokeCaptureInterface }),
            (12,  209) => Ok(Usage::Consumer { usage: Consumer::StartorStopGameRecording }),
            (12,  210) => Ok(Usage::Consumer { usage: Consumer::HistoricalGameCapture }),
            (12,  211) => Ok(Usage::Consumer { usage: Consumer::CaptureGameScreenshot }),
            (12,  212) => Ok(Usage::Consumer { usage: Consumer::ShoworHideRecordingIndicator }),
            (12,  213) => Ok(Usage::Consumer { usage: Consumer::StartorStopMicrophoneCapture }),
            (12,  214) => Ok(Usage::Consumer { usage: Consumer::StartorStopCameraCapture }),
            (12,  215) => Ok(Usage::Consumer { usage: Consumer::StartorStopGameBroadcast }),
            (12,  216) => Ok(Usage::Consumer { usage: Consumer::StartorStopVoiceDictationSession }),
            (12,  217) => Ok(Usage::Consumer { usage: Consumer::InvokeDismissEmojiPicker }),
            (12,  224) => Ok(Usage::Consumer { usage: Consumer::Volume }),
            (12,  225) => Ok(Usage::Consumer { usage: Consumer::Balance }),
            (12,  226) => Ok(Usage::Consumer { usage: Consumer::Mute }),
            (12,  227) => Ok(Usage::Consumer { usage: Consumer::Bass }),
            (12,  228) => Ok(Usage::Consumer { usage: Consumer::Treble }),
            (12,  229) => Ok(Usage::Consumer { usage: Consumer::BassBoost }),
            (12,  230) => Ok(Usage::Consumer { usage: Consumer::SurroundMode }),
            (12,  231) => Ok(Usage::Consumer { usage: Consumer::Loudness }),
            (12,  232) => Ok(Usage::Consumer { usage: Consumer::MPX }),
            (12,  233) => Ok(Usage::Consumer { usage: Consumer::VolumeIncrement }),
            (12,  234) => Ok(Usage::Consumer { usage: Consumer::VolumeDecrement }),
            (12,  240) => Ok(Usage::Consumer { usage: Consumer::SpeedSelect }),
            (12,  241) => Ok(Usage::Consumer { usage: Consumer::PlaybackSpeed }),
            (12,  242) => Ok(Usage::Consumer { usage: Consumer::StandardPlay }),
            (12,  243) => Ok(Usage::Consumer { usage: Consumer::LongPlay }),
            (12,  244) => Ok(Usage::Consumer { usage: Consumer::ExtendedPlay }),
            (12,  245) => Ok(Usage::Consumer { usage: Consumer::Slow }),
            (12,  256) => Ok(Usage::Consumer { usage: Consumer::FanEnable }),
            (12,  257) => Ok(Usage::Consumer { usage: Consumer::FanSpeed }),
            (12,  258) => Ok(Usage::Consumer { usage: Consumer::LightEnable }),
            (12,  259) => Ok(Usage::Consumer { usage: Consumer::LightIlluminationLevel }),
            (12,  260) => Ok(Usage::Consumer { usage: Consumer::ClimateControlEnable }),
            (12,  261) => Ok(Usage::Consumer { usage: Consumer::RoomTemperature }),
            (12,  262) => Ok(Usage::Consumer { usage: Consumer::SecurityEnable }),
            (12,  263) => Ok(Usage::Consumer { usage: Consumer::FireAlarm }),
            (12,  264) => Ok(Usage::Consumer { usage: Consumer::PoliceAlarm }),
            (12,  265) => Ok(Usage::Consumer { usage: Consumer::Proximity }),
            (12,  266) => Ok(Usage::Consumer { usage: Consumer::Motion }),
            (12,  267) => Ok(Usage::Consumer { usage: Consumer::DuressAlarm }),
            (12,  268) => Ok(Usage::Consumer { usage: Consumer::HoldupAlarm }),
            (12,  269) => Ok(Usage::Consumer { usage: Consumer::MedicalAlarm }),
            (12,  336) => Ok(Usage::Consumer { usage: Consumer::BalanceRight }),
            (12,  337) => Ok(Usage::Consumer { usage: Consumer::BalanceLeft }),
            (12,  338) => Ok(Usage::Consumer { usage: Consumer::BassIncrement }),
            (12,  339) => Ok(Usage::Consumer { usage: Consumer::BassDecrement }),
            (12,  340) => Ok(Usage::Consumer { usage: Consumer::TrebleIncrement }),
            (12,  341) => Ok(Usage::Consumer { usage: Consumer::TrebleDecrement }),
            (12,  352) => Ok(Usage::Consumer { usage: Consumer::SpeakerSystem }),
            (12,  353) => Ok(Usage::Consumer { usage: Consumer::ChannelLeft }),
            (12,  354) => Ok(Usage::Consumer { usage: Consumer::ChannelRight }),
            (12,  355) => Ok(Usage::Consumer { usage: Consumer::ChannelCenter }),
            (12,  356) => Ok(Usage::Consumer { usage: Consumer::ChannelFront }),
            (12,  357) => Ok(Usage::Consumer { usage: Consumer::ChannelCenterFront }),
            (12,  358) => Ok(Usage::Consumer { usage: Consumer::ChannelSide }),
            (12,  359) => Ok(Usage::Consumer { usage: Consumer::ChannelSurround }),
            (12,  360) => Ok(Usage::Consumer { usage: Consumer::ChannelLowFrequencyEnhancement }),
            (12,  361) => Ok(Usage::Consumer { usage: Consumer::ChannelTop }),
            (12,  362) => Ok(Usage::Consumer { usage: Consumer::ChannelUnknown }),
            (12,  368) => Ok(Usage::Consumer { usage: Consumer::Subchannel }),
            (12,  369) => Ok(Usage::Consumer { usage: Consumer::SubchannelIncrement }),
            (12,  370) => Ok(Usage::Consumer { usage: Consumer::SubchannelDecrement }),
            (12,  371) => Ok(Usage::Consumer { usage: Consumer::AlternateAudioIncrement }),
            (12,  372) => Ok(Usage::Consumer { usage: Consumer::AlternateAudioDecrement }),
            (12,  384) => Ok(Usage::Consumer { usage: Consumer::ApplicationLaunchButtons }),
            (12,  385) => Ok(Usage::Consumer { usage: Consumer::ALLaunchButtonConfigurationTool }),
            (12,  386) => Ok(Usage::Consumer { usage: Consumer::ALProgrammableButtonConfiguration }),
            (12,  387) => Ok(Usage::Consumer { usage: Consumer::ALConsumerControlConfiguration }),
            (12,  388) => Ok(Usage::Consumer { usage: Consumer::ALWordProcessor }),
            (12,  389) => Ok(Usage::Consumer { usage: Consumer::ALTextEditor }),
            (12,  390) => Ok(Usage::Consumer { usage: Consumer::ALSpreadsheet }),
            (12,  391) => Ok(Usage::Consumer { usage: Consumer::ALGraphicsEditor }),
            (12,  392) => Ok(Usage::Consumer { usage: Consumer::ALPresentationApp }),
            (12,  393) => Ok(Usage::Consumer { usage: Consumer::ALDatabaseApp }),
            (12,  394) => Ok(Usage::Consumer { usage: Consumer::ALEmailReader }),
            (12,  395) => Ok(Usage::Consumer { usage: Consumer::ALNewsreader }),
            (12,  396) => Ok(Usage::Consumer { usage: Consumer::ALVoicemail }),
            (12,  397) => Ok(Usage::Consumer { usage: Consumer::ALContactsAddressBook }),
            (12,  398) => Ok(Usage::Consumer { usage: Consumer::ALCalendarSchedule }),
            (12,  399) => Ok(Usage::Consumer { usage: Consumer::ALTaskProjectManager }),
            (12,  400) => Ok(Usage::Consumer { usage: Consumer::ALLogJournalTimecard }),
            (12,  401) => Ok(Usage::Consumer { usage: Consumer::ALCheckbookFinance }),
            (12,  402) => Ok(Usage::Consumer { usage: Consumer::ALCalculator }),
            (12,  403) => Ok(Usage::Consumer { usage: Consumer::ALAVCapturePlayback }),
            (12,  404) => Ok(Usage::Consumer { usage: Consumer::ALLocalMachineBrowser }),
            (12,  405) => Ok(Usage::Consumer { usage: Consumer::ALLANWANBrowser }),
            (12,  406) => Ok(Usage::Consumer { usage: Consumer::ALInternetBrowser }),
            (12,  407) => Ok(Usage::Consumer { usage: Consumer::ALRemoteNetworkingISPConnect }),
            (12,  408) => Ok(Usage::Consumer { usage: Consumer::ALNetworkConference }),
            (12,  409) => Ok(Usage::Consumer { usage: Consumer::ALNetworkChat }),
            (12,  410) => Ok(Usage::Consumer { usage: Consumer::ALTelephonyDialer }),
            (12,  411) => Ok(Usage::Consumer { usage: Consumer::ALLogon }),
            (12,  412) => Ok(Usage::Consumer { usage: Consumer::ALLogoff }),
            (12,  413) => Ok(Usage::Consumer { usage: Consumer::ALLogonLogoff }),
            (12,  414) => Ok(Usage::Consumer { usage: Consumer::ALTerminalLockScreensaver }),
            (12,  415) => Ok(Usage::Consumer { usage: Consumer::ALControlPanel }),
            (12,  416) => Ok(Usage::Consumer { usage: Consumer::ALCommandLineProcessorRun }),
            (12,  417) => Ok(Usage::Consumer { usage: Consumer::ALProcessTaskManager }),
            (12,  418) => Ok(Usage::Consumer { usage: Consumer::ALSelectTaskApplication }),
            (12,  419) => Ok(Usage::Consumer { usage: Consumer::ALNextTaskApplication }),
            (12,  420) => Ok(Usage::Consumer { usage: Consumer::ALPreviousTaskApplication }),
            (12,  421) => Ok(Usage::Consumer { usage: Consumer::ALPreemptiveHaltTaskApplication }),
            (12,  422) => Ok(Usage::Consumer { usage: Consumer::ALIntegratedHelpCenter }),
            (12,  423) => Ok(Usage::Consumer { usage: Consumer::ALDocuments }),
            (12,  424) => Ok(Usage::Consumer { usage: Consumer::ALThesaurus }),
            (12,  425) => Ok(Usage::Consumer { usage: Consumer::ALDictionary }),
            (12,  426) => Ok(Usage::Consumer { usage: Consumer::ALDesktop }),
            (12,  427) => Ok(Usage::Consumer { usage: Consumer::ALSpellCheck }),
            (12,  428) => Ok(Usage::Consumer { usage: Consumer::ALGrammarCheck }),
            (12,  429) => Ok(Usage::Consumer { usage: Consumer::ALWirelessStatus }),
            (12,  430) => Ok(Usage::Consumer { usage: Consumer::ALKeyboardLayout }),
            (12,  431) => Ok(Usage::Consumer { usage: Consumer::ALVirusProtection }),
            (12,  432) => Ok(Usage::Consumer { usage: Consumer::ALEncryption }),
            (12,  433) => Ok(Usage::Consumer { usage: Consumer::ALScreenSaver }),
            (12,  434) => Ok(Usage::Consumer { usage: Consumer::ALAlarms }),
            (12,  435) => Ok(Usage::Consumer { usage: Consumer::ALClock }),
            (12,  436) => Ok(Usage::Consumer { usage: Consumer::ALFileBrowser }),
            (12,  437) => Ok(Usage::Consumer { usage: Consumer::ALPowerStatus }),
            (12,  438) => Ok(Usage::Consumer { usage: Consumer::ALImageBrowser }),
            (12,  439) => Ok(Usage::Consumer { usage: Consumer::ALAudioBrowser }),
            (12,  440) => Ok(Usage::Consumer { usage: Consumer::ALMovieBrowser }),
            (12,  441) => Ok(Usage::Consumer { usage: Consumer::ALDigitalRightsManager }),
            (12,  442) => Ok(Usage::Consumer { usage: Consumer::ALDigitalWallet }),
            (12,  444) => Ok(Usage::Consumer { usage: Consumer::ALInstantMessaging }),
            (12,  445) => Ok(Usage::Consumer { usage: Consumer::ALOEMFeaturesTipsTutorialBrowser }),
            (12,  446) => Ok(Usage::Consumer { usage: Consumer::ALOEMHelp }),
            (12,  447) => Ok(Usage::Consumer { usage: Consumer::ALOnlineCommunity }),
            (12,  448) => Ok(Usage::Consumer { usage: Consumer::ALEntertainmentContentBrowser }),
            (12,  449) => Ok(Usage::Consumer { usage: Consumer::ALOnlineShoppingBrowser }),
            (12,  450) => Ok(Usage::Consumer { usage: Consumer::ALSmartCardInformationHelp }),
            (12,  451) => Ok(Usage::Consumer { usage: Consumer::ALMarketMonitorFinanceBrowser }),
            (12,  452) => Ok(Usage::Consumer { usage: Consumer::ALCustomizedCorporateNewsBrowser }),
            (12,  453) => Ok(Usage::Consumer { usage: Consumer::ALOnlineActivityBrowser }),
            (12,  454) => Ok(Usage::Consumer { usage: Consumer::ALResearchSearchBrowser }),
            (12,  455) => Ok(Usage::Consumer { usage: Consumer::ALAudioPlayer }),
            (12,  456) => Ok(Usage::Consumer { usage: Consumer::ALMessageStatus }),
            (12,  457) => Ok(Usage::Consumer { usage: Consumer::ALContactSync }),
            (12,  458) => Ok(Usage::Consumer { usage: Consumer::ALNavigation }),
            (12,  459) => Ok(Usage::Consumer { usage: Consumer::ALContextawareDesktopAssistant }),
            (12,  512) => Ok(Usage::Consumer { usage: Consumer::GenericGUIApplicationControls }),
            (12,  513) => Ok(Usage::Consumer { usage: Consumer::ACNew }),
            (12,  514) => Ok(Usage::Consumer { usage: Consumer::ACOpen }),
            (12,  515) => Ok(Usage::Consumer { usage: Consumer::ACClose }),
            (12,  516) => Ok(Usage::Consumer { usage: Consumer::ACExit }),
            (12,  517) => Ok(Usage::Consumer { usage: Consumer::ACMaximize }),
            (12,  518) => Ok(Usage::Consumer { usage: Consumer::ACMinimize }),
            (12,  519) => Ok(Usage::Consumer { usage: Consumer::ACSave }),
            (12,  520) => Ok(Usage::Consumer { usage: Consumer::ACPrint }),
            (12,  521) => Ok(Usage::Consumer { usage: Consumer::ACProperties }),
            (12,  538) => Ok(Usage::Consumer { usage: Consumer::ACUndo }),
            (12,  539) => Ok(Usage::Consumer { usage: Consumer::ACCopy }),
            (12,  540) => Ok(Usage::Consumer { usage: Consumer::ACCut }),
            (12,  541) => Ok(Usage::Consumer { usage: Consumer::ACPaste }),
            (12,  542) => Ok(Usage::Consumer { usage: Consumer::ACSelectAll }),
            (12,  543) => Ok(Usage::Consumer { usage: Consumer::ACFind }),
            (12,  544) => Ok(Usage::Consumer { usage: Consumer::ACFindandReplace }),
            (12,  545) => Ok(Usage::Consumer { usage: Consumer::ACSearch }),
            (12,  546) => Ok(Usage::Consumer { usage: Consumer::ACGoTo }),
            (12,  547) => Ok(Usage::Consumer { usage: Consumer::ACHome }),
            (12,  548) => Ok(Usage::Consumer { usage: Consumer::ACBack }),
            (12,  549) => Ok(Usage::Consumer { usage: Consumer::ACForward }),
            (12,  550) => Ok(Usage::Consumer { usage: Consumer::ACStop }),
            (12,  551) => Ok(Usage::Consumer { usage: Consumer::ACRefresh }),
            (12,  552) => Ok(Usage::Consumer { usage: Consumer::ACPreviousLink }),
            (12,  553) => Ok(Usage::Consumer { usage: Consumer::ACNextLink }),
            (12,  554) => Ok(Usage::Consumer { usage: Consumer::ACBookmarks }),
            (12,  555) => Ok(Usage::Consumer { usage: Consumer::ACHistory }),
            (12,  556) => Ok(Usage::Consumer { usage: Consumer::ACSubscriptions }),
            (12,  557) => Ok(Usage::Consumer { usage: Consumer::ACZoomIn }),
            (12,  558) => Ok(Usage::Consumer { usage: Consumer::ACZoomOut }),
            (12,  559) => Ok(Usage::Consumer { usage: Consumer::ACZoom }),
            (12,  560) => Ok(Usage::Consumer { usage: Consumer::ACFullScreenView }),
            (12,  561) => Ok(Usage::Consumer { usage: Consumer::ACNormalView }),
            (12,  562) => Ok(Usage::Consumer { usage: Consumer::ACViewToggle }),
            (12,  563) => Ok(Usage::Consumer { usage: Consumer::ACScrollUp }),
            (12,  564) => Ok(Usage::Consumer { usage: Consumer::ACScrollDown }),
            (12,  565) => Ok(Usage::Consumer { usage: Consumer::ACScroll }),
            (12,  566) => Ok(Usage::Consumer { usage: Consumer::ACPanLeft }),
            (12,  567) => Ok(Usage::Consumer { usage: Consumer::ACPanRight }),
            (12,  568) => Ok(Usage::Consumer { usage: Consumer::ACPan }),
            (12,  569) => Ok(Usage::Consumer { usage: Consumer::ACNewWindow }),
            (12,  570) => Ok(Usage::Consumer { usage: Consumer::ACTileHorizontally }),
            (12,  571) => Ok(Usage::Consumer { usage: Consumer::ACTileVertically }),
            (12,  572) => Ok(Usage::Consumer { usage: Consumer::ACFormat }),
            (12,  573) => Ok(Usage::Consumer { usage: Consumer::ACEdit }),
            (12,  574) => Ok(Usage::Consumer { usage: Consumer::ACBold }),
            (12,  575) => Ok(Usage::Consumer { usage: Consumer::ACItalics }),
            (12,  576) => Ok(Usage::Consumer { usage: Consumer::ACUnderline }),
            (12,  577) => Ok(Usage::Consumer { usage: Consumer::ACStrikethrough }),
            (12,  578) => Ok(Usage::Consumer { usage: Consumer::ACSubscript }),
            (12,  579) => Ok(Usage::Consumer { usage: Consumer::ACSuperscript }),
            (12,  580) => Ok(Usage::Consumer { usage: Consumer::ACAllCaps }),
            (12,  581) => Ok(Usage::Consumer { usage: Consumer::ACRotate }),
            (12,  582) => Ok(Usage::Consumer { usage: Consumer::ACResize }),
            (12,  583) => Ok(Usage::Consumer { usage: Consumer::ACFlipHorizontal }),
            (12,  584) => Ok(Usage::Consumer { usage: Consumer::ACFlipVertical }),
            (12,  585) => Ok(Usage::Consumer { usage: Consumer::ACMirrorHorizontal }),
            (12,  586) => Ok(Usage::Consumer { usage: Consumer::ACMirrorVertical }),
            (12,  587) => Ok(Usage::Consumer { usage: Consumer::ACFontSelect }),
            (12,  588) => Ok(Usage::Consumer { usage: Consumer::ACFontColor }),
            (12,  589) => Ok(Usage::Consumer { usage: Consumer::ACFontSize }),
            (12,  590) => Ok(Usage::Consumer { usage: Consumer::ACJustifyLeft }),
            (12,  591) => Ok(Usage::Consumer { usage: Consumer::ACJustifyCenterH }),
            (12,  592) => Ok(Usage::Consumer { usage: Consumer::ACJustifyRight }),
            (12,  593) => Ok(Usage::Consumer { usage: Consumer::ACJustifyBlockH }),
            (12,  594) => Ok(Usage::Consumer { usage: Consumer::ACJustifyTop }),
            (12,  595) => Ok(Usage::Consumer { usage: Consumer::ACJustifyCenterV }),
            (12,  596) => Ok(Usage::Consumer { usage: Consumer::ACJustifyBottom }),
            (12,  597) => Ok(Usage::Consumer { usage: Consumer::ACJustifyBlockV }),
            (12,  598) => Ok(Usage::Consumer { usage: Consumer::ACIndentDecrease }),
            (12,  599) => Ok(Usage::Consumer { usage: Consumer::ACIndentIncrease }),
            (12,  600) => Ok(Usage::Consumer { usage: Consumer::ACNumberedList }),
            (12,  601) => Ok(Usage::Consumer { usage: Consumer::ACRestartNumbering }),
            (12,  602) => Ok(Usage::Consumer { usage: Consumer::ACBulletedList }),
            (12,  603) => Ok(Usage::Consumer { usage: Consumer::ACPromote }),
            (12,  604) => Ok(Usage::Consumer { usage: Consumer::ACDemote }),
            (12,  605) => Ok(Usage::Consumer { usage: Consumer::ACYes }),
            (12,  606) => Ok(Usage::Consumer { usage: Consumer::ACNo }),
            (12,  607) => Ok(Usage::Consumer { usage: Consumer::ACCancel }),
            (12,  608) => Ok(Usage::Consumer { usage: Consumer::ACCatalog }),
            (12,  609) => Ok(Usage::Consumer { usage: Consumer::ACBuyCheckout }),
            (12,  610) => Ok(Usage::Consumer { usage: Consumer::ACAddtoCart }),
            (12,  611) => Ok(Usage::Consumer { usage: Consumer::ACExpand }),
            (12,  612) => Ok(Usage::Consumer { usage: Consumer::ACExpandAll }),
            (12,  613) => Ok(Usage::Consumer { usage: Consumer::ACCollapse }),
            (12,  614) => Ok(Usage::Consumer { usage: Consumer::ACCollapseAll }),
            (12,  615) => Ok(Usage::Consumer { usage: Consumer::ACPrintPreview }),
            (12,  616) => Ok(Usage::Consumer { usage: Consumer::ACPasteSpecial }),
            (12,  617) => Ok(Usage::Consumer { usage: Consumer::ACInsertMode }),
            (12,  618) => Ok(Usage::Consumer { usage: Consumer::ACDelete }),
            (12,  619) => Ok(Usage::Consumer { usage: Consumer::ACLock }),
            (12,  620) => Ok(Usage::Consumer { usage: Consumer::ACUnlock }),
            (12,  621) => Ok(Usage::Consumer { usage: Consumer::ACProtect }),
            (12,  622) => Ok(Usage::Consumer { usage: Consumer::ACUnprotect }),
            (12,  623) => Ok(Usage::Consumer { usage: Consumer::ACAttachComment }),
            (12,  624) => Ok(Usage::Consumer { usage: Consumer::ACDeleteComment }),
            (12,  625) => Ok(Usage::Consumer { usage: Consumer::ACViewComment }),
            (12,  626) => Ok(Usage::Consumer { usage: Consumer::ACSelectWord }),
            (12,  627) => Ok(Usage::Consumer { usage: Consumer::ACSelectSentence }),
            (12,  628) => Ok(Usage::Consumer { usage: Consumer::ACSelectParagraph }),
            (12,  629) => Ok(Usage::Consumer { usage: Consumer::ACSelectColumn }),
            (12,  630) => Ok(Usage::Consumer { usage: Consumer::ACSelectRow }),
            (12,  631) => Ok(Usage::Consumer { usage: Consumer::ACSelectTable }),
            (12,  632) => Ok(Usage::Consumer { usage: Consumer::ACSelectObject }),
            (12,  633) => Ok(Usage::Consumer { usage: Consumer::ACRedoRepeat }),
            (12,  634) => Ok(Usage::Consumer { usage: Consumer::ACSort }),
            (12,  635) => Ok(Usage::Consumer { usage: Consumer::ACSortAscending }),
            (12,  636) => Ok(Usage::Consumer { usage: Consumer::ACSortDescending }),
            (12,  637) => Ok(Usage::Consumer { usage: Consumer::ACFilter }),
            (12,  638) => Ok(Usage::Consumer { usage: Consumer::ACSetClock }),
            (12,  639) => Ok(Usage::Consumer { usage: Consumer::ACViewClock }),
            (12,  640) => Ok(Usage::Consumer { usage: Consumer::ACSelectTimeZone }),
            (12,  641) => Ok(Usage::Consumer { usage: Consumer::ACEditTimeZones }),
            (12,  642) => Ok(Usage::Consumer { usage: Consumer::ACSetAlarm }),
            (12,  643) => Ok(Usage::Consumer { usage: Consumer::ACClearAlarm }),
            (12,  644) => Ok(Usage::Consumer { usage: Consumer::ACSnoozeAlarm }),
            (12,  645) => Ok(Usage::Consumer { usage: Consumer::ACResetAlarm }),
            (12,  646) => Ok(Usage::Consumer { usage: Consumer::ACSynchronize }),
            (12,  647) => Ok(Usage::Consumer { usage: Consumer::ACSendReceive }),
            (12,  648) => Ok(Usage::Consumer { usage: Consumer::ACSendTo }),
            (12,  649) => Ok(Usage::Consumer { usage: Consumer::ACReply }),
            (12,  650) => Ok(Usage::Consumer { usage: Consumer::ACReplyAll }),
            (12,  651) => Ok(Usage::Consumer { usage: Consumer::ACForwardMsg }),
            (12,  652) => Ok(Usage::Consumer { usage: Consumer::ACSend }),
            (12,  653) => Ok(Usage::Consumer { usage: Consumer::ACAttachFile }),
            (12,  654) => Ok(Usage::Consumer { usage: Consumer::ACUpload }),
            (12,  655) => Ok(Usage::Consumer { usage: Consumer::ACDownloadSaveTargetAs }),
            (12,  656) => Ok(Usage::Consumer { usage: Consumer::ACSetBorders }),
            (12,  657) => Ok(Usage::Consumer { usage: Consumer::ACInsertRow }),
            (12,  658) => Ok(Usage::Consumer { usage: Consumer::ACInsertColumn }),
            (12,  659) => Ok(Usage::Consumer { usage: Consumer::ACInsertFile }),
            (12,  660) => Ok(Usage::Consumer { usage: Consumer::ACInsertPicture }),
            (12,  661) => Ok(Usage::Consumer { usage: Consumer::ACInsertObject }),
            (12,  662) => Ok(Usage::Consumer { usage: Consumer::ACInsertSymbol }),
            (12,  663) => Ok(Usage::Consumer { usage: Consumer::ACSaveandClose }),
            (12,  664) => Ok(Usage::Consumer { usage: Consumer::ACRename }),
            (12,  665) => Ok(Usage::Consumer { usage: Consumer::ACMerge }),
            (12,  666) => Ok(Usage::Consumer { usage: Consumer::ACSplit }),
            (12,  667) => Ok(Usage::Consumer { usage: Consumer::ACDisributeHorizontally }),
            (12,  668) => Ok(Usage::Consumer { usage: Consumer::ACDistributeVertically }),
            (12,  669) => Ok(Usage::Consumer { usage: Consumer::ACNextKeyboardLayoutSelect }),
            (12,  670) => Ok(Usage::Consumer { usage: Consumer::ACNavigationGuidance }),
            (12,  671) => Ok(Usage::Consumer { usage: Consumer::ACDesktopShowAllWindows }),
            (12,  672) => Ok(Usage::Consumer { usage: Consumer::ACSoftKeyLeft }),
            (12,  673) => Ok(Usage::Consumer { usage: Consumer::ACSoftKeyRight }),
            (12,  674) => Ok(Usage::Consumer { usage: Consumer::ACDesktopShowAllApplications }),
            (12,  688) => Ok(Usage::Consumer { usage: Consumer::ACIdleKeepAlive }),
            (12,  704) => Ok(Usage::Consumer { usage: Consumer::ExtendedKeyboardAttributesCollection }),
            (12,  705) => Ok(Usage::Consumer { usage: Consumer::KeyboardFormFactor }),
            (12,  706) => Ok(Usage::Consumer { usage: Consumer::KeyboardKeyType }),
            (12,  707) => Ok(Usage::Consumer { usage: Consumer::KeyboardPhysicalLayout }),
            (12,  708) => Ok(Usage::Consumer { usage: Consumer::VendorSpecificKeyboardPhysicalLayout }),
            (12,  709) => Ok(Usage::Consumer { usage: Consumer::KeyboardIETFLanguageTagIndex }),
            (12,  710) => Ok(Usage::Consumer { usage: Consumer::ImplementedKeyboardInputAssistControls }),
            (12,  711) => Ok(Usage::Consumer { usage: Consumer::KeyboardInputAssistPrevious }),
            (12,  712) => Ok(Usage::Consumer { usage: Consumer::KeyboardInputAssistNext }),
            (12,  713) => Ok(Usage::Consumer { usage: Consumer::KeyboardInputAssistPreviousGroup }),
            (12,  714) => Ok(Usage::Consumer { usage: Consumer::KeyboardInputAssistNextGroup }),
            (12,  715) => Ok(Usage::Consumer { usage: Consumer::KeyboardInputAssistAccept }),
            (12,  716) => Ok(Usage::Consumer { usage: Consumer::KeyboardInputAssistCancel }),
            (12,  720) => Ok(Usage::Consumer { usage: Consumer::PrivacyScreenToggle }),
            (12,  721) => Ok(Usage::Consumer { usage: Consumer::PrivacyScreenLevelDecrement }),
            (12,  722) => Ok(Usage::Consumer { usage: Consumer::PrivacyScreenLevelIncrement }),
            (12,  723) => Ok(Usage::Consumer { usage: Consumer::PrivacyScreenLevelMinimum }),
            (12,  724) => Ok(Usage::Consumer { usage: Consumer::PrivacyScreenLevelMaximum }),
            (12,  1280) => Ok(Usage::Consumer { usage: Consumer::ContactEdited }),
            (12,  1281) => Ok(Usage::Consumer { usage: Consumer::ContactAdded }),
            (12,  1282) => Ok(Usage::Consumer { usage: Consumer::ContactRecordActive }),
            (12,  1283) => Ok(Usage::Consumer { usage: Consumer::ContactIndex }),
            (12,  1284) => Ok(Usage::Consumer { usage: Consumer::ContactNickname }),
            (12,  1285) => Ok(Usage::Consumer { usage: Consumer::ContactFirstName }),
            (12,  1286) => Ok(Usage::Consumer { usage: Consumer::ContactLastName }),
            (12,  1287) => Ok(Usage::Consumer { usage: Consumer::ContactFullName }),
            (12,  1288) => Ok(Usage::Consumer { usage: Consumer::ContactPhoneNumberPersonal }),
            (12,  1289) => Ok(Usage::Consumer { usage: Consumer::ContactPhoneNumberBusiness }),
            (12,  1290) => Ok(Usage::Consumer { usage: Consumer::ContactPhoneNumberMobile }),
            (12,  1291) => Ok(Usage::Consumer { usage: Consumer::ContactPhoneNumberPager }),
            (12,  1292) => Ok(Usage::Consumer { usage: Consumer::ContactPhoneNumberFax }),
            (12,  1293) => Ok(Usage::Consumer { usage: Consumer::ContactPhoneNumberOther }),
            (12,  1294) => Ok(Usage::Consumer { usage: Consumer::ContactEmailPersonal }),
            (12,  1295) => Ok(Usage::Consumer { usage: Consumer::ContactEmailBusiness }),
            (12,  1296) => Ok(Usage::Consumer { usage: Consumer::ContactEmailOther }),
            (12,  1297) => Ok(Usage::Consumer { usage: Consumer::ContactEmailMain }),
            (12,  1298) => Ok(Usage::Consumer { usage: Consumer::ContactSpeedDialNumber }),
            (12,  1299) => Ok(Usage::Consumer { usage: Consumer::ContactStatusFlag }),
            (12,  1300) => Ok(Usage::Consumer { usage: Consumer::ContactMisc }),
            (13,  1) => Ok(Usage::Digitizers { usage: Digitizers::Digitizer }),
            (13,  2) => Ok(Usage::Digitizers { usage: Digitizers::Pen }),
            (13,  3) => Ok(Usage::Digitizers { usage: Digitizers::LightPen }),
            (13,  4) => Ok(Usage::Digitizers { usage: Digitizers::TouchScreen }),
            (13,  5) => Ok(Usage::Digitizers { usage: Digitizers::TouchPad }),
            (13,  6) => Ok(Usage::Digitizers { usage: Digitizers::Whiteboard }),
            (13,  7) => Ok(Usage::Digitizers { usage: Digitizers::CoordinateMeasuringMachine }),
            (13,  8) => Ok(Usage::Digitizers { usage: Digitizers::ThreeDDigitizer }),
            (13,  9) => Ok(Usage::Digitizers { usage: Digitizers::StereoPlotter }),
            (13,  10) => Ok(Usage::Digitizers { usage: Digitizers::ArticulatedArm }),
            (13,  11) => Ok(Usage::Digitizers { usage: Digitizers::Armature }),
            (13,  12) => Ok(Usage::Digitizers { usage: Digitizers::MultiplePointDigitizer }),
            (13,  13) => Ok(Usage::Digitizers { usage: Digitizers::FreeSpaceWand }),
            (13,  14) => Ok(Usage::Digitizers { usage: Digitizers::DeviceConfiguration }),
            (13,  15) => Ok(Usage::Digitizers { usage: Digitizers::CapacitiveHeatMapDigitizer }),
            (13,  32) => Ok(Usage::Digitizers { usage: Digitizers::Stylus }),
            (13,  33) => Ok(Usage::Digitizers { usage: Digitizers::Puck }),
            (13,  34) => Ok(Usage::Digitizers { usage: Digitizers::Finger }),
            (13,  35) => Ok(Usage::Digitizers { usage: Digitizers::Devicesettings }),
            (13,  36) => Ok(Usage::Digitizers { usage: Digitizers::CharacterGesture }),
            (13,  48) => Ok(Usage::Digitizers { usage: Digitizers::TipPressure }),
            (13,  49) => Ok(Usage::Digitizers { usage: Digitizers::BarrelPressure }),
            (13,  50) => Ok(Usage::Digitizers { usage: Digitizers::InRange }),
            (13,  51) => Ok(Usage::Digitizers { usage: Digitizers::Touch }),
            (13,  52) => Ok(Usage::Digitizers { usage: Digitizers::Untouch }),
            (13,  53) => Ok(Usage::Digitizers { usage: Digitizers::Tap }),
            (13,  54) => Ok(Usage::Digitizers { usage: Digitizers::Quality }),
            (13,  55) => Ok(Usage::Digitizers { usage: Digitizers::DataValid }),
            (13,  56) => Ok(Usage::Digitizers { usage: Digitizers::TransducerIndex }),
            (13,  57) => Ok(Usage::Digitizers { usage: Digitizers::TabletFunctionKeys }),
            (13,  58) => Ok(Usage::Digitizers { usage: Digitizers::ProgramChangeKeys }),
            (13,  59) => Ok(Usage::Digitizers { usage: Digitizers::BatteryStrength }),
            (13,  60) => Ok(Usage::Digitizers { usage: Digitizers::Invert }),
            (13,  61) => Ok(Usage::Digitizers { usage: Digitizers::XTilt }),
            (13,  62) => Ok(Usage::Digitizers { usage: Digitizers::YTilt }),
            (13,  63) => Ok(Usage::Digitizers { usage: Digitizers::Azimuth }),
            (13,  64) => Ok(Usage::Digitizers { usage: Digitizers::Altitude }),
            (13,  65) => Ok(Usage::Digitizers { usage: Digitizers::Twist }),
            (13,  66) => Ok(Usage::Digitizers { usage: Digitizers::TipSwitch }),
            (13,  67) => Ok(Usage::Digitizers { usage: Digitizers::SecondaryTipSwitch }),
            (13,  68) => Ok(Usage::Digitizers { usage: Digitizers::BarrelSwitch }),
            (13,  69) => Ok(Usage::Digitizers { usage: Digitizers::Eraser }),
            (13,  70) => Ok(Usage::Digitizers { usage: Digitizers::TabletPick }),
            (13,  71) => Ok(Usage::Digitizers { usage: Digitizers::TouchValid }),
            (13,  72) => Ok(Usage::Digitizers { usage: Digitizers::Width }),
            (13,  73) => Ok(Usage::Digitizers { usage: Digitizers::Height }),
            (13,  81) => Ok(Usage::Digitizers { usage: Digitizers::ContactIdentifier }),
            (13,  82) => Ok(Usage::Digitizers { usage: Digitizers::DeviceMode }),
            (13,  83) => Ok(Usage::Digitizers { usage: Digitizers::DeviceIdentifier }),
            (13,  84) => Ok(Usage::Digitizers { usage: Digitizers::ContactCount }),
            (13,  85) => Ok(Usage::Digitizers { usage: Digitizers::ContactCountMaximum }),
            (13,  86) => Ok(Usage::Digitizers { usage: Digitizers::ScanTime }),
            (13,  87) => Ok(Usage::Digitizers { usage: Digitizers::SurfaceSwitch }),
            (13,  88) => Ok(Usage::Digitizers { usage: Digitizers::ButtonSwitch }),
            (13,  89) => Ok(Usage::Digitizers { usage: Digitizers::PadType }),
            (13,  90) => Ok(Usage::Digitizers { usage: Digitizers::SecondaryBarrelSwitch }),
            (13,  91) => Ok(Usage::Digitizers { usage: Digitizers::TransducerSerialNumber }),
            (13,  92) => Ok(Usage::Digitizers { usage: Digitizers::PreferredColor }),
            (13,  93) => Ok(Usage::Digitizers { usage: Digitizers::PreferredColorisLocked }),
            (13,  94) => Ok(Usage::Digitizers { usage: Digitizers::PreferredLineWidth }),
            (13,  95) => Ok(Usage::Digitizers { usage: Digitizers::PreferredLineWidthisLocked }),
            (13,  96) => Ok(Usage::Digitizers { usage: Digitizers::LatencyMode }),
            (13,  97) => Ok(Usage::Digitizers { usage: Digitizers::GestureCharacterQuality }),
            (13,  98) => Ok(Usage::Digitizers { usage: Digitizers::CharacterGestureDataLength }),
            (13,  99) => Ok(Usage::Digitizers { usage: Digitizers::CharacterGestureData }),
            (13,  100) => Ok(Usage::Digitizers { usage: Digitizers::GestureCharacterEncoding }),
            (13,  101) => Ok(Usage::Digitizers { usage: Digitizers::UTF8CharacterGestureEncoding }),
            (13,  102) => Ok(Usage::Digitizers { usage: Digitizers::UTF16LittleEndianCharacterGestureEncoding }),
            (13,  103) => Ok(Usage::Digitizers { usage: Digitizers::UTF16BigEndianCharacterGestureEncoding }),
            (13,  104) => Ok(Usage::Digitizers { usage: Digitizers::UTF32LittleEndianCharacterGestureEncoding }),
            (13,  105) => Ok(Usage::Digitizers { usage: Digitizers::UTF32BigEndianCharacterGestureEncoding }),
            (13,  106) => Ok(Usage::Digitizers { usage: Digitizers::CapacitiveHeatMapProtocolVendorID }),
            (13,  107) => Ok(Usage::Digitizers { usage: Digitizers::CapacitiveHeatMapProtocolVersion }),
            (13,  108) => Ok(Usage::Digitizers { usage: Digitizers::CapacitiveHeatMapFrameData }),
            (13,  109) => Ok(Usage::Digitizers { usage: Digitizers::GestureCharacterEnable }),
            (13,  110) => Ok(Usage::Digitizers { usage: Digitizers::TransducerSerialNumberPart2 }),
            (13,  111) => Ok(Usage::Digitizers { usage: Digitizers::NoPreferredColor }),
            (13,  112) => Ok(Usage::Digitizers { usage: Digitizers::PreferredLineStyle }),
            (13,  113) => Ok(Usage::Digitizers { usage: Digitizers::PreferredLineStyleisLocked }),
            (13,  114) => Ok(Usage::Digitizers { usage: Digitizers::Ink }),
            (13,  115) => Ok(Usage::Digitizers { usage: Digitizers::Pencil }),
            (13,  116) => Ok(Usage::Digitizers { usage: Digitizers::Highlighter }),
            (13,  117) => Ok(Usage::Digitizers { usage: Digitizers::ChiselMarker }),
            (13,  118) => Ok(Usage::Digitizers { usage: Digitizers::Brush }),
            (13,  119) => Ok(Usage::Digitizers { usage: Digitizers::NoPreference }),
            (13,  128) => Ok(Usage::Digitizers { usage: Digitizers::DigitizerDiagnostic }),
            (13,  129) => Ok(Usage::Digitizers { usage: Digitizers::DigitizerError }),
            (13,  130) => Ok(Usage::Digitizers { usage: Digitizers::ErrNormalStatus }),
            (13,  131) => Ok(Usage::Digitizers { usage: Digitizers::ErrTransducersExceeded }),
            (13,  132) => Ok(Usage::Digitizers { usage: Digitizers::ErrFullTransFeaturesUnavailable }),
            (13,  133) => Ok(Usage::Digitizers { usage: Digitizers::ErrChargeLow }),
            (13,  144) => Ok(Usage::Digitizers { usage: Digitizers::TransducerSoftwareInfo }),
            (13,  145) => Ok(Usage::Digitizers { usage: Digitizers::TransducerVendorId }),
            (13,  146) => Ok(Usage::Digitizers { usage: Digitizers::TransducerProductId }),
            (13,  147) => Ok(Usage::Digitizers { usage: Digitizers::DeviceSupportedProtocols }),
            (13,  148) => Ok(Usage::Digitizers { usage: Digitizers::TransducerSupportedProtocols }),
            (13,  149) => Ok(Usage::Digitizers { usage: Digitizers::NoProtocol }),
            (13,  150) => Ok(Usage::Digitizers { usage: Digitizers::WacomAESProtocol }),
            (13,  151) => Ok(Usage::Digitizers { usage: Digitizers::USIProtocol }),
            (13,  152) => Ok(Usage::Digitizers { usage: Digitizers::MicrosoftPenProtocol }),
            (13,  160) => Ok(Usage::Digitizers { usage: Digitizers::SupportedReportRates }),
            (13,  161) => Ok(Usage::Digitizers { usage: Digitizers::ReportRate }),
            (13,  162) => Ok(Usage::Digitizers { usage: Digitizers::TransducerConnected }),
            (13,  163) => Ok(Usage::Digitizers { usage: Digitizers::SwitchDisabled }),
            (13,  164) => Ok(Usage::Digitizers { usage: Digitizers::SwitchUnimplemented }),
            (13,  165) => Ok(Usage::Digitizers { usage: Digitizers::TransducerSwitches }),
            (13,  166) => Ok(Usage::Digitizers { usage: Digitizers::TransducerIndexSelector }),
            (13,  176) => Ok(Usage::Digitizers { usage: Digitizers::ButtonPressThreshold }),
            (14,  1) => Ok(Usage::Haptics { usage: Haptics::SimpleHapticController }),
            (14,  16) => Ok(Usage::Haptics { usage: Haptics::WaveformList }),
            (14,  17) => Ok(Usage::Haptics { usage: Haptics::DurationList }),
            (14,  32) => Ok(Usage::Haptics { usage: Haptics::AutoTrigger }),
            (14,  33) => Ok(Usage::Haptics { usage: Haptics::ManualTrigger }),
            (14,  34) => Ok(Usage::Haptics { usage: Haptics::AutoTriggerAssociatedControl }),
            (14,  35) => Ok(Usage::Haptics { usage: Haptics::Intensity }),
            (14,  36) => Ok(Usage::Haptics { usage: Haptics::RepeatCount }),
            (14,  37) => Ok(Usage::Haptics { usage: Haptics::RetriggerPeriod }),
            (14,  38) => Ok(Usage::Haptics { usage: Haptics::WaveformVendorPage }),
            (14,  39) => Ok(Usage::Haptics { usage: Haptics::WaveformVendorID }),
            (14,  40) => Ok(Usage::Haptics { usage: Haptics::WaveformCutoffTime }),
            (14,  4097) => Ok(Usage::Haptics { usage: Haptics::WaveformNone }),
            (14,  4098) => Ok(Usage::Haptics { usage: Haptics::WaveformStop }),
            (14,  4099) => Ok(Usage::Haptics { usage: Haptics::WaveformClick }),
            (14,  4100) => Ok(Usage::Haptics { usage: Haptics::WaveformBuzzContinuous }),
            (14,  4101) => Ok(Usage::Haptics { usage: Haptics::WaveformRumbleContinuous }),
            (14,  4102) => Ok(Usage::Haptics { usage: Haptics::WaveformPress }),
            (14,  4103) => Ok(Usage::Haptics { usage: Haptics::WaveformRelease }),
            (14,  4104) => Ok(Usage::Haptics { usage: Haptics::WaveformHover }),
            (14,  4105) => Ok(Usage::Haptics { usage: Haptics::WaveformSuccess }),
            (14,  4106) => Ok(Usage::Haptics { usage: Haptics::WaveformError }),
            (14,  4107) => Ok(Usage::Haptics { usage: Haptics::WaveformInkContinuous }),
            (14,  4108) => Ok(Usage::Haptics { usage: Haptics::WaveformPencilContinuous }),
            (14,  4109) => Ok(Usage::Haptics { usage: Haptics::WaveformMarkerContinuous }),
            (14,  4110) => Ok(Usage::Haptics { usage: Haptics::WaveformChiselMarkerContinuous }),
            (14,  4111) => Ok(Usage::Haptics { usage: Haptics::WaveformBrushContinuous }),
            (14,  4112) => Ok(Usage::Haptics { usage: Haptics::WaveformEraserContinuous }),
            (14,  4113) => Ok(Usage::Haptics { usage: Haptics::WaveformSparkleContinuous }),
            (15,  1) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PhysicalInputDevice }),
            (15,  32) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Normal }),
            (15,  33) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetEffectReport }),
            (15,  34) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectParameterBlockIndex }),
            (15,  35) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ParameterBlockOffset }),
            (15,  36) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ROMFlag }),
            (15,  37) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectType }),
            (15,  38) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETConstantForce }),
            (15,  39) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETRamp }),
            (15,  40) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETCustomForce }),
            (15,  48) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSquare }),
            (15,  49) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSine }),
            (15,  50) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETTriangle }),
            (15,  51) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSawtoothUp }),
            (15,  52) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSawtoothDown }),
            (15,  64) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETSpring }),
            (15,  65) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETDamper }),
            (15,  66) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETInertia }),
            (15,  67) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ETFriction }),
            (15,  80) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Duration }),
            (15,  81) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SamplePeriod }),
            (15,  82) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Gain }),
            (15,  83) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::TriggerButton }),
            (15,  84) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::TriggerRepeatInterval }),
            (15,  85) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::AxesEnable }),
            (15,  86) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DirectionEnable }),
            (15,  87) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Direction }),
            (15,  88) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::TypeSpecificBlockOffset }),
            (15,  89) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockType }),
            (15,  90) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetEnvelopeReport }),
            (15,  91) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::AttackLevel }),
            (15,  92) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::AttackTime }),
            (15,  93) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::FadeLevel }),
            (15,  94) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::FadeTime }),
            (15,  95) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetConditionReport }),
            (15,  96) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CenterPointOffset }),
            (15,  97) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PositiveCoefficient }),
            (15,  98) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::NegativeCoefficient }),
            (15,  99) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PositiveSaturation }),
            (15,  100) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::NegativeSaturation }),
            (15,  101) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DeadBand }),
            (15,  102) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DownloadForceSample }),
            (15,  103) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::IsochCustomForceEnable }),
            (15,  104) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CustomForceDataReport }),
            (15,  105) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CustomForceData }),
            (15,  106) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CustomForceVendorDefinedData }),
            (15,  107) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetCustomForceReport }),
            (15,  108) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CustomForceDataOffset }),
            (15,  109) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SampleCount }),
            (15,  110) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetPeriodicReport }),
            (15,  111) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Offset }),
            (15,  112) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Magnitude }),
            (15,  113) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Phase }),
            (15,  114) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::Period }),
            (15,  115) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetConstantForceReport }),
            (15,  116) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SetRampForceReport }),
            (15,  117) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::RampStart }),
            (15,  118) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::RampEnd }),
            (15,  119) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectOperationReport }),
            (15,  120) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectOperation }),
            (15,  121) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::OpEffectStart }),
            (15,  122) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::OpEffectStartSolo }),
            (15,  123) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::OpEffectStop }),
            (15,  124) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::LoopCount }),
            (15,  125) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DeviceGainReport }),
            (15,  126) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DeviceGain }),
            (15,  127) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ParameterBlockPoolsReport }),
            (15,  128) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::RAMPoolSize }),
            (15,  129) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ROMPoolSize }),
            (15,  130) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ROMEffectBlockCount }),
            (15,  131) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SimultaneousEffectsMax }),
            (15,  132) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PoolAlignment }),
            (15,  133) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ParameterBlockMoveReport }),
            (15,  134) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::MoveSource }),
            (15,  135) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::MoveDestination }),
            (15,  136) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::MoveLength }),
            (15,  137) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectParameterBlockLoadReport }),
            (15,  139) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectParameterBlockLoadStatus }),
            (15,  140) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockLoadSuccess }),
            (15,  141) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockLoadFull }),
            (15,  142) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockLoadError }),
            (15,  143) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::BlockHandle }),
            (15,  144) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectParameterBlockFreeReport }),
            (15,  145) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::TypeSpecificBlockHandle }),
            (15,  146) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PIDStateReport }),
            (15,  148) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::EffectPlaying }),
            (15,  149) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PIDDeviceControlReport }),
            (15,  150) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::PIDDeviceControl }),
            (15,  151) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCEnableActuators }),
            (15,  152) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCDisableActuators }),
            (15,  153) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCStopAllEffects }),
            (15,  154) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCReset }),
            (15,  155) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCPause }),
            (15,  156) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DCContinue }),
            (15,  159) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DevicePaused }),
            (15,  160) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ActuatorsEnabled }),
            (15,  164) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SafetySwitch }),
            (15,  165) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ActuatorOverrideSwitch }),
            (15,  166) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ActuatorPower }),
            (15,  167) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::StartDelay }),
            (15,  168) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::ParameterBlockSize }),
            (15,  169) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::DeviceManagedPool }),
            (15,  170) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::SharedParameterBlocks }),
            (15,  171) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::CreateNewEffectParameterBlockReport }),
            (15,  172) => Ok(Usage::PhysicalInputDevice { usage: PhysicalInputDevice::RAMPoolAvailable }),
            (17,  1) => Ok(Usage::SoC { usage: SoC::SocControl }),
            (17,  2) => Ok(Usage::SoC { usage: SoC::FirmwareTransfer }),
            (17,  3) => Ok(Usage::SoC { usage: SoC::FirmwareFileId }),
            (17,  4) => Ok(Usage::SoC { usage: SoC::FileOffsetInBytes }),
            (17,  5) => Ok(Usage::SoC { usage: SoC::FileTransferSizeMaxInBytes }),
            (17,  6) => Ok(Usage::SoC { usage: SoC::FilePayload }),
            (17,  7) => Ok(Usage::SoC { usage: SoC::FilePayloadSizeInBytes }),
            (17,  8) => Ok(Usage::SoC { usage: SoC::FilePayloadContainsLastBytes }),
            (17,  9) => Ok(Usage::SoC { usage: SoC::FileTransferStop }),
            (17,  10) => Ok(Usage::SoC { usage: SoC::FileTransferTillEnd }),
            (18,  1) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::EyeTracker }),
            (18,  2) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::HeadTracker }),
            (18,  16) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::TrackingData }),
            (18,  17) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::Capabilities }),
            (18,  18) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::Configuration }),
            (18,  19) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::Status }),
            (18,  20) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::Control }),
            (18,  32) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::SensorTimestamp }),
            (18,  33) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::PositionX }),
            (18,  34) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::PositionY }),
            (18,  35) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::PositionZ }),
            (18,  36) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::GazePoint }),
            (18,  37) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::LeftEyePosition }),
            (18,  38) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::RightEyePosition }),
            (18,  39) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::HeadPosition }),
            (18,  40) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::HeadDirectionPoint }),
            (18,  41) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::RotationaboutXaxis }),
            (18,  42) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::RotationaboutYaxis }),
            (18,  43) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::RotationaboutZaxis }),
            (18,  256) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::TrackerQuality }),
            (18,  257) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::MinimumTrackingDistance }),
            (18,  258) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::OptimumTrackingDistance }),
            (18,  259) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::MaximumTrackingDistance }),
            (18,  260) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::MaximumScreenPlaneWidth }),
            (18,  261) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::MaximumScreenPlaneHeight }),
            (18,  512) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DisplayManufacturerID }),
            (18,  513) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DisplayProductID }),
            (18,  514) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DisplaySerialNumber }),
            (18,  515) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DisplayManufacturerDate }),
            (18,  516) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::CalibratedScreenWidth }),
            (18,  517) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::CalibratedScreenHeight }),
            (18,  768) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::SamplingFrequency }),
            (18,  769) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::ConfigurationStatus }),
            (18,  1024) => Ok(Usage::EyeandHeadTrackers { usage: EyeandHeadTrackers::DeviceModeRequest }),
            (20,  1) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AlphanumericDisplay }),
            (20,  2) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AuxiliaryDisplay }),
            (20,  32) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayAttributesReport }),
            (20,  33) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ASCIICharacterSet }),
            (20,  34) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DataReadBack }),
            (20,  35) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::FontReadBack }),
            (20,  36) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayControlReport }),
            (20,  37) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ClearDisplay }),
            (20,  38) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayEnable }),
            (20,  39) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ScreenSaverDelay }),
            (20,  40) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ScreenSaverEnable }),
            (20,  41) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::VerticalScroll }),
            (20,  42) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::HorizontalScroll }),
            (20,  43) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterReport }),
            (20,  44) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayData }),
            (20,  45) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayStatus }),
            (20,  46) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::StatNotReady }),
            (20,  47) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::StatReady }),
            (20,  48) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ErrNotaloadablecharacter }),
            (20,  49) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::ErrFontdatacannotberead }),
            (20,  50) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorPositionReport }),
            (20,  51) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Row }),
            (20,  52) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Column }),
            (20,  53) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Rows }),
            (20,  54) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Columns }),
            (20,  55) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorPixelPositioning }),
            (20,  56) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorMode }),
            (20,  57) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorEnable }),
            (20,  58) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CursorBlink }),
            (20,  59) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::FontReport }),
            (20,  60) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::FontData }),
            (20,  61) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterWidth }),
            (20,  62) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterHeight }),
            (20,  63) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterSpacingHorizontal }),
            (20,  64) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterSpacingVertical }),
            (20,  65) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::UnicodeCharacterSet }),
            (20,  66) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Font7Segment }),
            (20,  67) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SevenSegmentDirectMap }),
            (20,  68) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::Font14Segment }),
            (20,  69) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::One4SegmentDirectMap }),
            (20,  70) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayBrightness }),
            (20,  71) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayContrast }),
            (20,  72) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterAttribute }),
            (20,  73) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AttributeReadback }),
            (20,  74) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::AttributeData }),
            (20,  75) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharAttrEnhance }),
            (20,  76) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharAttrUnderline }),
            (20,  77) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharAttrBlink }),
            (20,  128) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BitmapSizeX }),
            (20,  129) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BitmapSizeY }),
            (20,  130) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::MaxBlitSize }),
            (20,  131) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BitDepthFormat }),
            (20,  132) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayOrientation }),
            (20,  133) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::PaletteReport }),
            (20,  134) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::PaletteDataSize }),
            (20,  135) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::PaletteDataOffset }),
            (20,  136) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::PaletteData }),
            (20,  138) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitReport }),
            (20,  139) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitRectangleX1 }),
            (20,  140) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitRectangleY1 }),
            (20,  141) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitRectangleX2 }),
            (20,  142) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitRectangleY2 }),
            (20,  143) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::BlitData }),
            (20,  144) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButton }),
            (20,  145) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonID }),
            (20,  146) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonSide }),
            (20,  147) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonOffset1 }),
            (20,  148) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonOffset2 }),
            (20,  149) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftButtonReport }),
            (20,  194) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::SoftKeys }),
            (20,  204) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::DisplayDataExtensions }),
            (20,  207) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterMapping }),
            (20,  221) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::UnicodeEquivalent }),
            (20,  223) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::CharacterPageMapping }),
            (20,  255) => Ok(Usage::AuxiliaryDisplay { usage: AuxiliaryDisplay::RequestReport }),
            (32,  1) => Ok(Usage::Sensors { usage: Sensors::Sensor }),
            (32,  16) => Ok(Usage::Sensors { usage: Sensors::Biometric }),
            (32,  17) => Ok(Usage::Sensors { usage: Sensors::BiometricHumanPresence }),
            (32,  18) => Ok(Usage::Sensors { usage: Sensors::BiometricHumanProximity }),
            (32,  19) => Ok(Usage::Sensors { usage: Sensors::BiometricHumanTouch }),
            (32,  20) => Ok(Usage::Sensors { usage: Sensors::BiometricBloodPressure }),
            (32,  21) => Ok(Usage::Sensors { usage: Sensors::BiometricBodyTemperature }),
            (32,  22) => Ok(Usage::Sensors { usage: Sensors::BiometricHeartRate }),
            (32,  23) => Ok(Usage::Sensors { usage: Sensors::BiometricHeartRateVariability }),
            (32,  24) => Ok(Usage::Sensors { usage: Sensors::BiometricPeripheralOxygenSaturation }),
            (32,  25) => Ok(Usage::Sensors { usage: Sensors::BiometricRespiratoryRate }),
            (32,  32) => Ok(Usage::Sensors { usage: Sensors::Electrical }),
            (32,  33) => Ok(Usage::Sensors { usage: Sensors::ElectricalCapacitance }),
            (32,  34) => Ok(Usage::Sensors { usage: Sensors::ElectricalCurrent }),
            (32,  35) => Ok(Usage::Sensors { usage: Sensors::ElectricalPower }),
            (32,  36) => Ok(Usage::Sensors { usage: Sensors::ElectricalInductance }),
            (32,  37) => Ok(Usage::Sensors { usage: Sensors::ElectricalResistance }),
            (32,  38) => Ok(Usage::Sensors { usage: Sensors::ElectricalVoltage }),
            (32,  39) => Ok(Usage::Sensors { usage: Sensors::ElectricalPotentiometer }),
            (32,  40) => Ok(Usage::Sensors { usage: Sensors::ElectricalFrequency }),
            (32,  41) => Ok(Usage::Sensors { usage: Sensors::ElectricalPeriod }),
            (32,  48) => Ok(Usage::Sensors { usage: Sensors::Environmental }),
            (32,  49) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalAtmosphericPressure }),
            (32,  50) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalHumidity }),
            (32,  51) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalTemperature }),
            (32,  52) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalWindDirection }),
            (32,  53) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalWindSpeed }),
            (32,  54) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalAirQuality }),
            (32,  55) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalHeatIndex }),
            (32,  56) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalSurfaceTemperature }),
            (32,  57) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalVolatileOrganicCompounds }),
            (32,  58) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalObjectPresence }),
            (32,  59) => Ok(Usage::Sensors { usage: Sensors::EnvironmentalObjectProximity }),
            (32,  64) => Ok(Usage::Sensors { usage: Sensors::Light }),
            (32,  65) => Ok(Usage::Sensors { usage: Sensors::LightAmbientLight }),
            (32,  66) => Ok(Usage::Sensors { usage: Sensors::LightConsumerInfrared }),
            (32,  67) => Ok(Usage::Sensors { usage: Sensors::LightInfraredLight }),
            (32,  68) => Ok(Usage::Sensors { usage: Sensors::LightVisibleLight }),
            (32,  69) => Ok(Usage::Sensors { usage: Sensors::LightUltravioletLight }),
            (32,  80) => Ok(Usage::Sensors { usage: Sensors::Location }),
            (32,  81) => Ok(Usage::Sensors { usage: Sensors::LocationBroadcast }),
            (32,  82) => Ok(Usage::Sensors { usage: Sensors::LocationDeadReckoning }),
            (32,  83) => Ok(Usage::Sensors { usage: Sensors::LocationGPSGlobalPositioningSystem }),
            (32,  84) => Ok(Usage::Sensors { usage: Sensors::LocationLookup }),
            (32,  85) => Ok(Usage::Sensors { usage: Sensors::LocationOther }),
            (32,  86) => Ok(Usage::Sensors { usage: Sensors::LocationStatic }),
            (32,  87) => Ok(Usage::Sensors { usage: Sensors::LocationTriangulation }),
            (32,  96) => Ok(Usage::Sensors { usage: Sensors::Mechanical }),
            (32,  97) => Ok(Usage::Sensors { usage: Sensors::MechanicalBooleanSwitch }),
            (32,  98) => Ok(Usage::Sensors { usage: Sensors::MechanicalBooleanSwitchArray }),
            (32,  99) => Ok(Usage::Sensors { usage: Sensors::MechanicalMultivalueSwitch }),
            (32,  100) => Ok(Usage::Sensors { usage: Sensors::MechanicalForce }),
            (32,  101) => Ok(Usage::Sensors { usage: Sensors::MechanicalPressure }),
            (32,  102) => Ok(Usage::Sensors { usage: Sensors::MechanicalStrain }),
            (32,  103) => Ok(Usage::Sensors { usage: Sensors::MechanicalWeight }),
            (32,  104) => Ok(Usage::Sensors { usage: Sensors::MechanicalHapticVibrator }),
            (32,  105) => Ok(Usage::Sensors { usage: Sensors::MechanicalHallEffectSwitch }),
            (32,  112) => Ok(Usage::Sensors { usage: Sensors::Motion }),
            (32,  113) => Ok(Usage::Sensors { usage: Sensors::MotionAccelerometer1D }),
            (32,  114) => Ok(Usage::Sensors { usage: Sensors::MotionAccelerometer2D }),
            (32,  115) => Ok(Usage::Sensors { usage: Sensors::MotionAccelerometer3D }),
            (32,  116) => Ok(Usage::Sensors { usage: Sensors::MotionGyrometer1D }),
            (32,  117) => Ok(Usage::Sensors { usage: Sensors::MotionGyrometer2D }),
            (32,  118) => Ok(Usage::Sensors { usage: Sensors::MotionGyrometer3D }),
            (32,  119) => Ok(Usage::Sensors { usage: Sensors::MotionMotionDetector }),
            (32,  120) => Ok(Usage::Sensors { usage: Sensors::MotionSpeedometer }),
            (32,  121) => Ok(Usage::Sensors { usage: Sensors::MotionAccelerometer }),
            (32,  122) => Ok(Usage::Sensors { usage: Sensors::MotionGyrometer }),
            (32,  123) => Ok(Usage::Sensors { usage: Sensors::MotionGravityVector }),
            (32,  124) => Ok(Usage::Sensors { usage: Sensors::MotionLinearAccelerometer }),
            (32,  128) => Ok(Usage::Sensors { usage: Sensors::Orientation }),
            (32,  129) => Ok(Usage::Sensors { usage: Sensors::OrientationCompass1D }),
            (32,  130) => Ok(Usage::Sensors { usage: Sensors::OrientationCompass2D }),
            (32,  131) => Ok(Usage::Sensors { usage: Sensors::OrientationCompass3D }),
            (32,  132) => Ok(Usage::Sensors { usage: Sensors::OrientationInclinometer1D }),
            (32,  133) => Ok(Usage::Sensors { usage: Sensors::OrientationInclinometer2D }),
            (32,  134) => Ok(Usage::Sensors { usage: Sensors::OrientationInclinometer3D }),
            (32,  135) => Ok(Usage::Sensors { usage: Sensors::OrientationDistance1D }),
            (32,  136) => Ok(Usage::Sensors { usage: Sensors::OrientationDistance2D }),
            (32,  137) => Ok(Usage::Sensors { usage: Sensors::OrientationDistance3D }),
            (32,  138) => Ok(Usage::Sensors { usage: Sensors::OrientationDeviceOrientation }),
            (32,  139) => Ok(Usage::Sensors { usage: Sensors::OrientationCompass }),
            (32,  140) => Ok(Usage::Sensors { usage: Sensors::OrientationInclinometer }),
            (32,  141) => Ok(Usage::Sensors { usage: Sensors::OrientationDistance }),
            (32,  142) => Ok(Usage::Sensors { usage: Sensors::OrientationRelativeOrientation }),
            (32,  143) => Ok(Usage::Sensors { usage: Sensors::OrientationSimpleOrientation }),
            (32,  144) => Ok(Usage::Sensors { usage: Sensors::Scanner }),
            (32,  145) => Ok(Usage::Sensors { usage: Sensors::ScannerBarcode }),
            (32,  146) => Ok(Usage::Sensors { usage: Sensors::ScannerRFID }),
            (32,  147) => Ok(Usage::Sensors { usage: Sensors::ScannerNFC }),
            (32,  160) => Ok(Usage::Sensors { usage: Sensors::Time }),
            (32,  161) => Ok(Usage::Sensors { usage: Sensors::TimeAlarmTimer }),
            (32,  162) => Ok(Usage::Sensors { usage: Sensors::TimeRealTimeClock }),
            (32,  176) => Ok(Usage::Sensors { usage: Sensors::PersonalActivity }),
            (32,  177) => Ok(Usage::Sensors { usage: Sensors::PersonalActivityActivityDetection }),
            (32,  178) => Ok(Usage::Sensors { usage: Sensors::PersonalActivityDevicePosition }),
            (32,  179) => Ok(Usage::Sensors { usage: Sensors::PersonalActivityFloorTracker }),
            (32,  180) => Ok(Usage::Sensors { usage: Sensors::PersonalActivityPedometer }),
            (32,  181) => Ok(Usage::Sensors { usage: Sensors::PersonalActivityStepDetection }),
            (32,  192) => Ok(Usage::Sensors { usage: Sensors::OrientationExtended }),
            (32,  193) => Ok(Usage::Sensors { usage: Sensors::OrientationExtendedGeomagneticOrientation }),
            (32,  194) => Ok(Usage::Sensors { usage: Sensors::OrientationExtendedMagnetometer }),
            (32,  208) => Ok(Usage::Sensors { usage: Sensors::Gesture }),
            (32,  209) => Ok(Usage::Sensors { usage: Sensors::GestureChassisFlipGesture }),
            (32,  210) => Ok(Usage::Sensors { usage: Sensors::GestureHingeFoldGesture }),
            (32,  224) => Ok(Usage::Sensors { usage: Sensors::Other }),
            (32,  225) => Ok(Usage::Sensors { usage: Sensors::OtherCustom }),
            (32,  226) => Ok(Usage::Sensors { usage: Sensors::OtherGeneric }),
            (32,  227) => Ok(Usage::Sensors { usage: Sensors::OtherGenericEnumerator }),
            (32,  228) => Ok(Usage::Sensors { usage: Sensors::OtherHingeAngle }),
            (32,  240) => Ok(Usage::Sensors { usage: Sensors::VendorReserved1 }),
            (32,  241) => Ok(Usage::Sensors { usage: Sensors::VendorReserved2 }),
            (32,  242) => Ok(Usage::Sensors { usage: Sensors::VendorReserved3 }),
            (32,  243) => Ok(Usage::Sensors { usage: Sensors::VendorReserved4 }),
            (32,  244) => Ok(Usage::Sensors { usage: Sensors::VendorReserved5 }),
            (32,  245) => Ok(Usage::Sensors { usage: Sensors::VendorReserved6 }),
            (32,  246) => Ok(Usage::Sensors { usage: Sensors::VendorReserved7 }),
            (32,  247) => Ok(Usage::Sensors { usage: Sensors::VendorReserved8 }),
            (32,  248) => Ok(Usage::Sensors { usage: Sensors::VendorReserved9 }),
            (32,  249) => Ok(Usage::Sensors { usage: Sensors::VendorReserved10 }),
            (32,  250) => Ok(Usage::Sensors { usage: Sensors::VendorReserved11 }),
            (32,  251) => Ok(Usage::Sensors { usage: Sensors::VendorReserved12 }),
            (32,  252) => Ok(Usage::Sensors { usage: Sensors::VendorReserved13 }),
            (32,  253) => Ok(Usage::Sensors { usage: Sensors::VendorReserved14 }),
            (32,  254) => Ok(Usage::Sensors { usage: Sensors::VendorReserved15 }),
            (32,  255) => Ok(Usage::Sensors { usage: Sensors::VendorReserved16 }),
            (32,  512) => Ok(Usage::Sensors { usage: Sensors::Event }),
            (32,  513) => Ok(Usage::Sensors { usage: Sensors::EventSensorState }),
            (32,  514) => Ok(Usage::Sensors { usage: Sensors::EventSensorEvent }),
            (32,  768) => Ok(Usage::Sensors { usage: Sensors::Property }),
            (32,  769) => Ok(Usage::Sensors { usage: Sensors::PropertyFriendlyName }),
            (32,  770) => Ok(Usage::Sensors { usage: Sensors::PropertyPersistentUniqueID }),
            (32,  771) => Ok(Usage::Sensors { usage: Sensors::PropertySensorStatus }),
            (32,  772) => Ok(Usage::Sensors { usage: Sensors::PropertyMinimumReportInterval }),
            (32,  773) => Ok(Usage::Sensors { usage: Sensors::PropertySensorManufacturer }),
            (32,  774) => Ok(Usage::Sensors { usage: Sensors::PropertySensorModel }),
            (32,  775) => Ok(Usage::Sensors { usage: Sensors::PropertySensorSerialNumber }),
            (32,  776) => Ok(Usage::Sensors { usage: Sensors::PropertySensorDescription }),
            (32,  777) => Ok(Usage::Sensors { usage: Sensors::PropertySensorConnectionType }),
            (32,  778) => Ok(Usage::Sensors { usage: Sensors::PropertySensorDevicePath }),
            (32,  779) => Ok(Usage::Sensors { usage: Sensors::PropertyHardwareRevision }),
            (32,  780) => Ok(Usage::Sensors { usage: Sensors::PropertyFirmwareVersion }),
            (32,  781) => Ok(Usage::Sensors { usage: Sensors::PropertyReleaseDate }),
            (32,  782) => Ok(Usage::Sensors { usage: Sensors::PropertyReportInterval }),
            (32,  783) => Ok(Usage::Sensors { usage: Sensors::PropertyChangeSensitivityAbsolute }),
            (32,  784) => Ok(Usage::Sensors { usage: Sensors::PropertyChangeSensitivityPercentofRange }),
            (32,  785) => Ok(Usage::Sensors { usage: Sensors::PropertyChangeSensitivityPercentRelative }),
            (32,  786) => Ok(Usage::Sensors { usage: Sensors::PropertyAccuracy }),
            (32,  787) => Ok(Usage::Sensors { usage: Sensors::PropertyResolution }),
            (32,  788) => Ok(Usage::Sensors { usage: Sensors::PropertyMaximum }),
            (32,  789) => Ok(Usage::Sensors { usage: Sensors::PropertyMinimum }),
            (32,  790) => Ok(Usage::Sensors { usage: Sensors::PropertyReportingState }),
            (32,  791) => Ok(Usage::Sensors { usage: Sensors::PropertySamplingRate }),
            (32,  792) => Ok(Usage::Sensors { usage: Sensors::PropertyResponseCurve }),
            (32,  793) => Ok(Usage::Sensors { usage: Sensors::PropertyPowerState }),
            (32,  794) => Ok(Usage::Sensors { usage: Sensors::PropertyMaximumFIFOEvents }),
            (32,  795) => Ok(Usage::Sensors { usage: Sensors::PropertyReportLatency }),
            (32,  796) => Ok(Usage::Sensors { usage: Sensors::PropertyFlushFIFOEvents }),
            (32,  797) => Ok(Usage::Sensors { usage: Sensors::PropertyMaximumPowerConsumption }),
            (32,  798) => Ok(Usage::Sensors { usage: Sensors::PropertyIsPrimary }),
            (32,  799) => Ok(Usage::Sensors { usage: Sensors::PropertyHumanPresenceDetectionType }),
            (32,  1024) => Ok(Usage::Sensors { usage: Sensors::DataFieldLocation }),
            (32,  1026) => Ok(Usage::Sensors { usage: Sensors::DataFieldAltitudeAntennaSeaLevel }),
            (32,  1027) => Ok(Usage::Sensors { usage: Sensors::DataFieldDifferentialReferenceStationID }),
            (32,  1028) => Ok(Usage::Sensors { usage: Sensors::DataFieldAltitudeEllipsoidError }),
            (32,  1029) => Ok(Usage::Sensors { usage: Sensors::DataFieldAltitudeEllipsoid }),
            (32,  1030) => Ok(Usage::Sensors { usage: Sensors::DataFieldAltitudeSeaLevelError }),
            (32,  1031) => Ok(Usage::Sensors { usage: Sensors::DataFieldAltitudeSeaLevel }),
            (32,  1032) => Ok(Usage::Sensors { usage: Sensors::DataFieldDifferentialGPSDataAge }),
            (32,  1033) => Ok(Usage::Sensors { usage: Sensors::DataFieldErrorRadius }),
            (32,  1034) => Ok(Usage::Sensors { usage: Sensors::DataFieldFixQuality }),
            (32,  1035) => Ok(Usage::Sensors { usage: Sensors::DataFieldFixType }),
            (32,  1036) => Ok(Usage::Sensors { usage: Sensors::DataFieldGeoidalSeparation }),
            (32,  1037) => Ok(Usage::Sensors { usage: Sensors::DataFieldGPSOperationMode }),
            (32,  1038) => Ok(Usage::Sensors { usage: Sensors::DataFieldGPSSelectionMode }),
            (32,  1039) => Ok(Usage::Sensors { usage: Sensors::DataFieldGPSStatus }),
            (32,  1040) => Ok(Usage::Sensors { usage: Sensors::DataFieldPositionDilutionofPrecision }),
            (32,  1041) => Ok(Usage::Sensors { usage: Sensors::DataFieldHorizontalDilutionofPrecision }),
            (32,  1042) => Ok(Usage::Sensors { usage: Sensors::DataFieldVerticalDilutionofPrecision }),
            (32,  1043) => Ok(Usage::Sensors { usage: Sensors::DataFieldLatitude }),
            (32,  1044) => Ok(Usage::Sensors { usage: Sensors::DataFieldLongitude }),
            (32,  1045) => Ok(Usage::Sensors { usage: Sensors::DataFieldTrueHeading }),
            (32,  1046) => Ok(Usage::Sensors { usage: Sensors::DataFieldMagneticHeading }),
            (32,  1047) => Ok(Usage::Sensors { usage: Sensors::DataFieldMagneticVariation }),
            (32,  1048) => Ok(Usage::Sensors { usage: Sensors::DataFieldSpeed }),
            (32,  1049) => Ok(Usage::Sensors { usage: Sensors::DataFieldSatellitesinView }),
            (32,  1050) => Ok(Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewAzimuth }),
            (32,  1051) => Ok(Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewElevation }),
            (32,  1052) => Ok(Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewIDs }),
            (32,  1053) => Ok(Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewPRNs }),
            (32,  1054) => Ok(Usage::Sensors { usage: Sensors::DataFieldSatellitesinViewSNRatios }),
            (32,  1055) => Ok(Usage::Sensors { usage: Sensors::DataFieldSatellitesUsedCount }),
            (32,  1056) => Ok(Usage::Sensors { usage: Sensors::DataFieldSatellitesUsedPRNs }),
            (32,  1057) => Ok(Usage::Sensors { usage: Sensors::DataFieldNMEASentence }),
            (32,  1058) => Ok(Usage::Sensors { usage: Sensors::DataFieldAddressLine1 }),
            (32,  1059) => Ok(Usage::Sensors { usage: Sensors::DataFieldAddressLine2 }),
            (32,  1060) => Ok(Usage::Sensors { usage: Sensors::DataFieldCity }),
            (32,  1061) => Ok(Usage::Sensors { usage: Sensors::DataFieldStateorProvince }),
            (32,  1062) => Ok(Usage::Sensors { usage: Sensors::DataFieldCountryorRegion }),
            (32,  1063) => Ok(Usage::Sensors { usage: Sensors::DataFieldPostalCode }),
            (32,  1066) => Ok(Usage::Sensors { usage: Sensors::PropertyLocation }),
            (32,  1067) => Ok(Usage::Sensors { usage: Sensors::PropertyLocationDesiredAccuracy }),
            (32,  1072) => Ok(Usage::Sensors { usage: Sensors::DataFieldEnvironmental }),
            (32,  1073) => Ok(Usage::Sensors { usage: Sensors::DataFieldAtmosphericPressure }),
            (32,  1075) => Ok(Usage::Sensors { usage: Sensors::DataFieldRelativeHumidity }),
            (32,  1076) => Ok(Usage::Sensors { usage: Sensors::DataFieldTemperature }),
            (32,  1077) => Ok(Usage::Sensors { usage: Sensors::DataFieldWindDirection }),
            (32,  1078) => Ok(Usage::Sensors { usage: Sensors::DataFieldWindSpeed }),
            (32,  1079) => Ok(Usage::Sensors { usage: Sensors::DataFieldAirQualityIndex }),
            (32,  1080) => Ok(Usage::Sensors { usage: Sensors::DataFieldEquivalentCO2 }),
            (32,  1081) => Ok(Usage::Sensors { usage: Sensors::DataFieldVolatileOrganicCompoundConcentration }),
            (32,  1082) => Ok(Usage::Sensors { usage: Sensors::DataFieldObjectPresence }),
            (32,  1083) => Ok(Usage::Sensors { usage: Sensors::DataFieldObjectProximityRange }),
            (32,  1084) => Ok(Usage::Sensors { usage: Sensors::DataFieldObjectProximityOutofRange }),
            (32,  1088) => Ok(Usage::Sensors { usage: Sensors::PropertyEnvironmental }),
            (32,  1089) => Ok(Usage::Sensors { usage: Sensors::PropertyReferencePressure }),
            (32,  1104) => Ok(Usage::Sensors { usage: Sensors::DataFieldMotion }),
            (32,  1105) => Ok(Usage::Sensors { usage: Sensors::DataFieldMotionState }),
            (32,  1106) => Ok(Usage::Sensors { usage: Sensors::DataFieldAcceleration }),
            (32,  1107) => Ok(Usage::Sensors { usage: Sensors::DataFieldAccelerationAxisX }),
            (32,  1108) => Ok(Usage::Sensors { usage: Sensors::DataFieldAccelerationAxisY }),
            (32,  1109) => Ok(Usage::Sensors { usage: Sensors::DataFieldAccelerationAxisZ }),
            (32,  1110) => Ok(Usage::Sensors { usage: Sensors::DataFieldAngularVelocity }),
            (32,  1111) => Ok(Usage::Sensors { usage: Sensors::DataFieldAngularVelocityaboutXAxis }),
            (32,  1112) => Ok(Usage::Sensors { usage: Sensors::DataFieldAngularVelocityaboutYAxis }),
            (32,  1113) => Ok(Usage::Sensors { usage: Sensors::DataFieldAngularVelocityaboutZAxis }),
            (32,  1114) => Ok(Usage::Sensors { usage: Sensors::DataFieldAngularPosition }),
            (32,  1115) => Ok(Usage::Sensors { usage: Sensors::DataFieldAngularPositionaboutXAxis }),
            (32,  1116) => Ok(Usage::Sensors { usage: Sensors::DataFieldAngularPositionaboutYAxis }),
            (32,  1117) => Ok(Usage::Sensors { usage: Sensors::DataFieldAngularPositionaboutZAxis }),
            (32,  1118) => Ok(Usage::Sensors { usage: Sensors::DataFieldMotionSpeed }),
            (32,  1119) => Ok(Usage::Sensors { usage: Sensors::DataFieldMotionIntensity }),
            (32,  1136) => Ok(Usage::Sensors { usage: Sensors::DataFieldOrientation }),
            (32,  1137) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeading }),
            (32,  1138) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeadingXAxis }),
            (32,  1139) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeadingYAxis }),
            (32,  1140) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeadingZAxis }),
            (32,  1141) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeadingCompensatedMagneticNorth }),
            (32,  1142) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeadingCompensatedTrueNorth }),
            (32,  1143) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeadingMagneticNorth }),
            (32,  1144) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeadingTrueNorth }),
            (32,  1145) => Ok(Usage::Sensors { usage: Sensors::DataFieldDistance }),
            (32,  1146) => Ok(Usage::Sensors { usage: Sensors::DataFieldDistanceXAxis }),
            (32,  1147) => Ok(Usage::Sensors { usage: Sensors::DataFieldDistanceYAxis }),
            (32,  1148) => Ok(Usage::Sensors { usage: Sensors::DataFieldDistanceZAxis }),
            (32,  1149) => Ok(Usage::Sensors { usage: Sensors::DataFieldDistanceOutofRange }),
            (32,  1150) => Ok(Usage::Sensors { usage: Sensors::DataFieldTilt }),
            (32,  1151) => Ok(Usage::Sensors { usage: Sensors::DataFieldTiltXAxis }),
            (32,  1152) => Ok(Usage::Sensors { usage: Sensors::DataFieldTiltYAxis }),
            (32,  1153) => Ok(Usage::Sensors { usage: Sensors::DataFieldTiltZAxis }),
            (32,  1154) => Ok(Usage::Sensors { usage: Sensors::DataFieldRotationMatrix }),
            (32,  1155) => Ok(Usage::Sensors { usage: Sensors::DataFieldQuaternion }),
            (32,  1156) => Ok(Usage::Sensors { usage: Sensors::DataFieldMagneticFlux }),
            (32,  1157) => Ok(Usage::Sensors { usage: Sensors::DataFieldMagneticFluxXAxis }),
            (32,  1158) => Ok(Usage::Sensors { usage: Sensors::DataFieldMagneticFluxYAxis }),
            (32,  1159) => Ok(Usage::Sensors { usage: Sensors::DataFieldMagneticFluxZAxis }),
            (32,  1160) => Ok(Usage::Sensors { usage: Sensors::DataFieldMagnetometerAccuracy }),
            (32,  1161) => Ok(Usage::Sensors { usage: Sensors::DataFieldSimpleOrientationDirection }),
            (32,  1168) => Ok(Usage::Sensors { usage: Sensors::DataFieldMechanical }),
            (32,  1169) => Ok(Usage::Sensors { usage: Sensors::DataFieldBooleanSwitchState }),
            (32,  1170) => Ok(Usage::Sensors { usage: Sensors::DataFieldBooleanSwitchArrayStates }),
            (32,  1171) => Ok(Usage::Sensors { usage: Sensors::DataFieldMultivalueSwitchValue }),
            (32,  1172) => Ok(Usage::Sensors { usage: Sensors::DataFieldForce }),
            (32,  1173) => Ok(Usage::Sensors { usage: Sensors::DataFieldAbsolutePressure }),
            (32,  1174) => Ok(Usage::Sensors { usage: Sensors::DataFieldGaugePressure }),
            (32,  1175) => Ok(Usage::Sensors { usage: Sensors::DataFieldStrain }),
            (32,  1176) => Ok(Usage::Sensors { usage: Sensors::DataFieldWeight }),
            (32,  1184) => Ok(Usage::Sensors { usage: Sensors::PropertyMechanical }),
            (32,  1185) => Ok(Usage::Sensors { usage: Sensors::PropertyVibrationState }),
            (32,  1186) => Ok(Usage::Sensors { usage: Sensors::PropertyForwardVibrationSpeed }),
            (32,  1187) => Ok(Usage::Sensors { usage: Sensors::PropertyBackwardVibrationSpeed }),
            (32,  1200) => Ok(Usage::Sensors { usage: Sensors::DataFieldBiometric }),
            (32,  1201) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanPresence }),
            (32,  1202) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanProximityRange }),
            (32,  1203) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanProximityOutofRange }),
            (32,  1204) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanTouchState }),
            (32,  1205) => Ok(Usage::Sensors { usage: Sensors::DataFieldBloodPressure }),
            (32,  1206) => Ok(Usage::Sensors { usage: Sensors::DataFieldBloodPressureDiastolic }),
            (32,  1207) => Ok(Usage::Sensors { usage: Sensors::DataFieldBloodPressureSystolic }),
            (32,  1208) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeartRate }),
            (32,  1209) => Ok(Usage::Sensors { usage: Sensors::DataFieldRestingHeartRate }),
            (32,  1210) => Ok(Usage::Sensors { usage: Sensors::DataFieldHeartbeatInterval }),
            (32,  1211) => Ok(Usage::Sensors { usage: Sensors::DataFieldRespiratoryRate }),
            (32,  1212) => Ok(Usage::Sensors { usage: Sensors::DataFieldSpO2 }),
            (32,  1213) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanAttentionDetected }),
            (32,  1214) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanHeadAzimuth }),
            (32,  1215) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanHeadAltitude }),
            (32,  1216) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanHeadRoll }),
            (32,  1217) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanHeadPitch }),
            (32,  1218) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanHeadYaw }),
            (32,  1219) => Ok(Usage::Sensors { usage: Sensors::DataFieldHumanCorrelationId }),
            (32,  1232) => Ok(Usage::Sensors { usage: Sensors::DataFieldLight }),
            (32,  1233) => Ok(Usage::Sensors { usage: Sensors::DataFieldIlluminance }),
            (32,  1234) => Ok(Usage::Sensors { usage: Sensors::DataFieldColorTemperature }),
            (32,  1235) => Ok(Usage::Sensors { usage: Sensors::DataFieldChromaticity }),
            (32,  1236) => Ok(Usage::Sensors { usage: Sensors::DataFieldChromaticityX }),
            (32,  1237) => Ok(Usage::Sensors { usage: Sensors::DataFieldChromaticityY }),
            (32,  1238) => Ok(Usage::Sensors { usage: Sensors::DataFieldConsumerIRSentenceReceive }),
            (32,  1239) => Ok(Usage::Sensors { usage: Sensors::DataFieldInfraredLight }),
            (32,  1240) => Ok(Usage::Sensors { usage: Sensors::DataFieldRedLight }),
            (32,  1241) => Ok(Usage::Sensors { usage: Sensors::DataFieldGreenLight }),
            (32,  1242) => Ok(Usage::Sensors { usage: Sensors::DataFieldBlueLight }),
            (32,  1243) => Ok(Usage::Sensors { usage: Sensors::DataFieldUltravioletALight }),
            (32,  1244) => Ok(Usage::Sensors { usage: Sensors::DataFieldUltravioletBLight }),
            (32,  1245) => Ok(Usage::Sensors { usage: Sensors::DataFieldUltravioletIndex }),
            (32,  1246) => Ok(Usage::Sensors { usage: Sensors::DataFieldNearInfraredLight }),
            (32,  1247) => Ok(Usage::Sensors { usage: Sensors::PropertyLight }),
            (32,  1248) => Ok(Usage::Sensors { usage: Sensors::PropertyConsumerIRSentenceSend }),
            (32,  1250) => Ok(Usage::Sensors { usage: Sensors::PropertyAutoBrightnessPreferred }),
            (32,  1251) => Ok(Usage::Sensors { usage: Sensors::PropertyAutoColorPreferred }),
            (32,  1264) => Ok(Usage::Sensors { usage: Sensors::DataFieldScanner }),
            (32,  1265) => Ok(Usage::Sensors { usage: Sensors::DataFieldRFIDTag40Bit }),
            (32,  1266) => Ok(Usage::Sensors { usage: Sensors::DataFieldNFCSentenceReceive }),
            (32,  1272) => Ok(Usage::Sensors { usage: Sensors::PropertyScanner }),
            (32,  1273) => Ok(Usage::Sensors { usage: Sensors::PropertyNFCSentenceSend }),
            (32,  1280) => Ok(Usage::Sensors { usage: Sensors::DataFieldElectrical }),
            (32,  1281) => Ok(Usage::Sensors { usage: Sensors::DataFieldCapacitance }),
            (32,  1282) => Ok(Usage::Sensors { usage: Sensors::DataFieldCurrent }),
            (32,  1283) => Ok(Usage::Sensors { usage: Sensors::DataFieldElectricalPower }),
            (32,  1284) => Ok(Usage::Sensors { usage: Sensors::DataFieldInductance }),
            (32,  1285) => Ok(Usage::Sensors { usage: Sensors::DataFieldResistance }),
            (32,  1286) => Ok(Usage::Sensors { usage: Sensors::DataFieldVoltage }),
            (32,  1287) => Ok(Usage::Sensors { usage: Sensors::DataFieldFrequency }),
            (32,  1288) => Ok(Usage::Sensors { usage: Sensors::DataFieldPeriod }),
            (32,  1289) => Ok(Usage::Sensors { usage: Sensors::DataFieldPercentofRange }),
            (32,  1312) => Ok(Usage::Sensors { usage: Sensors::DataFieldTime }),
            (32,  1313) => Ok(Usage::Sensors { usage: Sensors::DataFieldYear }),
            (32,  1314) => Ok(Usage::Sensors { usage: Sensors::DataFieldMonth }),
            (32,  1315) => Ok(Usage::Sensors { usage: Sensors::DataFieldDay }),
            (32,  1316) => Ok(Usage::Sensors { usage: Sensors::DataFieldDayofWeek }),
            (32,  1317) => Ok(Usage::Sensors { usage: Sensors::DataFieldHour }),
            (32,  1318) => Ok(Usage::Sensors { usage: Sensors::DataFieldMinute }),
            (32,  1319) => Ok(Usage::Sensors { usage: Sensors::DataFieldSecond }),
            (32,  1320) => Ok(Usage::Sensors { usage: Sensors::DataFieldMillisecond }),
            (32,  1321) => Ok(Usage::Sensors { usage: Sensors::DataFieldTimestamp }),
            (32,  1322) => Ok(Usage::Sensors { usage: Sensors::DataFieldJulianDayofYear }),
            (32,  1323) => Ok(Usage::Sensors { usage: Sensors::DataFieldTimeSinceSystemBoot }),
            (32,  1328) => Ok(Usage::Sensors { usage: Sensors::PropertyTime }),
            (32,  1329) => Ok(Usage::Sensors { usage: Sensors::PropertyTimeZoneOffsetfromUTC }),
            (32,  1330) => Ok(Usage::Sensors { usage: Sensors::PropertyTimeZoneName }),
            (32,  1331) => Ok(Usage::Sensors { usage: Sensors::PropertyDaylightSavingsTimeObserved }),
            (32,  1332) => Ok(Usage::Sensors { usage: Sensors::PropertyTimeTrimAdjustment }),
            (32,  1333) => Ok(Usage::Sensors { usage: Sensors::PropertyArmAlarm }),
            (32,  1344) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustom }),
            (32,  1345) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomUsage }),
            (32,  1346) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomBooleanArray }),
            (32,  1347) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue }),
            (32,  1348) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue1 }),
            (32,  1349) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue2 }),
            (32,  1350) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue3 }),
            (32,  1351) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue4 }),
            (32,  1352) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue5 }),
            (32,  1353) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue6 }),
            (32,  1354) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue7 }),
            (32,  1355) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue8 }),
            (32,  1356) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue9 }),
            (32,  1357) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue10 }),
            (32,  1358) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue11 }),
            (32,  1359) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue12 }),
            (32,  1360) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue13 }),
            (32,  1361) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue14 }),
            (32,  1362) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue15 }),
            (32,  1363) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue16 }),
            (32,  1364) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue17 }),
            (32,  1365) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue18 }),
            (32,  1366) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue19 }),
            (32,  1367) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue20 }),
            (32,  1368) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue21 }),
            (32,  1369) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue22 }),
            (32,  1370) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue23 }),
            (32,  1371) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue24 }),
            (32,  1372) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue25 }),
            (32,  1373) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue26 }),
            (32,  1374) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue27 }),
            (32,  1375) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomValue28 }),
            (32,  1376) => Ok(Usage::Sensors { usage: Sensors::DataFieldGeneric }),
            (32,  1377) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericGUIDorPROPERTYKEY }),
            (32,  1378) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericCategoryGUID }),
            (32,  1379) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericTypeGUID }),
            (32,  1380) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericEventPROPERTYKEY }),
            (32,  1381) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericPropertyPROPERTYKEY }),
            (32,  1382) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericDataFieldPROPERTYKEY }),
            (32,  1383) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericEvent }),
            (32,  1384) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericProperty }),
            (32,  1385) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericDataField }),
            (32,  1386) => Ok(Usage::Sensors { usage: Sensors::DataFieldEnumeratorTableRowIndex }),
            (32,  1387) => Ok(Usage::Sensors { usage: Sensors::DataFieldEnumeratorTableRowCount }),
            (32,  1388) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericGUIDorPROPERTYKEYkind }),
            (32,  1389) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericGUID }),
            (32,  1390) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericPROPERTYKEY }),
            (32,  1391) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericTopLevelCollectionID }),
            (32,  1392) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericReportID }),
            (32,  1393) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericReportItemPositionIndex }),
            (32,  1394) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericFirmwareVARTYPE }),
            (32,  1395) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericUnitofMeasure }),
            (32,  1396) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericUnitExponent }),
            (32,  1397) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericReportSize }),
            (32,  1398) => Ok(Usage::Sensors { usage: Sensors::DataFieldGenericReportCount }),
            (32,  1408) => Ok(Usage::Sensors { usage: Sensors::PropertyGeneric }),
            (32,  1409) => Ok(Usage::Sensors { usage: Sensors::PropertyEnumeratorTableRowIndex }),
            (32,  1410) => Ok(Usage::Sensors { usage: Sensors::PropertyEnumeratorTableRowCount }),
            (32,  1424) => Ok(Usage::Sensors { usage: Sensors::DataFieldPersonalActivity }),
            (32,  1425) => Ok(Usage::Sensors { usage: Sensors::DataFieldActivityType }),
            (32,  1426) => Ok(Usage::Sensors { usage: Sensors::DataFieldActivityState }),
            (32,  1427) => Ok(Usage::Sensors { usage: Sensors::DataFieldDevicePosition }),
            (32,  1428) => Ok(Usage::Sensors { usage: Sensors::DataFieldStepCount }),
            (32,  1429) => Ok(Usage::Sensors { usage: Sensors::DataFieldStepCountReset }),
            (32,  1430) => Ok(Usage::Sensors { usage: Sensors::DataFieldStepDuration }),
            (32,  1431) => Ok(Usage::Sensors { usage: Sensors::DataFieldStepType }),
            (32,  1440) => Ok(Usage::Sensors { usage: Sensors::PropertyMinimumActivityDetectionInterval }),
            (32,  1441) => Ok(Usage::Sensors { usage: Sensors::PropertySupportedActivityTypes }),
            (32,  1442) => Ok(Usage::Sensors { usage: Sensors::PropertySubscribedActivityTypes }),
            (32,  1443) => Ok(Usage::Sensors { usage: Sensors::PropertySupportedStepTypes }),
            (32,  1444) => Ok(Usage::Sensors { usage: Sensors::PropertySubscribedStepTypes }),
            (32,  1445) => Ok(Usage::Sensors { usage: Sensors::PropertyFloorHeight }),
            (32,  1456) => Ok(Usage::Sensors { usage: Sensors::DataFieldCustomTypeID }),
            (32,  1472) => Ok(Usage::Sensors { usage: Sensors::PropertyCustom }),
            (32,  1473) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue1 }),
            (32,  1474) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue2 }),
            (32,  1475) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue3 }),
            (32,  1476) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue4 }),
            (32,  1477) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue5 }),
            (32,  1478) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue6 }),
            (32,  1479) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue7 }),
            (32,  1480) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue8 }),
            (32,  1481) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue9 }),
            (32,  1482) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue10 }),
            (32,  1483) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue11 }),
            (32,  1484) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue12 }),
            (32,  1485) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue13 }),
            (32,  1486) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue14 }),
            (32,  1487) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue15 }),
            (32,  1488) => Ok(Usage::Sensors { usage: Sensors::PropertyCustomValue16 }),
            (32,  1504) => Ok(Usage::Sensors { usage: Sensors::DataFieldHinge }),
            (32,  1505) => Ok(Usage::Sensors { usage: Sensors::DataFieldHingeAngle }),
            (32,  1520) => Ok(Usage::Sensors { usage: Sensors::DataFieldGestureSensor }),
            (32,  1521) => Ok(Usage::Sensors { usage: Sensors::DataFieldGestureState }),
            (32,  1522) => Ok(Usage::Sensors { usage: Sensors::DataFieldHingeFoldInitialAngle }),
            (32,  1523) => Ok(Usage::Sensors { usage: Sensors::DataFieldHingeFoldFinalAngle }),
            (32,  1524) => Ok(Usage::Sensors { usage: Sensors::DataFieldHingeFoldContributingPanel }),
            (32,  1525) => Ok(Usage::Sensors { usage: Sensors::DataFieldHingeFoldType }),
            (32,  2048) => Ok(Usage::Sensors { usage: Sensors::SensorStateUndefined }),
            (32,  2049) => Ok(Usage::Sensors { usage: Sensors::SensorStateReady }),
            (32,  2050) => Ok(Usage::Sensors { usage: Sensors::SensorStateNotAvailable }),
            (32,  2051) => Ok(Usage::Sensors { usage: Sensors::SensorStateNoData }),
            (32,  2052) => Ok(Usage::Sensors { usage: Sensors::SensorStateInitializing }),
            (32,  2053) => Ok(Usage::Sensors { usage: Sensors::SensorStateAccessDenied }),
            (32,  2054) => Ok(Usage::Sensors { usage: Sensors::SensorStateError }),
            (32,  2064) => Ok(Usage::Sensors { usage: Sensors::SensorEventUnknown }),
            (32,  2065) => Ok(Usage::Sensors { usage: Sensors::SensorEventStateChanged }),
            (32,  2066) => Ok(Usage::Sensors { usage: Sensors::SensorEventPropertyChanged }),
            (32,  2067) => Ok(Usage::Sensors { usage: Sensors::SensorEventDataUpdated }),
            (32,  2068) => Ok(Usage::Sensors { usage: Sensors::SensorEventPollResponse }),
            (32,  2069) => Ok(Usage::Sensors { usage: Sensors::SensorEventChangeSensitivity }),
            (32,  2070) => Ok(Usage::Sensors { usage: Sensors::SensorEventRangeMaximumReached }),
            (32,  2071) => Ok(Usage::Sensors { usage: Sensors::SensorEventRangeMinimumReached }),
            (32,  2072) => Ok(Usage::Sensors { usage: Sensors::SensorEventHighThresholdCrossUpward }),
            (32,  2073) => Ok(Usage::Sensors { usage: Sensors::SensorEventHighThresholdCrossDownward }),
            (32,  2074) => Ok(Usage::Sensors { usage: Sensors::SensorEventLowThresholdCrossUpward }),
            (32,  2075) => Ok(Usage::Sensors { usage: Sensors::SensorEventLowThresholdCrossDownward }),
            (32,  2076) => Ok(Usage::Sensors { usage: Sensors::SensorEventZeroThresholdCrossUpward }),
            (32,  2077) => Ok(Usage::Sensors { usage: Sensors::SensorEventZeroThresholdCrossDownward }),
            (32,  2078) => Ok(Usage::Sensors { usage: Sensors::SensorEventPeriodExceeded }),
            (32,  2079) => Ok(Usage::Sensors { usage: Sensors::SensorEventFrequencyExceeded }),
            (32,  2080) => Ok(Usage::Sensors { usage: Sensors::SensorEventComplexTrigger }),
            (32,  2096) => Ok(Usage::Sensors { usage: Sensors::ConnectionTypePCIntegrated }),
            (32,  2097) => Ok(Usage::Sensors { usage: Sensors::ConnectionTypePCAttached }),
            (32,  2098) => Ok(Usage::Sensors { usage: Sensors::ConnectionTypePCExternal }),
            (32,  2112) => Ok(Usage::Sensors { usage: Sensors::ReportingStateReportNoEvents }),
            (32,  2113) => Ok(Usage::Sensors { usage: Sensors::ReportingStateReportAllEvents }),
            (32,  2114) => Ok(Usage::Sensors { usage: Sensors::ReportingStateReportThresholdEvents }),
            (32,  2115) => Ok(Usage::Sensors { usage: Sensors::ReportingStateWakeOnNoEvents }),
            (32,  2116) => Ok(Usage::Sensors { usage: Sensors::ReportingStateWakeOnAllEvents }),
            (32,  2117) => Ok(Usage::Sensors { usage: Sensors::ReportingStateWakeOnThresholdEvents }),
            (32,  2118) => Ok(Usage::Sensors { usage: Sensors::ReportingStateAnytime }),
            (32,  2128) => Ok(Usage::Sensors { usage: Sensors::PowerStateUndefined }),
            (32,  2129) => Ok(Usage::Sensors { usage: Sensors::PowerStateD0FullPower }),
            (32,  2130) => Ok(Usage::Sensors { usage: Sensors::PowerStateD1LowPower }),
            (32,  2131) => Ok(Usage::Sensors { usage: Sensors::PowerStateD2StandbyPowerwithWakeup }),
            (32,  2132) => Ok(Usage::Sensors { usage: Sensors::PowerStateD3SleepwithWakeup }),
            (32,  2133) => Ok(Usage::Sensors { usage: Sensors::PowerStateD4PowerOff }),
            (32,  2144) => Ok(Usage::Sensors { usage: Sensors::AccuracyDefault }),
            (32,  2145) => Ok(Usage::Sensors { usage: Sensors::AccuracyHigh }),
            (32,  2146) => Ok(Usage::Sensors { usage: Sensors::AccuracyMedium }),
            (32,  2147) => Ok(Usage::Sensors { usage: Sensors::AccuracyLow }),
            (32,  2160) => Ok(Usage::Sensors { usage: Sensors::FixQualityNoFix }),
            (32,  2161) => Ok(Usage::Sensors { usage: Sensors::FixQualityGPS }),
            (32,  2162) => Ok(Usage::Sensors { usage: Sensors::FixQualityDGPS }),
            (32,  2176) => Ok(Usage::Sensors { usage: Sensors::FixTypeNoFix }),
            (32,  2177) => Ok(Usage::Sensors { usage: Sensors::FixTypeGPSSPSModeFixValid }),
            (32,  2178) => Ok(Usage::Sensors { usage: Sensors::FixTypeDGPSSPSModeFixValid }),
            (32,  2179) => Ok(Usage::Sensors { usage: Sensors::FixTypeGPSPPSModeFixValid }),
            (32,  2180) => Ok(Usage::Sensors { usage: Sensors::FixTypeRealTimeKinematic }),
            (32,  2181) => Ok(Usage::Sensors { usage: Sensors::FixTypeFloatRTK }),
            (32,  2182) => Ok(Usage::Sensors { usage: Sensors::FixTypeEstimateddeadreckoned }),
            (32,  2183) => Ok(Usage::Sensors { usage: Sensors::FixTypeManualInputMode }),
            (32,  2184) => Ok(Usage::Sensors { usage: Sensors::FixTypeSimulatorMode }),
            (32,  2192) => Ok(Usage::Sensors { usage: Sensors::GPSOperationModeManual }),
            (32,  2193) => Ok(Usage::Sensors { usage: Sensors::GPSOperationModeAutomatic }),
            (32,  2208) => Ok(Usage::Sensors { usage: Sensors::GPSSelectionModeAutonomous }),
            (32,  2209) => Ok(Usage::Sensors { usage: Sensors::GPSSelectionModeDGPS }),
            (32,  2210) => Ok(Usage::Sensors { usage: Sensors::GPSSelectionModeEstimateddeadreckoned }),
            (32,  2211) => Ok(Usage::Sensors { usage: Sensors::GPSSelectionModeManualInput }),
            (32,  2212) => Ok(Usage::Sensors { usage: Sensors::GPSSelectionModeSimulator }),
            (32,  2213) => Ok(Usage::Sensors { usage: Sensors::GPSSelectionModeDataNotValid }),
            (32,  2224) => Ok(Usage::Sensors { usage: Sensors::GPSStatusDataValid }),
            (32,  2225) => Ok(Usage::Sensors { usage: Sensors::GPSStatusDataNotValid }),
            (32,  2240) => Ok(Usage::Sensors { usage: Sensors::DayofWeekSunday }),
            (32,  2241) => Ok(Usage::Sensors { usage: Sensors::DayofWeekMonday }),
            (32,  2242) => Ok(Usage::Sensors { usage: Sensors::DayofWeekTuesday }),
            (32,  2243) => Ok(Usage::Sensors { usage: Sensors::DayofWeekWednesday }),
            (32,  2244) => Ok(Usage::Sensors { usage: Sensors::DayofWeekThursday }),
            (32,  2245) => Ok(Usage::Sensors { usage: Sensors::DayofWeekFriday }),
            (32,  2246) => Ok(Usage::Sensors { usage: Sensors::DayofWeekSaturday }),
            (32,  2256) => Ok(Usage::Sensors { usage: Sensors::KindCategory }),
            (32,  2257) => Ok(Usage::Sensors { usage: Sensors::KindType }),
            (32,  2258) => Ok(Usage::Sensors { usage: Sensors::KindEvent }),
            (32,  2259) => Ok(Usage::Sensors { usage: Sensors::KindProperty }),
            (32,  2260) => Ok(Usage::Sensors { usage: Sensors::KindDataField }),
            (32,  2272) => Ok(Usage::Sensors { usage: Sensors::MagnetometerAccuracyLow }),
            (32,  2273) => Ok(Usage::Sensors { usage: Sensors::MagnetometerAccuracyMedium }),
            (32,  2274) => Ok(Usage::Sensors { usage: Sensors::MagnetometerAccuracyHigh }),
            (32,  2288) => Ok(Usage::Sensors { usage: Sensors::SimpleOrientationDirectionNotRotated }),
            (32,  2289) => Ok(Usage::Sensors { usage: Sensors::SimpleOrientationDirectionRotated90DegreesCCW }),
            (32,  2290) => Ok(Usage::Sensors { usage: Sensors::SimpleOrientationDirectionRotated180DegreesCCW }),
            (32,  2291) => Ok(Usage::Sensors { usage: Sensors::SimpleOrientationDirectionRotated270DegreesCCW }),
            (32,  2292) => Ok(Usage::Sensors { usage: Sensors::SimpleOrientationDirectionFaceUp }),
            (32,  2293) => Ok(Usage::Sensors { usage: Sensors::SimpleOrientationDirectionFaceDown }),
            (32,  2304) => Ok(Usage::Sensors { usage: Sensors::VT_NULL }),
            (32,  2305) => Ok(Usage::Sensors { usage: Sensors::VT_BOOL }),
            (32,  2306) => Ok(Usage::Sensors { usage: Sensors::VT_UI1 }),
            (32,  2307) => Ok(Usage::Sensors { usage: Sensors::VT_I1 }),
            (32,  2308) => Ok(Usage::Sensors { usage: Sensors::VT_UI2 }),
            (32,  2309) => Ok(Usage::Sensors { usage: Sensors::VT_I2 }),
            (32,  2310) => Ok(Usage::Sensors { usage: Sensors::VT_UI4 }),
            (32,  2311) => Ok(Usage::Sensors { usage: Sensors::VT_I4 }),
            (32,  2312) => Ok(Usage::Sensors { usage: Sensors::VT_UI8 }),
            (32,  2313) => Ok(Usage::Sensors { usage: Sensors::VT_I8 }),
            (32,  2314) => Ok(Usage::Sensors { usage: Sensors::VT_R4 }),
            (32,  2315) => Ok(Usage::Sensors { usage: Sensors::VT_R8 }),
            (32,  2316) => Ok(Usage::Sensors { usage: Sensors::VT_WSTR }),
            (32,  2317) => Ok(Usage::Sensors { usage: Sensors::VT_STR }),
            (32,  2318) => Ok(Usage::Sensors { usage: Sensors::VT_CLSID }),
            (32,  2319) => Ok(Usage::Sensors { usage: Sensors::VT_VECTORVT_UI1 }),
            (32,  2320) => Ok(Usage::Sensors { usage: Sensors::VT_F16E0 }),
            (32,  2321) => Ok(Usage::Sensors { usage: Sensors::VT_F16E1 }),
            (32,  2322) => Ok(Usage::Sensors { usage: Sensors::VT_F16E2 }),
            (32,  2323) => Ok(Usage::Sensors { usage: Sensors::VT_F16E3 }),
            (32,  2324) => Ok(Usage::Sensors { usage: Sensors::VT_F16E4 }),
            (32,  2325) => Ok(Usage::Sensors { usage: Sensors::VT_F16E5 }),
            (32,  2326) => Ok(Usage::Sensors { usage: Sensors::VT_F16E6 }),
            (32,  2327) => Ok(Usage::Sensors { usage: Sensors::VT_F16E7 }),
            (32,  2328) => Ok(Usage::Sensors { usage: Sensors::VT_F16E8 }),
            (32,  2329) => Ok(Usage::Sensors { usage: Sensors::VT_F16E9 }),
            (32,  2330) => Ok(Usage::Sensors { usage: Sensors::VT_F16EA }),
            (32,  2331) => Ok(Usage::Sensors { usage: Sensors::VT_F16EB }),
            (32,  2332) => Ok(Usage::Sensors { usage: Sensors::VT_F16EC }),
            (32,  2333) => Ok(Usage::Sensors { usage: Sensors::VT_F16ED }),
            (32,  2334) => Ok(Usage::Sensors { usage: Sensors::VT_F16EE }),
            (32,  2335) => Ok(Usage::Sensors { usage: Sensors::VT_F16EF }),
            (32,  2336) => Ok(Usage::Sensors { usage: Sensors::VT_F32E0 }),
            (32,  2337) => Ok(Usage::Sensors { usage: Sensors::VT_F32E1 }),
            (32,  2338) => Ok(Usage::Sensors { usage: Sensors::VT_F32E2 }),
            (32,  2339) => Ok(Usage::Sensors { usage: Sensors::VT_F32E3 }),
            (32,  2340) => Ok(Usage::Sensors { usage: Sensors::VT_F32E4 }),
            (32,  2341) => Ok(Usage::Sensors { usage: Sensors::VT_F32E5 }),
            (32,  2342) => Ok(Usage::Sensors { usage: Sensors::VT_F32E6 }),
            (32,  2343) => Ok(Usage::Sensors { usage: Sensors::VT_F32E7 }),
            (32,  2344) => Ok(Usage::Sensors { usage: Sensors::VT_F32E8 }),
            (32,  2345) => Ok(Usage::Sensors { usage: Sensors::VT_F32E9 }),
            (32,  2346) => Ok(Usage::Sensors { usage: Sensors::VT_F32EA }),
            (32,  2347) => Ok(Usage::Sensors { usage: Sensors::VT_F32EB }),
            (32,  2348) => Ok(Usage::Sensors { usage: Sensors::VT_F32EC }),
            (32,  2349) => Ok(Usage::Sensors { usage: Sensors::VT_F32ED }),
            (32,  2350) => Ok(Usage::Sensors { usage: Sensors::VT_F32EE }),
            (32,  2351) => Ok(Usage::Sensors { usage: Sensors::VT_F32EF }),
            (32,  2352) => Ok(Usage::Sensors { usage: Sensors::ActivityTypeUnknown }),
            (32,  2353) => Ok(Usage::Sensors { usage: Sensors::ActivityTypeStationary }),
            (32,  2354) => Ok(Usage::Sensors { usage: Sensors::ActivityTypeFidgeting }),
            (32,  2355) => Ok(Usage::Sensors { usage: Sensors::ActivityTypeWalking }),
            (32,  2356) => Ok(Usage::Sensors { usage: Sensors::ActivityTypeRunning }),
            (32,  2357) => Ok(Usage::Sensors { usage: Sensors::ActivityTypeInVehicle }),
            (32,  2358) => Ok(Usage::Sensors { usage: Sensors::ActivityTypeBiking }),
            (32,  2359) => Ok(Usage::Sensors { usage: Sensors::ActivityTypeIdle }),
            (32,  2368) => Ok(Usage::Sensors { usage: Sensors::UnitNotSpecified }),
            (32,  2369) => Ok(Usage::Sensors { usage: Sensors::UnitLux }),
            (32,  2370) => Ok(Usage::Sensors { usage: Sensors::UnitDegreesKelvin }),
            (32,  2371) => Ok(Usage::Sensors { usage: Sensors::UnitDegreesCelsius }),
            (32,  2372) => Ok(Usage::Sensors { usage: Sensors::UnitPascal }),
            (32,  2373) => Ok(Usage::Sensors { usage: Sensors::UnitNewton }),
            (32,  2374) => Ok(Usage::Sensors { usage: Sensors::UnitMetersSecond }),
            (32,  2375) => Ok(Usage::Sensors { usage: Sensors::UnitKilogram }),
            (32,  2376) => Ok(Usage::Sensors { usage: Sensors::UnitMeter }),
            (32,  2377) => Ok(Usage::Sensors { usage: Sensors::UnitMetersSecondSecond }),
            (32,  2378) => Ok(Usage::Sensors { usage: Sensors::UnitFarad }),
            (32,  2379) => Ok(Usage::Sensors { usage: Sensors::UnitAmpere }),
            (32,  2380) => Ok(Usage::Sensors { usage: Sensors::UnitWatt }),
            (32,  2381) => Ok(Usage::Sensors { usage: Sensors::UnitHenry }),
            (32,  2382) => Ok(Usage::Sensors { usage: Sensors::UnitOhm }),
            (32,  2383) => Ok(Usage::Sensors { usage: Sensors::UnitVolt }),
            (32,  2384) => Ok(Usage::Sensors { usage: Sensors::UnitHertz }),
            (32,  2385) => Ok(Usage::Sensors { usage: Sensors::UnitBar }),
            (32,  2386) => Ok(Usage::Sensors { usage: Sensors::UnitDegreesAnticlockwise }),
            (32,  2387) => Ok(Usage::Sensors { usage: Sensors::UnitDegreesClockwise }),
            (32,  2388) => Ok(Usage::Sensors { usage: Sensors::UnitDegrees }),
            (32,  2389) => Ok(Usage::Sensors { usage: Sensors::UnitDegreesSecond }),
            (32,  2390) => Ok(Usage::Sensors { usage: Sensors::UnitDegreesSecondSecond }),
            (32,  2391) => Ok(Usage::Sensors { usage: Sensors::UnitKnot }),
            (32,  2392) => Ok(Usage::Sensors { usage: Sensors::UnitPercent }),
            (32,  2393) => Ok(Usage::Sensors { usage: Sensors::UnitSecond }),
            (32,  2394) => Ok(Usage::Sensors { usage: Sensors::UnitMillisecond }),
            (32,  2395) => Ok(Usage::Sensors { usage: Sensors::UnitG }),
            (32,  2396) => Ok(Usage::Sensors { usage: Sensors::UnitBytes }),
            (32,  2397) => Ok(Usage::Sensors { usage: Sensors::UnitMilligauss }),
            (32,  2398) => Ok(Usage::Sensors { usage: Sensors::UnitBits }),
            (32,  2400) => Ok(Usage::Sensors { usage: Sensors::ActivityStateNoStateChange }),
            (32,  2401) => Ok(Usage::Sensors { usage: Sensors::ActivityStateStartActivity }),
            (32,  2402) => Ok(Usage::Sensors { usage: Sensors::ActivityStateEndActivity }),
            (32,  2416) => Ok(Usage::Sensors { usage: Sensors::Exponent0 }),
            (32,  2417) => Ok(Usage::Sensors { usage: Sensors::Exponent1 }),
            (32,  2418) => Ok(Usage::Sensors { usage: Sensors::Exponent2 }),
            (32,  2419) => Ok(Usage::Sensors { usage: Sensors::Exponent3 }),
            (32,  2420) => Ok(Usage::Sensors { usage: Sensors::Exponent4 }),
            (32,  2421) => Ok(Usage::Sensors { usage: Sensors::Exponent5 }),
            (32,  2422) => Ok(Usage::Sensors { usage: Sensors::Exponent6 }),
            (32,  2423) => Ok(Usage::Sensors { usage: Sensors::Exponent7 }),
            (32,  2424) => Ok(Usage::Sensors { usage: Sensors::Exponent8 }),
            (32,  2425) => Ok(Usage::Sensors { usage: Sensors::Exponent9 }),
            (32,  2426) => Ok(Usage::Sensors { usage: Sensors::ExponentA }),
            (32,  2427) => Ok(Usage::Sensors { usage: Sensors::ExponentB }),
            (32,  2428) => Ok(Usage::Sensors { usage: Sensors::ExponentC }),
            (32,  2429) => Ok(Usage::Sensors { usage: Sensors::ExponentD }),
            (32,  2430) => Ok(Usage::Sensors { usage: Sensors::ExponentE }),
            (32,  2431) => Ok(Usage::Sensors { usage: Sensors::ExponentF }),
            (32,  2432) => Ok(Usage::Sensors { usage: Sensors::DevicePositionUnknown }),
            (32,  2433) => Ok(Usage::Sensors { usage: Sensors::DevicePositionUnchanged }),
            (32,  2434) => Ok(Usage::Sensors { usage: Sensors::DevicePositionOnDesk }),
            (32,  2435) => Ok(Usage::Sensors { usage: Sensors::DevicePositionInHand }),
            (32,  2436) => Ok(Usage::Sensors { usage: Sensors::DevicePositionMovinginBag }),
            (32,  2437) => Ok(Usage::Sensors { usage: Sensors::DevicePositionStationaryinBag }),
            (32,  2448) => Ok(Usage::Sensors { usage: Sensors::StepTypeUnknown }),
            (32,  2449) => Ok(Usage::Sensors { usage: Sensors::StepTypeWalking }),
            (32,  2450) => Ok(Usage::Sensors { usage: Sensors::StepTypeRunning }),
            (32,  2464) => Ok(Usage::Sensors { usage: Sensors::GestureStateUnknown }),
            (32,  2465) => Ok(Usage::Sensors { usage: Sensors::GestureStateStarted }),
            (32,  2466) => Ok(Usage::Sensors { usage: Sensors::GestureStateCompleted }),
            (32,  2467) => Ok(Usage::Sensors { usage: Sensors::GestureStateCancelled }),
            (32,  2480) => Ok(Usage::Sensors { usage: Sensors::HingeFoldContributingPanelUnknown }),
            (32,  2481) => Ok(Usage::Sensors { usage: Sensors::HingeFoldContributingPanelPanel1 }),
            (32,  2482) => Ok(Usage::Sensors { usage: Sensors::HingeFoldContributingPanelPanel2 }),
            (32,  2483) => Ok(Usage::Sensors { usage: Sensors::HingeFoldContributingPanelBoth }),
            (32,  2484) => Ok(Usage::Sensors { usage: Sensors::HingeFoldTypeUnknown }),
            (32,  2485) => Ok(Usage::Sensors { usage: Sensors::HingeFoldTypeIncreasing }),
            (32,  2486) => Ok(Usage::Sensors { usage: Sensors::HingeFoldTypeDecreasing }),
            (32,  2496) => Ok(Usage::Sensors { usage: Sensors::HumanPresenceDetectionTypeVendorDefinedNonBiometric }),
            (32,  2497) => Ok(Usage::Sensors { usage: Sensors::HumanPresenceDetectionTypeVendorDefinedBiometric }),
            (32,  2498) => Ok(Usage::Sensors { usage: Sensors::HumanPresenceDetectionTypeFacialBiometric }),
            (32,  2499) => Ok(Usage::Sensors { usage: Sensors::HumanPresenceDetectionTypeAudioBiometric }),
            (32,  4096) => Ok(Usage::Sensors { usage: Sensors::ModifierChangeSensitivityAbsolute }),
            (32,  8192) => Ok(Usage::Sensors { usage: Sensors::ModifierMaximum }),
            (32,  12288) => Ok(Usage::Sensors { usage: Sensors::ModifierMinimum }),
            (32,  16384) => Ok(Usage::Sensors { usage: Sensors::ModifierAccuracy }),
            (32,  20480) => Ok(Usage::Sensors { usage: Sensors::ModifierResolution }),
            (32,  24576) => Ok(Usage::Sensors { usage: Sensors::ModifierThresholdHigh }),
            (32,  28672) => Ok(Usage::Sensors { usage: Sensors::ModifierThresholdLow }),
            (32,  32768) => Ok(Usage::Sensors { usage: Sensors::ModifierCalibrationOffset }),
            (32,  36864) => Ok(Usage::Sensors { usage: Sensors::ModifierCalibrationMultiplier }),
            (32,  40960) => Ok(Usage::Sensors { usage: Sensors::ModifierReportInterval }),
            (32,  45056) => Ok(Usage::Sensors { usage: Sensors::ModifierFrequencyMax }),
            (32,  49152) => Ok(Usage::Sensors { usage: Sensors::ModifierPeriodMax }),
            (32,  53248) => Ok(Usage::Sensors { usage: Sensors::ModifierChangeSensitivityPercentofRange }),
            (32,  57344) => Ok(Usage::Sensors { usage: Sensors::ModifierChangeSensitivityPercentRelative }),
            (32,  61440) => Ok(Usage::Sensors { usage: Sensors::ModifierVendorReserved }),
            (64,  1) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::MedicalUltrasound }),
            (64,  32) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::VCRAcquisition }),
            (64,  33) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::FreezeThaw }),
            (64,  34) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::ClipStore }),
            (64,  35) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::Update }),
            (64,  36) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::Next }),
            (64,  37) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::Save }),
            (64,  38) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::Print }),
            (64,  39) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::MicrophoneEnable }),
            (64,  64) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::Cine }),
            (64,  65) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::TransmitPower }),
            (64,  66) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::Volume }),
            (64,  67) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::Focus }),
            (64,  68) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::Depth }),
            (64,  96) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::SoftStepPrimary }),
            (64,  97) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::SoftStepSecondary }),
            (64,  112) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::DepthGainCompensation }),
            (64,  128) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::ZoomSelect }),
            (64,  129) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::ZoomAdjust }),
            (64,  130) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::SpectralDopplerModeSelect }),
            (64,  131) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::SpectralDopplerAdjust }),
            (64,  132) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::ColorDopplerModeSelect }),
            (64,  133) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::ColorDopplerAdjust }),
            (64,  134) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::MotionModeSelect }),
            (64,  135) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::MotionModeAdjust }),
            (64,  136) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::TwoDModeSelect }),
            (64,  137) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::TwoDModeAdjust }),
            (64,  160) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::SoftControlSelect }),
            (64,  161) => Ok(Usage::MedicalInstrument { usage: MedicalInstrument::SoftControlAdjust }),
            (65,  1) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDisplay }),
            (65,  2) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRow }),
            (65,  3) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::EightDotBrailleCell }),
            (65,  4) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::SixDotBrailleCell }),
            (65,  5) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::NumberofBrailleCells }),
            (65,  6) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::ScreenReaderControl }),
            (65,  7) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::ScreenReaderIdentifier }),
            (65,  250) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::RouterSet1 }),
            (65,  251) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::RouterSet2 }),
            (65,  252) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::RouterSet3 }),
            (65,  256) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::RouterKey }),
            (65,  257) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::RowRouterKey }),
            (65,  512) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleButtons }),
            (65,  513) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot1 }),
            (65,  514) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot2 }),
            (65,  515) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot3 }),
            (65,  516) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot4 }),
            (65,  517) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot5 }),
            (65,  518) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot6 }),
            (65,  519) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot7 }),
            (65,  520) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardDot8 }),
            (65,  521) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardSpace }),
            (65,  522) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardLeftSpace }),
            (65,  523) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleKeyboardRightSpace }),
            (65,  524) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleFaceControls }),
            (65,  525) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleLeftControls }),
            (65,  526) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRightControls }),
            (65,  527) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleTopControls }),
            (65,  528) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickCenter }),
            (65,  529) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickUp }),
            (65,  530) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickDown }),
            (65,  531) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickLeft }),
            (65,  532) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleJoystickRight }),
            (65,  533) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadCenter }),
            (65,  534) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadUp }),
            (65,  535) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadDown }),
            (65,  536) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadLeft }),
            (65,  537) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleDPadRight }),
            (65,  538) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BraillePanLeft }),
            (65,  539) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BraillePanRight }),
            (65,  540) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRockerUp }),
            (65,  541) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRockerDown }),
            (65,  542) => Ok(Usage::BrailleDisplay { usage: BrailleDisplay::BrailleRockerPress }),
            (89,  1) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArray }),
            (89,  2) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArrayAttributesReport }),
            (89,  3) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampCount }),
            (89,  4) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::BoundingBoxWidthInMicrometers }),
            (89,  5) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::BoundingBoxHeightInMicrometers }),
            (89,  6) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::BoundingBoxDepthInMicrometers }),
            (89,  7) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArrayKind }),
            (89,  8) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::MinUpdateIntervalInMicroseconds }),
            (89,  32) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampAttributesRequestReport }),
            (89,  33) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampId }),
            (89,  34) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampAttributesResponseReport }),
            (89,  35) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::PositionXInMicrometers }),
            (89,  36) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::PositionYInMicrometers }),
            (89,  37) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::PositionZInMicrometers }),
            (89,  38) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampPurposes }),
            (89,  39) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::UpdateLatencyInMicroseconds }),
            (89,  40) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::RedLevelCount }),
            (89,  41) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::GreenLevelCount }),
            (89,  42) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::BlueLevelCount }),
            (89,  43) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::IntensityLevelCount }),
            (89,  44) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::IsProgrammable }),
            (89,  45) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::InputBinding }),
            (89,  80) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampMultiUpdateReport }),
            (89,  81) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::RedUpdateChannel }),
            (89,  82) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::GreenUpdateChannel }),
            (89,  83) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::BlueUpdateChannel }),
            (89,  84) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::IntensityUpdateChannel }),
            (89,  85) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampUpdateFlags }),
            (89,  96) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampRangeUpdateReport }),
            (89,  97) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampIdStart }),
            (89,  98) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampIdEnd }),
            (89,  112) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::LampArrayControlReport }),
            (89,  113) => Ok(Usage::LightingAndIllumination { usage: LightingAndIllumination::AutonomousMode }),
            (128,  1) => Ok(Usage::Monitor { usage: Monitor::MonitorControl }),
            (128,  2) => Ok(Usage::Monitor { usage: Monitor::EDIDInformation }),
            (128,  3) => Ok(Usage::Monitor { usage: Monitor::VDIFInformation }),
            (128,  4) => Ok(Usage::Monitor { usage: Monitor::VESAVersion }),
            (130,  1) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::Degauss }),
            (130,  16) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::Brightness }),
            (130,  18) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::Contrast }),
            (130,  22) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::RedVideoGain }),
            (130,  24) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::GreenVideoGain }),
            (130,  26) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::BlueVideoGain }),
            (130,  28) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::Focus }),
            (130,  32) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalPosition }),
            (130,  34) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalSize }),
            (130,  36) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalPincushion }),
            (130,  38) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalPincushionBalance }),
            (130,  40) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalMisconvergence }),
            (130,  42) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalLinearity }),
            (130,  44) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalLinearityBalance }),
            (130,  48) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalPosition }),
            (130,  50) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalSize }),
            (130,  52) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalPincushion }),
            (130,  54) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalPincushionBalance }),
            (130,  56) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalMisconvergence }),
            (130,  58) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalLinearity }),
            (130,  60) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalLinearityBalance }),
            (130,  64) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::ParallelogramDistortionKeyBalance }),
            (130,  66) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::TrapezoidalDistortionKey }),
            (130,  68) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::TiltRotation }),
            (130,  70) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::TopCornerDistortionControl }),
            (130,  72) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::TopCornerDistortionBalance }),
            (130,  74) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::BottomCornerDistortionControl }),
            (130,  76) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::BottomCornerDistortionBalance }),
            (130,  86) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalMoiré }),
            (130,  88) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalMoiré }),
            (130,  94) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::InputLevelSelect }),
            (130,  96) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::InputSourceSelect }),
            (130,  108) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::RedVideoBlackLevel }),
            (130,  110) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::GreenVideoBlackLevel }),
            (130,  112) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::BlueVideoBlackLevel }),
            (130,  162) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::AutoSizeCenter }),
            (130,  164) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::PolarityHorizontalSynchronization }),
            (130,  166) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::PolarityVerticalSynchronization }),
            (130,  168) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::SynchronizationType }),
            (130,  170) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::ScreenOrientation }),
            (130,  172) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::HorizontalFrequency }),
            (130,  174) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::VerticalFrequency }),
            (130,  176) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::Settings }),
            (130,  202) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::OnScreenDisplay }),
            (130,  212) => Ok(Usage::VESAVirtualControls { usage: VESAVirtualControls::StereoMode }),
            (132,  1) => Ok(Usage::Power { usage: Power::iName }),
            (132,  2) => Ok(Usage::Power { usage: Power::PresentStatus }),
            (132,  3) => Ok(Usage::Power { usage: Power::ChangedStatus }),
            (132,  4) => Ok(Usage::Power { usage: Power::UPS }),
            (132,  5) => Ok(Usage::Power { usage: Power::PowerSupply }),
            (132,  16) => Ok(Usage::Power { usage: Power::BatterySystem }),
            (132,  17) => Ok(Usage::Power { usage: Power::BatterySystemId }),
            (132,  18) => Ok(Usage::Power { usage: Power::Battery }),
            (132,  19) => Ok(Usage::Power { usage: Power::BatteryId }),
            (132,  20) => Ok(Usage::Power { usage: Power::Charger }),
            (132,  21) => Ok(Usage::Power { usage: Power::ChargerId }),
            (132,  22) => Ok(Usage::Power { usage: Power::PowerConverter }),
            (132,  23) => Ok(Usage::Power { usage: Power::PowerConverterId }),
            (132,  24) => Ok(Usage::Power { usage: Power::OutletSystem }),
            (132,  25) => Ok(Usage::Power { usage: Power::OutletSystemId }),
            (132,  26) => Ok(Usage::Power { usage: Power::Input }),
            (132,  27) => Ok(Usage::Power { usage: Power::InputId }),
            (132,  28) => Ok(Usage::Power { usage: Power::Output }),
            (132,  29) => Ok(Usage::Power { usage: Power::OutputId }),
            (132,  30) => Ok(Usage::Power { usage: Power::Flow }),
            (132,  31) => Ok(Usage::Power { usage: Power::FlowId }),
            (132,  32) => Ok(Usage::Power { usage: Power::Outlet }),
            (132,  33) => Ok(Usage::Power { usage: Power::OutletId }),
            (132,  34) => Ok(Usage::Power { usage: Power::Gang }),
            (132,  35) => Ok(Usage::Power { usage: Power::GangId }),
            (132,  36) => Ok(Usage::Power { usage: Power::PowerSummary }),
            (132,  37) => Ok(Usage::Power { usage: Power::PowerSummaryId }),
            (132,  48) => Ok(Usage::Power { usage: Power::Voltage }),
            (132,  49) => Ok(Usage::Power { usage: Power::Current }),
            (132,  50) => Ok(Usage::Power { usage: Power::Frequency }),
            (132,  51) => Ok(Usage::Power { usage: Power::ApparentPower }),
            (132,  52) => Ok(Usage::Power { usage: Power::ActivePower }),
            (132,  53) => Ok(Usage::Power { usage: Power::PercentLoad }),
            (132,  54) => Ok(Usage::Power { usage: Power::Temperature }),
            (132,  55) => Ok(Usage::Power { usage: Power::Humidity }),
            (132,  56) => Ok(Usage::Power { usage: Power::BadCount }),
            (132,  64) => Ok(Usage::Power { usage: Power::ConfigVoltage }),
            (132,  65) => Ok(Usage::Power { usage: Power::ConfigCurrent }),
            (132,  66) => Ok(Usage::Power { usage: Power::ConfigFrequency }),
            (132,  67) => Ok(Usage::Power { usage: Power::ConfigApparentPower }),
            (132,  68) => Ok(Usage::Power { usage: Power::ConfigActivePower }),
            (132,  69) => Ok(Usage::Power { usage: Power::ConfigPercentLoad }),
            (132,  70) => Ok(Usage::Power { usage: Power::ConfigTemperature }),
            (132,  71) => Ok(Usage::Power { usage: Power::ConfigHumidity }),
            (132,  80) => Ok(Usage::Power { usage: Power::SwitchOnControl }),
            (132,  81) => Ok(Usage::Power { usage: Power::SwitchOffControl }),
            (132,  82) => Ok(Usage::Power { usage: Power::ToggleControl }),
            (132,  83) => Ok(Usage::Power { usage: Power::LowVoltageTransfer }),
            (132,  84) => Ok(Usage::Power { usage: Power::HighVoltageTransfer }),
            (132,  85) => Ok(Usage::Power { usage: Power::DelayBeforeReboot }),
            (132,  86) => Ok(Usage::Power { usage: Power::DelayBeforeStartup }),
            (132,  87) => Ok(Usage::Power { usage: Power::DelayBeforeShutdown }),
            (132,  88) => Ok(Usage::Power { usage: Power::Test }),
            (132,  89) => Ok(Usage::Power { usage: Power::ModuleReset }),
            (132,  90) => Ok(Usage::Power { usage: Power::AudibleAlarmControl }),
            (132,  96) => Ok(Usage::Power { usage: Power::Present }),
            (132,  97) => Ok(Usage::Power { usage: Power::Good }),
            (132,  98) => Ok(Usage::Power { usage: Power::InternalFailure }),
            (132,  99) => Ok(Usage::Power { usage: Power::VoltagOutOfRange }),
            (132,  100) => Ok(Usage::Power { usage: Power::FrequencyOutOfRange }),
            (132,  101) => Ok(Usage::Power { usage: Power::Overload }),
            (132,  102) => Ok(Usage::Power { usage: Power::OverCharged }),
            (132,  103) => Ok(Usage::Power { usage: Power::OverTemperature }),
            (132,  104) => Ok(Usage::Power { usage: Power::ShutdownRequested }),
            (132,  105) => Ok(Usage::Power { usage: Power::ShutdownImminent }),
            (132,  107) => Ok(Usage::Power { usage: Power::SwitchOnOff }),
            (132,  108) => Ok(Usage::Power { usage: Power::Switchable }),
            (132,  109) => Ok(Usage::Power { usage: Power::Used }),
            (132,  110) => Ok(Usage::Power { usage: Power::Boost }),
            (132,  111) => Ok(Usage::Power { usage: Power::Buck }),
            (132,  112) => Ok(Usage::Power { usage: Power::Initialized }),
            (132,  113) => Ok(Usage::Power { usage: Power::Tested }),
            (132,  114) => Ok(Usage::Power { usage: Power::AwaitingPower }),
            (132,  115) => Ok(Usage::Power { usage: Power::CommunicationLost }),
            (132,  253) => Ok(Usage::Power { usage: Power::iManufacturer }),
            (132,  254) => Ok(Usage::Power { usage: Power::iProduct }),
            (132,  255) => Ok(Usage::Power { usage: Power::iSerialNumber }),
            (133,  1) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatteryBatteryMode }),
            (133,  2) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatteryBatteryStatus }),
            (133,  3) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatteryAlarmWarning }),
            (133,  4) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatteryChargerMode }),
            (133,  5) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatteryChargerStatus }),
            (133,  6) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatteryChargerSpecInfo }),
            (133,  7) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatterySelectorState }),
            (133,  8) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatterySelectorPresets }),
            (133,  9) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatterySelectorInfo }),
            (133,  16) => Ok(Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction1 }),
            (133,  17) => Ok(Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction2 }),
            (133,  18) => Ok(Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction3 }),
            (133,  19) => Ok(Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction4 }),
            (133,  20) => Ok(Usage::BatterySystem { usage: BatterySystem::OptionalMfgFunction5 }),
            (133,  21) => Ok(Usage::BatterySystem { usage: BatterySystem::ConnectionToSMBus }),
            (133,  22) => Ok(Usage::BatterySystem { usage: BatterySystem::OutputConnection }),
            (133,  23) => Ok(Usage::BatterySystem { usage: BatterySystem::ChargerConnection }),
            (133,  24) => Ok(Usage::BatterySystem { usage: BatterySystem::BatteryInsertion }),
            (133,  25) => Ok(Usage::BatterySystem { usage: BatterySystem::UseNext }),
            (133,  26) => Ok(Usage::BatterySystem { usage: BatterySystem::OKToUse }),
            (133,  27) => Ok(Usage::BatterySystem { usage: BatterySystem::BatterySupported }),
            (133,  28) => Ok(Usage::BatterySystem { usage: BatterySystem::SelectorRevision }),
            (133,  29) => Ok(Usage::BatterySystem { usage: BatterySystem::ChargingIndicator }),
            (133,  40) => Ok(Usage::BatterySystem { usage: BatterySystem::ManufacturerAccess }),
            (133,  41) => Ok(Usage::BatterySystem { usage: BatterySystem::RemainingCapacityLimit }),
            (133,  42) => Ok(Usage::BatterySystem { usage: BatterySystem::RemainingTimeLimit }),
            (133,  43) => Ok(Usage::BatterySystem { usage: BatterySystem::AtRate }),
            (133,  44) => Ok(Usage::BatterySystem { usage: BatterySystem::CapacityMode }),
            (133,  45) => Ok(Usage::BatterySystem { usage: BatterySystem::BroadcastToCharger }),
            (133,  46) => Ok(Usage::BatterySystem { usage: BatterySystem::PrimaryBattery }),
            (133,  47) => Ok(Usage::BatterySystem { usage: BatterySystem::ChargeController }),
            (133,  64) => Ok(Usage::BatterySystem { usage: BatterySystem::TerminateCharge }),
            (133,  65) => Ok(Usage::BatterySystem { usage: BatterySystem::TerminateDischarge }),
            (133,  66) => Ok(Usage::BatterySystem { usage: BatterySystem::BelowRemainingCapacityLimit }),
            (133,  67) => Ok(Usage::BatterySystem { usage: BatterySystem::RemainingTimeLimitExpired }),
            (133,  68) => Ok(Usage::BatterySystem { usage: BatterySystem::Charging }),
            (133,  69) => Ok(Usage::BatterySystem { usage: BatterySystem::Discharging }),
            (133,  70) => Ok(Usage::BatterySystem { usage: BatterySystem::FullyCharged }),
            (133,  71) => Ok(Usage::BatterySystem { usage: BatterySystem::FullyDischarged }),
            (133,  72) => Ok(Usage::BatterySystem { usage: BatterySystem::ConditioningFlag }),
            (133,  73) => Ok(Usage::BatterySystem { usage: BatterySystem::AtRateOK }),
            (133,  74) => Ok(Usage::BatterySystem { usage: BatterySystem::SmartBatteryErrorCode }),
            (133,  75) => Ok(Usage::BatterySystem { usage: BatterySystem::NeedReplacement }),
            (133,  96) => Ok(Usage::BatterySystem { usage: BatterySystem::AtRateTimeToFull }),
            (133,  97) => Ok(Usage::BatterySystem { usage: BatterySystem::AtRateTimeToEmpty }),
            (133,  98) => Ok(Usage::BatterySystem { usage: BatterySystem::AverageCurrent }),
            (133,  99) => Ok(Usage::BatterySystem { usage: BatterySystem::MaxError }),
            (133,  100) => Ok(Usage::BatterySystem { usage: BatterySystem::RelativeStateOfCharge }),
            (133,  101) => Ok(Usage::BatterySystem { usage: BatterySystem::AbsoluteStateOfCharge }),
            (133,  102) => Ok(Usage::BatterySystem { usage: BatterySystem::RemainingCapacity }),
            (133,  103) => Ok(Usage::BatterySystem { usage: BatterySystem::FullChargeCapacity }),
            (133,  104) => Ok(Usage::BatterySystem { usage: BatterySystem::RunTimeToEmpty }),
            (133,  105) => Ok(Usage::BatterySystem { usage: BatterySystem::AverageTimeToEmpty }),
            (133,  106) => Ok(Usage::BatterySystem { usage: BatterySystem::AverageTimeToFull }),
            (133,  107) => Ok(Usage::BatterySystem { usage: BatterySystem::CycleCount }),
            (133,  128) => Ok(Usage::BatterySystem { usage: BatterySystem::BatteryPackModelLevel }),
            (133,  129) => Ok(Usage::BatterySystem { usage: BatterySystem::InternalChargeController }),
            (133,  130) => Ok(Usage::BatterySystem { usage: BatterySystem::PrimaryBatterySupport }),
            (133,  131) => Ok(Usage::BatterySystem { usage: BatterySystem::DesignCapacity }),
            (133,  132) => Ok(Usage::BatterySystem { usage: BatterySystem::SpecificationInfo }),
            (133,  133) => Ok(Usage::BatterySystem { usage: BatterySystem::ManufactureDate }),
            (133,  134) => Ok(Usage::BatterySystem { usage: BatterySystem::SerialNumber }),
            (133,  135) => Ok(Usage::BatterySystem { usage: BatterySystem::iManufacturerName }),
            (133,  136) => Ok(Usage::BatterySystem { usage: BatterySystem::iDeviceName }),
            (133,  137) => Ok(Usage::BatterySystem { usage: BatterySystem::iDeviceChemistry }),
            (133,  138) => Ok(Usage::BatterySystem { usage: BatterySystem::ManufacturerData }),
            (133,  139) => Ok(Usage::BatterySystem { usage: BatterySystem::Rechargable }),
            (133,  140) => Ok(Usage::BatterySystem { usage: BatterySystem::WarningCapacityLimit }),
            (133,  141) => Ok(Usage::BatterySystem { usage: BatterySystem::CapacityGranularity1 }),
            (133,  142) => Ok(Usage::BatterySystem { usage: BatterySystem::CapacityGranularity2 }),
            (133,  143) => Ok(Usage::BatterySystem { usage: BatterySystem::iOEMInformation }),
            (133,  192) => Ok(Usage::BatterySystem { usage: BatterySystem::InhibitCharge }),
            (133,  193) => Ok(Usage::BatterySystem { usage: BatterySystem::EnablePolling }),
            (133,  194) => Ok(Usage::BatterySystem { usage: BatterySystem::ResetToZero }),
            (133,  208) => Ok(Usage::BatterySystem { usage: BatterySystem::ACPresent }),
            (133,  209) => Ok(Usage::BatterySystem { usage: BatterySystem::BatteryPresent }),
            (133,  210) => Ok(Usage::BatterySystem { usage: BatterySystem::PowerFail }),
            (133,  211) => Ok(Usage::BatterySystem { usage: BatterySystem::AlarmInhibited }),
            (133,  212) => Ok(Usage::BatterySystem { usage: BatterySystem::ThermistorUnderRange }),
            (133,  213) => Ok(Usage::BatterySystem { usage: BatterySystem::ThermistorHot }),
            (133,  214) => Ok(Usage::BatterySystem { usage: BatterySystem::ThermistorCold }),
            (133,  215) => Ok(Usage::BatterySystem { usage: BatterySystem::ThermistorOverRange }),
            (133,  216) => Ok(Usage::BatterySystem { usage: BatterySystem::VoltageOutOfRange }),
            (133,  217) => Ok(Usage::BatterySystem { usage: BatterySystem::CurrentOutOfRange }),
            (133,  218) => Ok(Usage::BatterySystem { usage: BatterySystem::CurrentNotRegulated }),
            (133,  219) => Ok(Usage::BatterySystem { usage: BatterySystem::VoltageNotRegulated }),
            (133,  220) => Ok(Usage::BatterySystem { usage: BatterySystem::MasterMode }),
            (133,  240) => Ok(Usage::BatterySystem { usage: BatterySystem::ChargerSelectorSupport }),
            (133,  241) => Ok(Usage::BatterySystem { usage: BatterySystem::ChargerSpec }),
            (133,  242) => Ok(Usage::BatterySystem { usage: BatterySystem::Level2 }),
            (133,  243) => Ok(Usage::BatterySystem { usage: BatterySystem::Level3 }),
            (140,  1) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BarcodeBadgeReader }),
            (140,  2) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BarcodeScanner }),
            (140,  3) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DumbBarCodeScanner }),
            (140,  4) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CordlessScannerBase }),
            (140,  5) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BarCodeScannerCradle }),
            (140,  16) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::AttributeReport }),
            (140,  17) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::SettingsReport }),
            (140,  18) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ScannedDataReport }),
            (140,  19) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::RawScannedDataReport }),
            (140,  20) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TriggerReport }),
            (140,  21) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::StatusReport }),
            (140,  22) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCEANControlReport }),
            (140,  23) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN23LabelControlReport }),
            (140,  24) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Code39ControlReport }),
            (140,  25) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Interleaved2of5ControlReport }),
            (140,  26) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Standard2of5ControlReport }),
            (140,  27) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MSIPlesseyControlReport }),
            (140,  28) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CodabarControlReport }),
            (140,  29) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Code128ControlReport }),
            (140,  30) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Misc1DControlReport }),
            (140,  31) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TwoDControlReport }),
            (140,  48) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::AimingPointerMode }),
            (140,  49) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BarCodePresentSensor }),
            (140,  50) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Class1ALaser }),
            (140,  51) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Class2Laser }),
            (140,  52) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::HeaterPresent }),
            (140,  53) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ContactScanner }),
            (140,  54) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ElectronicArticleSurveillanceNotification }),
            (140,  55) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ConstantElectronicArticleSurveillance }),
            (140,  56) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ErrorIndication }),
            (140,  57) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::FixedBeeper }),
            (140,  58) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GoodDecodeIndication }),
            (140,  59) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::HandsFreeScanning }),
            (140,  60) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::IntrinsicallySafe }),
            (140,  61) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::KlasseEinsLaser }),
            (140,  62) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::LongRangeScanner }),
            (140,  63) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MirrorSpeedControl }),
            (140,  64) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::NotOnFileIndication }),
            (140,  65) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ProgrammableBeeper }),
            (140,  66) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Triggerless }),
            (140,  67) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Wand }),
            (140,  68) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::WaterResistant }),
            (140,  69) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MultiRangeScanner }),
            (140,  70) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ProximitySensor }),
            (140,  77) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::FragmentDecoding }),
            (140,  78) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ScannerReadConfidence }),
            (140,  79) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DataPrefix }),
            (140,  80) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PrefixAIMI }),
            (140,  81) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PrefixNone }),
            (140,  82) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PrefixProprietary }),
            (140,  85) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ActiveTime }),
            (140,  86) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::AimingLaserPattern }),
            (140,  87) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BarCodePresent }),
            (140,  88) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BeeperState }),
            (140,  89) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::LaserOnTime }),
            (140,  90) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::LaserState }),
            (140,  91) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::LockoutTime }),
            (140,  92) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MotorState }),
            (140,  93) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MotorTimeout }),
            (140,  94) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PowerOnResetScanner }),
            (140,  95) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PreventReadofBarcodes }),
            (140,  96) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::InitiateBarcodeRead }),
            (140,  97) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TriggerState }),
            (140,  98) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TriggerMode }),
            (140,  99) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TriggerModeBlinkingLaserOn }),
            (140,  100) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TriggerModeContinuousLaserOn }),
            (140,  101) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TriggerModeLaseronwhilePulled }),
            (140,  102) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TriggerModeLaserstaysonafterrelease }),
            (140,  109) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CommitParameterstoNVM }),
            (140,  110) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ParameterScanning }),
            (140,  111) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ParametersChanged }),
            (140,  112) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Setparameterdefaultvalues }),
            (140,  117) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ScannerInCradle }),
            (140,  118) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ScannerInRange }),
            (140,  122) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::AimDuration }),
            (140,  123) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadLampDuration }),
            (140,  124) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadLampIntensity }),
            (140,  125) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadLED }),
            (140,  126) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadToneFrequency }),
            (140,  127) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadToneLength }),
            (140,  128) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadToneVolume }),
            (140,  130) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::NoReadMessage }),
            (140,  131) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::NotonFileVolume }),
            (140,  132) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PowerupBeep }),
            (140,  133) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::SoundErrorBeep }),
            (140,  134) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::SoundGoodReadBeep }),
            (140,  135) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::SoundNotOnFileBeep }),
            (140,  136) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GoodReadWhentoWrite }),
            (140,  137) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GRWTIAfterDecode }),
            (140,  138) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GRWTIBeepLampaftertransmit }),
            (140,  139) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::GRWTINoBeepLampuseatall }),
            (140,  145) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BooklandEAN }),
            (140,  146) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ConvertEAN8to13Type }),
            (140,  147) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ConvertUPCAtoEAN13 }),
            (140,  148) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ConvertUPCEtoA }),
            (140,  149) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN13 }),
            (140,  150) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN8 }),
            (140,  151) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN99128Mandatory }),
            (140,  152) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN99P5128Optional }),
            (140,  153) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EnableEANTwoLabel }),
            (140,  154) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCEAN }),
            (140,  155) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCEANCouponCode }),
            (140,  156) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCEANPeriodicals }),
            (140,  157) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCA }),
            (140,  158) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCAwith128Mandatory }),
            (140,  159) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCAwith128Optional }),
            (140,  160) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCAwithP5Optional }),
            (140,  161) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCE }),
            (140,  162) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UPCE1 }),
            (140,  169) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Periodical }),
            (140,  170) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalAutoDiscriminatePlus2 }),
            (140,  171) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalOnlyDecodewithPlus2 }),
            (140,  172) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalIgnorePlus2 }),
            (140,  173) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalAutoDiscriminatePlus5 }),
            (140,  174) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalOnlyDecodewithPlus5 }),
            (140,  175) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PeriodicalIgnorePlus5 }),
            (140,  176) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Check }),
            (140,  177) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDisablePrice }),
            (140,  178) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckEnable4digitPrice }),
            (140,  179) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckEnable5digitPrice }),
            (140,  180) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckEnableEuropean4digitPrice }),
            (140,  181) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckEnableEuropean5digitPrice }),
            (140,  183) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EANTwoLabel }),
            (140,  184) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EANThreeLabel }),
            (140,  185) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN8FlagDigit1 }),
            (140,  186) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN8FlagDigit2 }),
            (140,  187) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN8FlagDigit3 }),
            (140,  188) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN13FlagDigit1 }),
            (140,  189) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN13FlagDigit2 }),
            (140,  190) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EAN13FlagDigit3 }),
            (140,  191) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::AddEAN23LabelDefinition }),
            (140,  192) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ClearallEAN23LabelDefinitions }),
            (140,  195) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Codabar }),
            (140,  196) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Code128 }),
            (140,  199) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Code39 }),
            (140,  200) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Code93 }),
            (140,  201) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::FullASCIIConversion }),
            (140,  202) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Interleaved2of5 }),
            (140,  203) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ItalianPharmacyCode }),
            (140,  204) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MSIPlessey }),
            (140,  205) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Standard2of5IATA }),
            (140,  206) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Standard2of5 }),
            (140,  211) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TransmitStartStop }),
            (140,  212) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TriOptic }),
            (140,  213) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UCCEAN128 }),
            (140,  214) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigit }),
            (140,  215) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitDisable }),
            (140,  216) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableInterleaved2of5OPCC }),
            (140,  217) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableInterleaved2of5USS }),
            (140,  218) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableStandard2of5OPCC }),
            (140,  219) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableStandard2of5USS }),
            (140,  220) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableOneMSIPlessey }),
            (140,  221) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitEnableTwoMSIPlessey }),
            (140,  222) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitCodabarEnable }),
            (140,  223) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CheckDigitCode39Enable }),
            (140,  240) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::TransmitCheckDigit }),
            (140,  241) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DisableCheckDigitTransmit }),
            (140,  242) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::EnableCheckDigitTransmit }),
            (140,  251) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::SymbologyIdentifier1 }),
            (140,  252) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::SymbologyIdentifier2 }),
            (140,  253) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::SymbologyIdentifier3 }),
            (140,  254) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DecodedData }),
            (140,  255) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DecodeDataContinued }),
            (140,  256) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BarSpaceData }),
            (140,  257) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ScannerDataAccuracy }),
            (140,  258) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::RawDataPolarity }),
            (140,  259) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PolarityInvertedBarCode }),
            (140,  260) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PolarityNormalBarCode }),
            (140,  262) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MinimumLengthtoDecode }),
            (140,  263) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MaximumLengthtoDecode }),
            (140,  264) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DiscreteLengthtoDecode1 }),
            (140,  265) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DiscreteLengthtoDecode2 }),
            (140,  266) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DataLengthMethod }),
            (140,  267) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DLMethodReadany }),
            (140,  268) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DLMethodCheckinRange }),
            (140,  269) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DLMethodCheckforDiscrete }),
            (140,  272) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::AztecCode }),
            (140,  273) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::BC412 }),
            (140,  274) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::ChannelCode }),
            (140,  275) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Code16 }),
            (140,  276) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Code32 }),
            (140,  277) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Code49 }),
            (140,  278) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::CodeOne }),
            (140,  279) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::Colorcode }),
            (140,  280) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::DataMatrix }),
            (140,  281) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MaxiCode }),
            (140,  282) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::MicroPDF }),
            (140,  283) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PDF417 }),
            (140,  284) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::PosiCode }),
            (140,  285) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::QRCode }),
            (140,  286) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::SuperCode }),
            (140,  287) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::UltraCode }),
            (140,  288) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::USD5SlugCode }),
            (140,  289) => Ok(Usage::BarcodeScanner { usage: BarcodeScanner::VeriCode }),
            (141,  1) => Ok(Usage::Scales { usage: Scales::Scales }),
            (141,  32) => Ok(Usage::Scales { usage: Scales::ScaleDevice }),
            (141,  33) => Ok(Usage::Scales { usage: Scales::ScaleClass }),
            (141,  34) => Ok(Usage::Scales { usage: Scales::ScaleClassIMetric }),
            (141,  35) => Ok(Usage::Scales { usage: Scales::ScaleClassIIMetric }),
            (141,  36) => Ok(Usage::Scales { usage: Scales::ScaleClassIIIMetric }),
            (141,  37) => Ok(Usage::Scales { usage: Scales::ScaleClassIIILMetric }),
            (141,  38) => Ok(Usage::Scales { usage: Scales::ScaleClassIVMetric }),
            (141,  39) => Ok(Usage::Scales { usage: Scales::ScaleClassIIIEnglish }),
            (141,  40) => Ok(Usage::Scales { usage: Scales::ScaleClassIIILEnglish }),
            (141,  41) => Ok(Usage::Scales { usage: Scales::ScaleClassIVEnglish }),
            (141,  42) => Ok(Usage::Scales { usage: Scales::ScaleClassGeneric }),
            (141,  48) => Ok(Usage::Scales { usage: Scales::ScaleAttributeReport }),
            (141,  49) => Ok(Usage::Scales { usage: Scales::ScaleControlReport }),
            (141,  50) => Ok(Usage::Scales { usage: Scales::ScaleDataReport }),
            (141,  51) => Ok(Usage::Scales { usage: Scales::ScaleStatusReport }),
            (141,  52) => Ok(Usage::Scales { usage: Scales::ScaleWeightLimitReport }),
            (141,  53) => Ok(Usage::Scales { usage: Scales::ScaleStatisticsReport }),
            (141,  64) => Ok(Usage::Scales { usage: Scales::DataWeight }),
            (141,  65) => Ok(Usage::Scales { usage: Scales::DataScaling }),
            (141,  80) => Ok(Usage::Scales { usage: Scales::WeightUnit }),
            (141,  81) => Ok(Usage::Scales { usage: Scales::WeightUnitMilligram }),
            (141,  82) => Ok(Usage::Scales { usage: Scales::WeightUnitGram }),
            (141,  83) => Ok(Usage::Scales { usage: Scales::WeightUnitKilogram }),
            (141,  84) => Ok(Usage::Scales { usage: Scales::WeightUnitCarats }),
            (141,  85) => Ok(Usage::Scales { usage: Scales::WeightUnitTaels }),
            (141,  86) => Ok(Usage::Scales { usage: Scales::WeightUnitGrains }),
            (141,  87) => Ok(Usage::Scales { usage: Scales::WeightUnitPennyweights }),
            (141,  88) => Ok(Usage::Scales { usage: Scales::WeightUnitMetricTon }),
            (141,  89) => Ok(Usage::Scales { usage: Scales::WeightUnitAvoirTon }),
            (141,  90) => Ok(Usage::Scales { usage: Scales::WeightUnitTroyOunce }),
            (141,  91) => Ok(Usage::Scales { usage: Scales::WeightUnitOunce }),
            (141,  92) => Ok(Usage::Scales { usage: Scales::WeightUnitPound }),
            (141,  96) => Ok(Usage::Scales { usage: Scales::CalibrationCount }),
            (141,  97) => Ok(Usage::Scales { usage: Scales::ReZeroCount }),
            (141,  112) => Ok(Usage::Scales { usage: Scales::ScaleStatus }),
            (141,  113) => Ok(Usage::Scales { usage: Scales::ScaleStatusFault }),
            (141,  114) => Ok(Usage::Scales { usage: Scales::ScaleStatusStableatCenterofZero }),
            (141,  115) => Ok(Usage::Scales { usage: Scales::ScaleStatusInMotion }),
            (141,  116) => Ok(Usage::Scales { usage: Scales::ScaleStatusWeightStable }),
            (141,  117) => Ok(Usage::Scales { usage: Scales::ScaleStatusUnderZero }),
            (141,  118) => Ok(Usage::Scales { usage: Scales::ScaleStatusOverWeightLimit }),
            (141,  119) => Ok(Usage::Scales { usage: Scales::ScaleStatusRequiresCalibration }),
            (141,  120) => Ok(Usage::Scales { usage: Scales::ScaleStatusRequiresRezeroing }),
            (141,  128) => Ok(Usage::Scales { usage: Scales::ZeroScale }),
            (141,  129) => Ok(Usage::Scales { usage: Scales::EnforcedZeroReturn }),
            (142,  1) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::MSRDeviceReadOnly }),
            (142,  17) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::Track1Length }),
            (142,  18) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::Track2Length }),
            (142,  19) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::Track3Length }),
            (142,  20) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::TrackJISLength }),
            (142,  32) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::TrackData }),
            (142,  33) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::Track1Data }),
            (142,  34) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::Track2Data }),
            (142,  35) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::Track3Data }),
            (142,  36) => Ok(Usage::MagneticStripeReader { usage: MagneticStripeReader::TrackJISData }),
            (144,  32) => Ok(Usage::CameraControl { usage: CameraControl::CameraAutofocus }),
            (144,  33) => Ok(Usage::CameraControl { usage: CameraControl::CameraShutter }),
            (145,  1) => Ok(Usage::Arcade { usage: Arcade::GeneralPurposeIOCard }),
            (145,  2) => Ok(Usage::Arcade { usage: Arcade::CoinDoor }),
            (145,  3) => Ok(Usage::Arcade { usage: Arcade::WatchdogTimer }),
            (145,  48) => Ok(Usage::Arcade { usage: Arcade::GeneralPurposeAnalogInputState }),
            (145,  49) => Ok(Usage::Arcade { usage: Arcade::GeneralPurposeDigitalInputState }),
            (145,  50) => Ok(Usage::Arcade { usage: Arcade::GeneralPurposeOpticalInputState }),
            (145,  51) => Ok(Usage::Arcade { usage: Arcade::GeneralPurposeDigitalOutputState }),
            (145,  52) => Ok(Usage::Arcade { usage: Arcade::NumberofCoinDoors }),
            (145,  53) => Ok(Usage::Arcade { usage: Arcade::CoinDrawerDropCount }),
            (145,  54) => Ok(Usage::Arcade { usage: Arcade::CoinDrawerStart }),
            (145,  55) => Ok(Usage::Arcade { usage: Arcade::CoinDrawerService }),
            (145,  56) => Ok(Usage::Arcade { usage: Arcade::CoinDrawerTilt }),
            (145,  57) => Ok(Usage::Arcade { usage: Arcade::CoinDoorTest }),
            (145,  64) => Ok(Usage::Arcade { usage: Arcade::CoinDoorLockout }),
            (145,  65) => Ok(Usage::Arcade { usage: Arcade::WatchdogTimeout }),
            (145,  66) => Ok(Usage::Arcade { usage: Arcade::WatchdogAction }),
            (145,  67) => Ok(Usage::Arcade { usage: Arcade::WatchdogReboot }),
            (145,  68) => Ok(Usage::Arcade { usage: Arcade::WatchdogRestart }),
            (145,  69) => Ok(Usage::Arcade { usage: Arcade::AlarmInput }),
            (145,  70) => Ok(Usage::Arcade { usage: Arcade::CoinDoorCounter }),
            (145,  71) => Ok(Usage::Arcade { usage: Arcade::IODirectionMapping }),
            (145,  72) => Ok(Usage::Arcade { usage: Arcade::SetIODirectionMapping }),
            (145,  73) => Ok(Usage::Arcade { usage: Arcade::ExtendedOpticalInputState }),
            (145,  74) => Ok(Usage::Arcade { usage: Arcade::PinPadInputState }),
            (145,  75) => Ok(Usage::Arcade { usage: Arcade::PinPadStatus }),
            (145,  76) => Ok(Usage::Arcade { usage: Arcade::PinPadOutput }),
            (145,  77) => Ok(Usage::Arcade { usage: Arcade::PinPadCommand }),
            (61904,  1) => Ok(Usage::FIDOAlliance { usage: FIDOAlliance::U2FAuthenticatorDevice }),
            (61904,  32) => Ok(Usage::FIDOAlliance { usage: FIDOAlliance::InputReportData }),
            (61904,  33) => Ok(Usage::FIDOAlliance { usage: FIDOAlliance::OutputReportData }),
            (p @ 0xff00..=0xffff, n) => Ok(Usage::VendorDefinedPage {
                vendor_page: VendorPage(p as u16),
                usage: VendorDefinedPage::VendorUsage { usage_id: n as u16 }
            }),
            (_, _) => Err(HutError::UnknownUsage),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn conversions() {
        let hid_usage_page: u16 = 0x01; // Generic Desktop
        let hid_usage_id: u16 = 0x02; // Mouse
        let hid_usage: u32 = (hid_usage_page as u32) << 16 | hid_usage_id as u32;

        let u = GenericDesktop::Mouse;
        // 32 bit usage to enum
        assert!(matches!(Usage::try_from(hid_usage).unwrap(), Usage::GenericDesktop {usage: _}));

        // Usage to u32
        assert_eq!(u32::from(&u), hid_usage);
        assert_eq!(u.usage_value(), hid_usage);

        // Usage to u16 usage_id
        assert_eq!(hid_usage_id, u16::from(&u));
        assert_eq!(hid_usage_id, u.usage_id_value());

        // Usage to UsagePage
        assert!(matches!(UsagePage::from(&u), UsagePage::GenericDesktop));

        // UsagePage to u16
        let up = UsagePage::from(&u);
        assert_eq!(hid_usage_page, u16::from(&up));

        // UsagePage to u16 via AsUsagePage trait
        assert_eq!(hid_usage_page, up.usage_page_value());
    }

    #[test]
    fn buttons() {
        let hid_usage_page: u16 = 0x9;
        let hid_usage_id: u16 = 0x5;
        let hid_usage: u32 = (hid_usage_page as u32) << 16 | hid_usage_id as u32;

        let u = Button::Button { button: 5 };
        assert!(matches!(Usage::try_from(hid_usage).unwrap(), Usage::Button { usage: _ }));

        // Usage to u32
        assert_eq!(u32::from(&u), hid_usage);
        assert_eq!(u.usage_value(), hid_usage);

        // Usage to u16 usage_id
        assert_eq!(hid_usage_id, u16::from(&u));
        assert_eq!(hid_usage_id, u.usage_id_value());

        // Usage to UsagePage
        assert!(matches!(UsagePage::from(&u), UsagePage::Button));

        // UsagePage to u16
        let up = UsagePage::from(&u);
        assert_eq!(hid_usage_page, u16::from(&up));

        // UsagePage to u16 via AsUsagePage trait
        assert_eq!(hid_usage_page, up.usage_page_value());
    }

    #[test]
    fn ordinals() {
        let hid_usage_page: u16 = 0xA;
        let hid_usage_id: u16 = 0x8;
        let hid_usage: u32 = (hid_usage_page as u32) << 16 | hid_usage_id as u32;

        let u = Ordinal::Ordinal { instance: 8 };
        assert!(matches!(Usage::try_from(hid_usage).unwrap(), Usage::Ordinal { usage: _ }));

        // Usage to u32
        assert_eq!(u32::from(&u), hid_usage);
        assert_eq!(u.usage_value(), hid_usage);

        // Usage to u16 usage_id
        assert_eq!(hid_usage_id, u16::from(&u));
        assert_eq!(hid_usage_id, u.usage_id_value());

        // Usage to UsagePage
        assert!(matches!(UsagePage::from(&u), UsagePage::Ordinal));

        // UsagePage to u16
        let up = UsagePage::from(&u);
        assert_eq!(hid_usage_page, u16::from(&up));

        // UsagePage to u16 via AsUsagePage trait
        assert_eq!(hid_usage_page, up.usage_page_value());
    }
}